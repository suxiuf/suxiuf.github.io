{
    "manifest": {
        "id": "git-file-explorer",
        "author": "",
        "version": "1.0.0",
        "pluginVersion": "0.5.2"
    },
    "description": {
        "original": "Add relevant git information to detected git repostitories in the file explorer.",
        "translation": "Add relevant git information to detected git repostitories in the file explorer."
    },
    "dict": {
        " log(`checking %s`, path2)": " log(`checking %s`, path2)",
        " log(`[OK] path represents a file`)": " log(`[OK] path represents a file`)",
        " log(`[OK] path represents a directory`)": " log(`[OK] path represents a directory`)",
        " log(`[FAIL] path represents something other than a file or directory`)": " log(`[FAIL] path represents something other than a file or directory`)",
        " log(`[FAIL] path is not accessible: %o`, e)": " log(`[FAIL] path is not accessible: %o`, e)",
        " log(`[FATAL] %o`, e)": " log(`[FATAL] %o`, e)",
        " log(name)": " log(name)",
        " log(...rest)": " log(...rest)",
        ".log(string, string)": ".log(string, string)",
        ".log({ from: string, to: string })": ".log({ from: string, to: string })",
        "_log();\n    init_merge()": "_log();\n    init_merge()",
        "_log();\n  }\n})": "_log();\n  }\n})",
        ".log(\"Unloading GitFileExplorerPlugin\")": ".log(\"Unloading GitFileExplorerPlugin\")",
        ".error(\"File explorer not found.\")": ".error(\"File explorer not found.\")",
        "_error();\n    GitResponseError = class extends GitError {\n      constructor(git, message)": "_error();\n    GitResponseError = class extends GitError {\n      constructor(git, message)",
        "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)": "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)",
        "_error();\n    EMPTY_COMMANDS = [];\n  }\n})": "_error();\n    EMPTY_COMMANDS = [];\n  }\n})",
        "_error();\n    init_git_logger()": "_error();\n    init_git_logger()",
        "_error();\n    init_task()": "_error();\n    init_task()",
        "_error();\n    init_utils()": "_error();\n    init_utils()",
        "_error();\n    init_parse_merge()": "_error();\n    init_parse_merge()",
        "_error();\n    init_parse_branch_delete()": "_error();\n    init_parse_branch_delete()",
        "_error();\n    init_parse_pull()": "_error();\n    init_parse_pull()",
        "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)": "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)",
        "_error();\ninit_git_error()": "_error();\ninit_git_error()",
        "_error();\ninit_task_configuration_error()": "_error();\ninit_task_configuration_error()",
        "_error();\nfunction isTaskError(result)": "_error();\nfunction isTaskError(result)",
        "_error();\nvar esm_default = gitInstanceFactory;\n\n// src/git/gitRepository.ts\nvar import_path2 = require(\"path\")": "_error();\nvar esm_default = gitInstanceFactory;\n\n// src/git/gitRepository.ts\nvar import_path2 = require(\"path\")",
        ".error(error)": ".error(error)",
        "text: \"About\"": "text: \"About\"",
        ".setText(\"Changes require restarting Obsidian\")": ".setText(\"Changes require restarting Obsidian\")",
        ".setText(\"Made with \\u2615 by \")": ".setText(\"Made with \\u2615 by \")",
        ".setText(\"Mateus Molina\")": ".setText(\"Mateus Molina\")",
        ".setButtonText(\"Commit\")": ".setButtonText(\"Commit\")",
        ".setName(\"Commit message\")": ".setName(\"Commit message\")",
        ".setName(\"Activate git changes widget\")": ".setName(\"Activate git changes widget\")",
        ".setName(\"Enable prompting commit message\")": ".setName(\"Enable prompting commit message\")",
        ".setName(\"Change color of changed files in the file explorer\")": ".setName(\"Change color of changed files in the file explorer\")",
        ".setName(\"Activate git sync widget\")": ".setName(\"Activate git sync widget\")",
        ".setDesc(\n      \"If empty, the commit will be in the format: 'Backup @ <iso-timestamp>'\"\n    )": ".setDesc(\n      \"If empty, the commit will be in the format: 'Backup @ <iso-timestamp>'\"\n    )",
        ".setDesc(\n      \"Show a widget in the file explorer with a counter of the current staged and unstaged changes\"\n    )": ".setDesc(\n      \"Show a widget in the file explorer with a counter of the current staged and unstaged changes\"\n    )",
        ".setDesc(\n      \"Prompt for a commit message when saving a file. If disabled, the commit message is in the format 'Backup @ {iso-timestamp}'\"\n    )": ".setDesc(\n      \"Prompt for a commit message when saving a file. If disabled, the commit message is in the format 'Backup @ {iso-timestamp}'\"\n    )",
        ".setDesc(\n      \"Show a widget in the file explorer with a button to sync with the remote repository\"\n    )": ".setDesc(\n      \"Show a widget in the file explorer with a button to sync with the remote repository\"\n    )"
    }
}
