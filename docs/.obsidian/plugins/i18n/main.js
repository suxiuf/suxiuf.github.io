var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.store/universalify@2.0.1/node_modules/universalify/index.js
var require_universalify = __commonJS({
  "node_modules/.store/universalify@2.0.1/node_modules/universalify/index.js"(exports) {
    "use strict";
    exports.fromCallback = function(fn) {
      return Object.defineProperty(function(...args) {
        if (typeof args[args.length - 1] === "function")
          fn.apply(this, args);
        else {
          return new Promise((resolve, reject) => {
            args.push((err, res) => err != null ? reject(err) : resolve(res));
            fn.apply(this, args);
          });
        }
      }, "name", { value: fn.name });
    };
    exports.fromPromise = function(fn) {
      return Object.defineProperty(function(...args) {
        const cb = args[args.length - 1];
        if (typeof cb !== "function")
          return fn.apply(this, args);
        else {
          args.pop();
          fn.apply(this, args).then((r) => cb(null, r), cb);
        }
      }, "name", { value: fn.name });
    };
  }
});

// node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
  "node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js"(exports, module2) {
    var constants = require("constants");
    var origCwd = process.cwd;
    var cwd = null;
    var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module2.exports = patch;
    function patch(fs7) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs7);
      }
      if (!fs7.lutimes) {
        patchLutimes(fs7);
      }
      fs7.chown = chownFix(fs7.chown);
      fs7.fchown = chownFix(fs7.fchown);
      fs7.lchown = chownFix(fs7.lchown);
      fs7.chmod = chmodFix(fs7.chmod);
      fs7.fchmod = chmodFix(fs7.fchmod);
      fs7.lchmod = chmodFix(fs7.lchmod);
      fs7.chownSync = chownFixSync(fs7.chownSync);
      fs7.fchownSync = chownFixSync(fs7.fchownSync);
      fs7.lchownSync = chownFixSync(fs7.lchownSync);
      fs7.chmodSync = chmodFixSync(fs7.chmodSync);
      fs7.fchmodSync = chmodFixSync(fs7.fchmodSync);
      fs7.lchmodSync = chmodFixSync(fs7.lchmodSync);
      fs7.stat = statFix(fs7.stat);
      fs7.fstat = statFix(fs7.fstat);
      fs7.lstat = statFix(fs7.lstat);
      fs7.statSync = statFixSync(fs7.statSync);
      fs7.fstatSync = statFixSync(fs7.fstatSync);
      fs7.lstatSync = statFixSync(fs7.lstatSync);
      if (fs7.chmod && !fs7.lchmod) {
        fs7.lchmod = function(path5, mode, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs7.lchmodSync = function() {
        };
      }
      if (fs7.chown && !fs7.lchown) {
        fs7.lchown = function(path5, uid, gid, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs7.lchownSync = function() {
        };
      }
      if (platform === "win32") {
        fs7.rename = typeof fs7.rename !== "function" ? fs7.rename : function(fs$rename) {
          function rename(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs7.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb)
                cb(er);
            });
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(rename, fs$rename);
          return rename;
        }(fs7.rename);
      }
      fs7.read = typeof fs7.read !== "function" ? fs7.read : function(fs$read) {
        function read(fd, buffer, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs7, fd, buffer, offset, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs7, fd, buffer, offset, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read, fs$read);
        return read;
      }(fs7.read);
      fs7.readSync = typeof fs7.readSync !== "function" ? fs7.readSync : function(fs$readSync) {
        return function(fd, buffer, offset, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs7, fd, buffer, offset, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs7.readSync);
      function patchLchmod(fs8) {
        fs8.lchmod = function(path5, mode, callback) {
          fs8.open(
            path5,
            constants.O_WRONLY | constants.O_SYMLINK,
            mode,
            function(err, fd) {
              if (err) {
                if (callback)
                  callback(err);
                return;
              }
              fs8.fchmod(fd, mode, function(err2) {
                fs8.close(fd, function(err22) {
                  if (callback)
                    callback(err2 || err22);
                });
              });
            }
          );
        };
        fs8.lchmodSync = function(path5, mode) {
          var fd = fs8.openSync(path5, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs8.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs8.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs8.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs8) {
        if (constants.hasOwnProperty("O_SYMLINK") && fs8.futimes) {
          fs8.lutimes = function(path5, at, mt, cb) {
            fs8.open(path5, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb)
                  cb(er);
                return;
              }
              fs8.futimes(fd, at, mt, function(er2) {
                fs8.close(fd, function(er22) {
                  if (cb)
                    cb(er2 || er22);
                });
              });
            });
          };
          fs8.lutimesSync = function(path5, at, mt) {
            var fd = fs8.openSync(path5, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs8.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs8.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs8.closeSync(fd);
              }
            }
            return ret;
          };
        } else if (fs8.futimes) {
          fs8.lutimes = function(_a, _b, _c, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs8.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb) {
          return orig.call(fs7, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs7, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb) {
          return orig.call(fs7, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs7, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb)
              cb.apply(this, arguments);
          }
          return options ? orig.call(fs7, target, options, callback) : orig.call(fs7, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs7, target, options) : orig.call(fs7, target);
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
  "node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js"(exports, module2) {
    var Stream = require("stream").Stream;
    module2.exports = legacy;
    function legacy(fs7) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path5, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path5, options);
        Stream.call(this);
        var self = this;
        this.path = path5;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if ("number" !== typeof this.end) {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self._read();
          });
          return;
        }
        fs7.open(this.path, this.flags, this.mode, function(err, fd) {
          if (err) {
            self.emit("error", err);
            self.readable = false;
            return;
          }
          self.fd = fd;
          self.emit("open", fd);
          self._read();
        });
      }
      function WriteStream(path5, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path5, options);
        Stream.call(this);
        this.path = path5;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs7.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
  "node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js"(exports, module2) {
    "use strict";
    module2.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = /* @__PURE__ */ Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });
      return copy;
    }
  }
});

// node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
  "node_modules/.store/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js"(exports, module2) {
    var fs7 = require("fs");
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = require("util");
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs7[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs7, queue);
      fs7.close = function(fs$close) {
        function close(fd, cb) {
          return fs$close.call(fs7, fd, function(err) {
            if (!err) {
              resetQueue();
            }
            if (typeof cb === "function")
              cb.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs7.close);
      fs7.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs7, arguments);
          resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs7.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs7[gracefulQueue]);
          require("assert").equal(fs7[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs7[gracefulQueue]);
    }
    module2.exports = patch(clone(fs7));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs7.__patched) {
      module2.exports = patch(fs7);
      fs7.__patched = true;
    }
    function patch(fs8) {
      polyfills(fs8);
      fs8.gracefulify = patch;
      fs8.createReadStream = createReadStream;
      fs8.createWriteStream = createWriteStream;
      var fs$readFile = fs8.readFile;
      fs8.readFile = readFile;
      function readFile(path5, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readFile(path5, options, cb);
        function go$readFile(path6, options2, cb2, startTime) {
          return fs$readFile(path6, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readFile, [path6, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$writeFile = fs8.writeFile;
      fs8.writeFile = writeFile;
      function writeFile(path5, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$writeFile(path5, data, options, cb);
        function go$writeFile(path6, data2, options2, cb2, startTime) {
          return fs$writeFile(path6, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$writeFile, [path6, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$appendFile = fs8.appendFile;
      if (fs$appendFile)
        fs8.appendFile = appendFile;
      function appendFile(path5, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$appendFile(path5, data, options, cb);
        function go$appendFile(path6, data2, options2, cb2, startTime) {
          return fs$appendFile(path6, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$appendFile, [path6, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$copyFile = fs8.copyFile;
      if (fs$copyFile)
        fs8.copyFile = copyFile;
      function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src2, dest2, flags2, cb2, startTime) {
          return fs$copyFile(src2, dest2, flags2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$readdir = fs8.readdir;
      fs8.readdir = readdir;
      var noReaddirOptionVersions = /^v[0-5]\./;
      function readdir(path5, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path6, options2, cb2, startTime) {
          return fs$readdir(path6, fs$readdirCallback(
            path6,
            options2,
            cb2,
            startTime
          ));
        } : function go$readdir2(path6, options2, cb2, startTime) {
          return fs$readdir(path6, options2, fs$readdirCallback(
            path6,
            options2,
            cb2,
            startTime
          ));
        };
        return go$readdir(path5, options, cb);
        function fs$readdirCallback(path6, options2, cb2, startTime) {
          return function(err, files) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([
                go$readdir,
                [path6, options2, cb2],
                err,
                startTime || Date.now(),
                Date.now()
              ]);
            else {
              if (files && files.sort)
                files.sort();
              if (typeof cb2 === "function")
                cb2.call(this, err, files);
            }
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs8);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs8.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs8.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs8, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs8, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs8, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs8, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path5, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path5, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path5, options) {
        return new fs8.ReadStream(path5, options);
      }
      function createWriteStream(path5, options) {
        return new fs8.WriteStream(path5, options);
      }
      var fs$open = fs8.open;
      fs8.open = open;
      function open(path5, flags, mode, cb) {
        if (typeof mode === "function")
          cb = mode, mode = null;
        return go$open(path5, flags, mode, cb);
        function go$open(path6, flags2, mode2, cb2, startTime) {
          return fs$open(path6, flags2, mode2, function(err, fd) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$open, [path6, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      return fs8;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs7[gracefulQueue].push(elem);
      retry();
    }
    var retryTimer;
    function resetQueue() {
      var now = Date.now();
      for (var i = 0; i < fs7[gracefulQueue].length; ++i) {
        if (fs7[gracefulQueue][i].length > 2) {
          fs7[gracefulQueue][i][3] = now;
          fs7[gracefulQueue][i][4] = now;
        }
      }
      retry();
    }
    function retry() {
      clearTimeout(retryTimer);
      retryTimer = void 0;
      if (fs7[gracefulQueue].length === 0)
        return;
      var elem = fs7[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];
      if (startTime === void 0) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 6e4) {
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function")
          cb.call(null, err);
      } else {
        var sinceAttempt = Date.now() - lastTime;
        var sinceStart = Math.max(lastTime - startTime, 1);
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        if (sinceAttempt >= desiredDelay) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          fs7[gracefulQueue].push(elem);
        }
      }
      if (retryTimer === void 0) {
        retryTimer = setTimeout(retry, 0);
      }
    }
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/fs/index.js
var require_fs = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/fs/index.js"(exports) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs7 = require_graceful_fs();
    var api = [
      "access",
      "appendFile",
      "chmod",
      "chown",
      "close",
      "copyFile",
      "fchmod",
      "fchown",
      "fdatasync",
      "fstat",
      "fsync",
      "ftruncate",
      "futimes",
      "lchmod",
      "lchown",
      "link",
      "lstat",
      "mkdir",
      "mkdtemp",
      "open",
      "opendir",
      "readdir",
      "readFile",
      "readlink",
      "realpath",
      "rename",
      "rm",
      "rmdir",
      "stat",
      "symlink",
      "truncate",
      "unlink",
      "utimes",
      "writeFile"
    ].filter((key) => {
      return typeof fs7[key] === "function";
    });
    Object.assign(exports, fs7);
    api.forEach((method) => {
      exports[method] = u(fs7[method]);
    });
    exports.exists = function(filename, callback) {
      if (typeof callback === "function") {
        return fs7.exists(filename, callback);
      }
      return new Promise((resolve) => {
        return fs7.exists(filename, resolve);
      });
    };
    exports.read = function(fd, buffer, offset, length, position, callback) {
      if (typeof callback === "function") {
        return fs7.read(fd, buffer, offset, length, position, callback);
      }
      return new Promise((resolve, reject) => {
        fs7.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
          if (err)
            return reject(err);
          resolve({ bytesRead, buffer: buffer2 });
        });
      });
    };
    exports.write = function(fd, buffer, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs7.write(fd, buffer, ...args);
      }
      return new Promise((resolve, reject) => {
        fs7.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
          if (err)
            return reject(err);
          resolve({ bytesWritten, buffer: buffer2 });
        });
      });
    };
    exports.readv = function(fd, buffers, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs7.readv(fd, buffers, ...args);
      }
      return new Promise((resolve, reject) => {
        fs7.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
          if (err)
            return reject(err);
          resolve({ bytesRead, buffers: buffers2 });
        });
      });
    };
    exports.writev = function(fd, buffers, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs7.writev(fd, buffers, ...args);
      }
      return new Promise((resolve, reject) => {
        fs7.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
          if (err)
            return reject(err);
          resolve({ bytesWritten, buffers: buffers2 });
        });
      });
    };
    if (typeof fs7.realpath.native === "function") {
      exports.realpath.native = u(fs7.realpath.native);
    } else {
      process.emitWarning(
        "fs.realpath.native is not a function. Is fs being monkey-patched?",
        "Warning",
        "fs-extra-WARN0003"
      );
    }
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/utils.js
var require_utils = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/utils.js"(exports, module2) {
    "use strict";
    var path5 = require("path");
    module2.exports.checkPath = function checkPath(pth) {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path5.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = "EINVAL";
          throw error;
        }
      }
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports, module2) {
    "use strict";
    var fs7 = require_fs();
    var { checkPath } = require_utils();
    var getMode = (options) => {
      const defaults = { mode: 511 };
      if (typeof options === "number")
        return options;
      return { ...defaults, ...options }.mode;
    };
    module2.exports.makeDir = async (dir, options) => {
      checkPath(dir);
      return fs7.mkdir(dir, {
        mode: getMode(options),
        recursive: true
      });
    };
    module2.exports.makeDirSync = (dir, options) => {
      checkPath(dir);
      return fs7.mkdirSync(dir, {
        mode: getMode(options),
        recursive: true
      });
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var { makeDir: _makeDir, makeDirSync } = require_make_dir();
    var makeDir = u(_makeDir);
    module2.exports = {
      mkdirs: makeDir,
      mkdirsSync: makeDirSync,
      // alias
      mkdirp: makeDir,
      mkdirpSync: makeDirSync,
      ensureDir: makeDir,
      ensureDirSync: makeDirSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/path-exists/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs7 = require_fs();
    function pathExists(path5) {
      return fs7.access(path5).then(() => true).catch(() => false);
    }
    module2.exports = {
      pathExists: u(pathExists),
      pathExistsSync: fs7.existsSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/util/utimes.js"(exports, module2) {
    "use strict";
    var fs7 = require_fs();
    var u = require_universalify().fromPromise;
    async function utimesMillis(path5, atime, mtime) {
      const fd = await fs7.open(path5, "r+");
      let closeErr = null;
      try {
        await fs7.futimes(fd, atime, mtime);
      } finally {
        try {
          await fs7.close(fd);
        } catch (e) {
          closeErr = e;
        }
      }
      if (closeErr) {
        throw closeErr;
      }
    }
    function utimesMillisSync(path5, atime, mtime) {
      const fd = fs7.openSync(path5, "r+");
      fs7.futimesSync(fd, atime, mtime);
      return fs7.closeSync(fd);
    }
    module2.exports = {
      utimesMillis: u(utimesMillis),
      utimesMillisSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/util/stat.js"(exports, module2) {
    "use strict";
    var fs7 = require_fs();
    var path5 = require("path");
    var u = require_universalify().fromPromise;
    function getStats(src, dest, opts) {
      const statFunc = opts.dereference ? (file) => fs7.stat(file, { bigint: true }) : (file) => fs7.lstat(file, { bigint: true });
      return Promise.all([
        statFunc(src),
        statFunc(dest).catch((err) => {
          if (err.code === "ENOENT")
            return null;
          throw err;
        })
      ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
    }
    function getStatsSync(src, dest, opts) {
      let destStat;
      const statFunc = opts.dereference ? (file) => fs7.statSync(file, { bigint: true }) : (file) => fs7.lstatSync(file, { bigint: true });
      const srcStat = statFunc(src);
      try {
        destStat = statFunc(dest);
      } catch (err) {
        if (err.code === "ENOENT")
          return { srcStat, destStat: null };
        throw err;
      }
      return { srcStat, destStat };
    }
    async function checkPaths(src, dest, funcName, opts) {
      const { srcStat, destStat } = await getStats(src, dest, opts);
      if (destStat) {
        if (areIdentical(srcStat, destStat)) {
          const srcBaseName = path5.basename(src);
          const destBaseName = path5.basename(dest);
          if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
            return { srcStat, destStat, isChangingCase: true };
          }
          throw new Error("Source and destination must not be the same.");
        }
        if (srcStat.isDirectory() && !destStat.isDirectory()) {
          throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
        }
        if (!srcStat.isDirectory() && destStat.isDirectory()) {
          throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
        }
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return { srcStat, destStat };
    }
    function checkPathsSync(src, dest, funcName, opts) {
      const { srcStat, destStat } = getStatsSync(src, dest, opts);
      if (destStat) {
        if (areIdentical(srcStat, destStat)) {
          const srcBaseName = path5.basename(src);
          const destBaseName = path5.basename(dest);
          if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
            return { srcStat, destStat, isChangingCase: true };
          }
          throw new Error("Source and destination must not be the same.");
        }
        if (srcStat.isDirectory() && !destStat.isDirectory()) {
          throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
        }
        if (!srcStat.isDirectory() && destStat.isDirectory()) {
          throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
        }
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return { srcStat, destStat };
    }
    async function checkParentPaths(src, srcStat, dest, funcName) {
      const srcParent = path5.resolve(path5.dirname(src));
      const destParent = path5.resolve(path5.dirname(dest));
      if (destParent === srcParent || destParent === path5.parse(destParent).root)
        return;
      let destStat;
      try {
        destStat = await fs7.stat(destParent, { bigint: true });
      } catch (err) {
        if (err.code === "ENOENT")
          return;
        throw err;
      }
      if (areIdentical(srcStat, destStat)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return checkParentPaths(src, srcStat, destParent, funcName);
    }
    function checkParentPathsSync(src, srcStat, dest, funcName) {
      const srcParent = path5.resolve(path5.dirname(src));
      const destParent = path5.resolve(path5.dirname(dest));
      if (destParent === srcParent || destParent === path5.parse(destParent).root)
        return;
      let destStat;
      try {
        destStat = fs7.statSync(destParent, { bigint: true });
      } catch (err) {
        if (err.code === "ENOENT")
          return;
        throw err;
      }
      if (areIdentical(srcStat, destStat)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return checkParentPathsSync(src, srcStat, destParent, funcName);
    }
    function areIdentical(srcStat, destStat) {
      return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
    }
    function isSrcSubdir(src, dest) {
      const srcArr = path5.resolve(src).split(path5.sep).filter((i) => i);
      const destArr = path5.resolve(dest).split(path5.sep).filter((i) => i);
      return srcArr.every((cur, i) => destArr[i] === cur);
    }
    function errMsg(src, dest, funcName) {
      return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
    }
    module2.exports = {
      // checkPaths
      checkPaths: u(checkPaths),
      checkPathsSync,
      // checkParent
      checkParentPaths: u(checkParentPaths),
      checkParentPathsSync,
      // Misc
      isSrcSubdir,
      areIdentical
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy.js
var require_copy = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy.js"(exports, module2) {
    "use strict";
    var fs7 = require_fs();
    var path5 = require("path");
    var { mkdirs } = require_mkdirs();
    var { pathExists } = require_path_exists();
    var { utimesMillis } = require_utimes();
    var stat = require_stat();
    async function copy(src, dest, opts = {}) {
      if (typeof opts === "function") {
        opts = { filter: opts };
      }
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        process.emitWarning(
          "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
          "Warning",
          "fs-extra-WARN0001"
        );
      }
      const { srcStat, destStat } = await stat.checkPaths(src, dest, "copy", opts);
      await stat.checkParentPaths(src, srcStat, dest, "copy");
      const include = await runFilter(src, dest, opts);
      if (!include)
        return;
      const destParent = path5.dirname(dest);
      const dirExists = await pathExists(destParent);
      if (!dirExists) {
        await mkdirs(destParent);
      }
      await getStatsAndPerformCopy(destStat, src, dest, opts);
    }
    async function runFilter(src, dest, opts) {
      if (!opts.filter)
        return true;
      return opts.filter(src, dest);
    }
    async function getStatsAndPerformCopy(destStat, src, dest, opts) {
      const statFn = opts.dereference ? fs7.stat : fs7.lstat;
      const srcStat = await statFn(src);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts);
      if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts);
      if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts);
      if (srcStat.isSocket())
        throw new Error(`Cannot copy a socket file: ${src}`);
      if (srcStat.isFIFO())
        throw new Error(`Cannot copy a FIFO pipe: ${src}`);
      throw new Error(`Unknown file: ${src}`);
    }
    async function onFile(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts);
      if (opts.overwrite) {
        await fs7.unlink(dest);
        return copyFile(srcStat, src, dest, opts);
      }
      if (opts.errorOnExist) {
        throw new Error(`'${dest}' already exists`);
      }
    }
    async function copyFile(srcStat, src, dest, opts) {
      await fs7.copyFile(src, dest);
      if (opts.preserveTimestamps) {
        if (fileIsNotWritable(srcStat.mode)) {
          await makeFileWritable(dest, srcStat.mode);
        }
        const updatedSrcStat = await fs7.stat(src);
        await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
      }
      return fs7.chmod(dest, srcStat.mode);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode) {
      return fs7.chmod(dest, srcMode | 128);
    }
    async function onDir(srcStat, destStat, src, dest, opts) {
      if (!destStat) {
        await fs7.mkdir(dest);
      }
      const items = await fs7.readdir(src);
      await Promise.all(items.map(async (item) => {
        const srcItem = path5.join(src, item);
        const destItem = path5.join(dest, item);
        const include = await runFilter(srcItem, destItem, opts);
        if (!include)
          return;
        const { destStat: destStat2 } = await stat.checkPaths(srcItem, destItem, "copy", opts);
        return getStatsAndPerformCopy(destStat2, srcItem, destItem, opts);
      }));
      if (!destStat) {
        await fs7.chmod(dest, srcStat.mode);
      }
    }
    async function onLink(destStat, src, dest, opts) {
      let resolvedSrc = await fs7.readlink(src);
      if (opts.dereference) {
        resolvedSrc = path5.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs7.symlink(resolvedSrc, dest);
      }
      let resolvedDest = null;
      try {
        resolvedDest = await fs7.readlink(dest);
      } catch (e) {
        if (e.code === "EINVAL" || e.code === "UNKNOWN")
          return fs7.symlink(resolvedSrc, dest);
        throw e;
      }
      if (opts.dereference) {
        resolvedDest = path5.resolve(process.cwd(), resolvedDest);
      }
      if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
        throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
      }
      if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
        throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
      }
      await fs7.unlink(dest);
      return fs7.symlink(resolvedSrc, dest);
    }
    module2.exports = copy;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy-sync.js
var require_copy_sync = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy-sync.js"(exports, module2) {
    "use strict";
    var fs7 = require_graceful_fs();
    var path5 = require("path");
    var mkdirsSync = require_mkdirs().mkdirsSync;
    var utimesMillisSync = require_utimes().utimesMillisSync;
    var stat = require_stat();
    function copySync3(src, dest, opts) {
      if (typeof opts === "function") {
        opts = { filter: opts };
      }
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        process.emitWarning(
          "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
          "Warning",
          "fs-extra-WARN0002"
        );
      }
      const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy", opts);
      stat.checkParentPathsSync(src, srcStat, dest, "copy");
      if (opts.filter && !opts.filter(src, dest))
        return;
      const destParent = path5.dirname(dest);
      if (!fs7.existsSync(destParent))
        mkdirsSync(destParent);
      return getStats(destStat, src, dest, opts);
    }
    function getStats(destStat, src, dest, opts) {
      const statSync = opts.dereference ? fs7.statSync : fs7.lstatSync;
      const srcStat = statSync(src);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts);
      else if (srcStat.isSocket())
        throw new Error(`Cannot copy a socket file: ${src}`);
      else if (srcStat.isFIFO())
        throw new Error(`Cannot copy a FIFO pipe: ${src}`);
      throw new Error(`Unknown file: ${src}`);
    }
    function onFile(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts);
      return mayCopyFile(srcStat, src, dest, opts);
    }
    function mayCopyFile(srcStat, src, dest, opts) {
      if (opts.overwrite) {
        fs7.unlinkSync(dest);
        return copyFile(srcStat, src, dest, opts);
      } else if (opts.errorOnExist) {
        throw new Error(`'${dest}' already exists`);
      }
    }
    function copyFile(srcStat, src, dest, opts) {
      fs7.copyFileSync(src, dest);
      if (opts.preserveTimestamps)
        handleTimestamps(srcStat.mode, src, dest);
      return setDestMode(dest, srcStat.mode);
    }
    function handleTimestamps(srcMode, src, dest) {
      if (fileIsNotWritable(srcMode))
        makeFileWritable(dest, srcMode);
      return setDestTimestamps(src, dest);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode) {
      return setDestMode(dest, srcMode | 128);
    }
    function setDestMode(dest, srcMode) {
      return fs7.chmodSync(dest, srcMode);
    }
    function setDestTimestamps(src, dest) {
      const updatedSrcStat = fs7.statSync(src);
      return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
    }
    function onDir(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts);
      return copyDir(src, dest, opts);
    }
    function mkDirAndCopy(srcMode, src, dest, opts) {
      fs7.mkdirSync(dest);
      copyDir(src, dest, opts);
      return setDestMode(dest, srcMode);
    }
    function copyDir(src, dest, opts) {
      fs7.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
    }
    function copyDirItem(item, src, dest, opts) {
      const srcItem = path5.join(src, item);
      const destItem = path5.join(dest, item);
      if (opts.filter && !opts.filter(srcItem, destItem))
        return;
      const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy", opts);
      return getStats(destStat, srcItem, destItem, opts);
    }
    function onLink(destStat, src, dest, opts) {
      let resolvedSrc = fs7.readlinkSync(src);
      if (opts.dereference) {
        resolvedSrc = path5.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs7.symlinkSync(resolvedSrc, dest);
      } else {
        let resolvedDest;
        try {
          resolvedDest = fs7.readlinkSync(dest);
        } catch (err) {
          if (err.code === "EINVAL" || err.code === "UNKNOWN")
            return fs7.symlinkSync(resolvedSrc, dest);
          throw err;
        }
        if (opts.dereference) {
          resolvedDest = path5.resolve(process.cwd(), resolvedDest);
        }
        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
          throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
        }
        if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
          throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
        }
        return copyLink(resolvedSrc, dest);
      }
    }
    function copyLink(resolvedSrc, dest) {
      fs7.unlinkSync(dest);
      return fs7.symlinkSync(resolvedSrc, dest);
    }
    module2.exports = copySync3;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/index.js
var require_copy2 = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    module2.exports = {
      copy: u(require_copy()),
      copySync: require_copy_sync()
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/remove/index.js"(exports, module2) {
    "use strict";
    var fs7 = require_graceful_fs();
    var u = require_universalify().fromCallback;
    function remove(path5, callback) {
      fs7.rm(path5, { recursive: true, force: true }, callback);
    }
    function removeSync4(path5) {
      fs7.rmSync(path5, { recursive: true, force: true });
    }
    module2.exports = {
      remove: u(remove),
      removeSync: removeSync4
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/empty/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs7 = require_fs();
    var path5 = require("path");
    var mkdir = require_mkdirs();
    var remove = require_remove();
    var emptyDir = u(async function emptyDir2(dir) {
      let items;
      try {
        items = await fs7.readdir(dir);
      } catch (e) {
        return mkdir.mkdirs(dir);
      }
      return Promise.all(items.map((item) => remove.remove(path5.join(dir, item))));
    });
    function emptyDirSync(dir) {
      let items;
      try {
        items = fs7.readdirSync(dir);
      } catch (e) {
        return mkdir.mkdirsSync(dir);
      }
      items.forEach((item) => {
        item = path5.join(dir, item);
        remove.removeSync(item);
      });
    }
    module2.exports = {
      emptyDirSync,
      emptydirSync: emptyDirSync,
      emptyDir,
      emptydir: emptyDir
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/file.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var path5 = require("path");
    var fs7 = require_fs();
    var mkdir = require_mkdirs();
    async function createFile(file) {
      let stats;
      try {
        stats = await fs7.stat(file);
      } catch (e) {
      }
      if (stats && stats.isFile())
        return;
      const dir = path5.dirname(file);
      let dirStats = null;
      try {
        dirStats = await fs7.stat(dir);
      } catch (err) {
        if (err.code === "ENOENT") {
          await mkdir.mkdirs(dir);
          await fs7.writeFile(file, "");
          return;
        } else {
          throw err;
        }
      }
      if (dirStats.isDirectory()) {
        await fs7.writeFile(file, "");
      } else {
        await fs7.readdir(dir);
      }
    }
    function createFileSync(file) {
      let stats;
      try {
        stats = fs7.statSync(file);
      } catch (e) {
      }
      if (stats && stats.isFile())
        return;
      const dir = path5.dirname(file);
      try {
        if (!fs7.statSync(dir).isDirectory()) {
          fs7.readdirSync(dir);
        }
      } catch (err) {
        if (err && err.code === "ENOENT")
          mkdir.mkdirsSync(dir);
        else
          throw err;
      }
      fs7.writeFileSync(file, "");
    }
    module2.exports = {
      createFile: u(createFile),
      createFileSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/link.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var path5 = require("path");
    var fs7 = require_fs();
    var mkdir = require_mkdirs();
    var { pathExists } = require_path_exists();
    var { areIdentical } = require_stat();
    async function createLink(srcpath, dstpath) {
      let dstStat;
      try {
        dstStat = await fs7.lstat(dstpath);
      } catch (e) {
      }
      let srcStat;
      try {
        srcStat = await fs7.lstat(srcpath);
      } catch (err) {
        err.message = err.message.replace("lstat", "ensureLink");
        throw err;
      }
      if (dstStat && areIdentical(srcStat, dstStat))
        return;
      const dir = path5.dirname(dstpath);
      const dirExists = await pathExists(dir);
      if (!dirExists) {
        await mkdir.mkdirs(dir);
      }
      await fs7.link(srcpath, dstpath);
    }
    function createLinkSync(srcpath, dstpath) {
      let dstStat;
      try {
        dstStat = fs7.lstatSync(dstpath);
      } catch (e) {
      }
      try {
        const srcStat = fs7.lstatSync(srcpath);
        if (dstStat && areIdentical(srcStat, dstStat))
          return;
      } catch (err) {
        err.message = err.message.replace("lstat", "ensureLink");
        throw err;
      }
      const dir = path5.dirname(dstpath);
      const dirExists = fs7.existsSync(dir);
      if (dirExists)
        return fs7.linkSync(srcpath, dstpath);
      mkdir.mkdirsSync(dir);
      return fs7.linkSync(srcpath, dstpath);
    }
    module2.exports = {
      createLink: u(createLink),
      createLinkSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports, module2) {
    "use strict";
    var path5 = require("path");
    var fs7 = require_fs();
    var { pathExists } = require_path_exists();
    var u = require_universalify().fromPromise;
    async function symlinkPaths(srcpath, dstpath) {
      if (path5.isAbsolute(srcpath)) {
        try {
          await fs7.lstat(srcpath);
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          throw err;
        }
        return {
          toCwd: srcpath,
          toDst: srcpath
        };
      }
      const dstdir = path5.dirname(dstpath);
      const relativeToDst = path5.join(dstdir, srcpath);
      const exists = await pathExists(relativeToDst);
      if (exists) {
        return {
          toCwd: relativeToDst,
          toDst: srcpath
        };
      }
      try {
        await fs7.lstat(srcpath);
      } catch (err) {
        err.message = err.message.replace("lstat", "ensureSymlink");
        throw err;
      }
      return {
        toCwd: srcpath,
        toDst: path5.relative(dstdir, srcpath)
      };
    }
    function symlinkPathsSync(srcpath, dstpath) {
      if (path5.isAbsolute(srcpath)) {
        const exists2 = fs7.existsSync(srcpath);
        if (!exists2)
          throw new Error("absolute srcpath does not exist");
        return {
          toCwd: srcpath,
          toDst: srcpath
        };
      }
      const dstdir = path5.dirname(dstpath);
      const relativeToDst = path5.join(dstdir, srcpath);
      const exists = fs7.existsSync(relativeToDst);
      if (exists) {
        return {
          toCwd: relativeToDst,
          toDst: srcpath
        };
      }
      const srcExists = fs7.existsSync(srcpath);
      if (!srcExists)
        throw new Error("relative srcpath does not exist");
      return {
        toCwd: srcpath,
        toDst: path5.relative(dstdir, srcpath)
      };
    }
    module2.exports = {
      symlinkPaths: u(symlinkPaths),
      symlinkPathsSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-type.js"(exports, module2) {
    "use strict";
    var fs7 = require_fs();
    var u = require_universalify().fromPromise;
    async function symlinkType(srcpath, type) {
      if (type)
        return type;
      let stats;
      try {
        stats = await fs7.lstat(srcpath);
      } catch (e) {
        return "file";
      }
      return stats && stats.isDirectory() ? "dir" : "file";
    }
    function symlinkTypeSync(srcpath, type) {
      if (type)
        return type;
      let stats;
      try {
        stats = fs7.lstatSync(srcpath);
      } catch (e) {
        return "file";
      }
      return stats && stats.isDirectory() ? "dir" : "file";
    }
    module2.exports = {
      symlinkType: u(symlinkType),
      symlinkTypeSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var path5 = require("path");
    var fs7 = require_fs();
    var { mkdirs, mkdirsSync } = require_mkdirs();
    var { symlinkPaths, symlinkPathsSync } = require_symlink_paths();
    var { symlinkType, symlinkTypeSync } = require_symlink_type();
    var { pathExists } = require_path_exists();
    var { areIdentical } = require_stat();
    async function createSymlink(srcpath, dstpath, type) {
      let stats;
      try {
        stats = await fs7.lstat(dstpath);
      } catch (e) {
      }
      if (stats && stats.isSymbolicLink()) {
        const [srcStat, dstStat] = await Promise.all([
          fs7.stat(srcpath),
          fs7.stat(dstpath)
        ]);
        if (areIdentical(srcStat, dstStat))
          return;
      }
      const relative = await symlinkPaths(srcpath, dstpath);
      srcpath = relative.toDst;
      const toType = await symlinkType(relative.toCwd, type);
      const dir = path5.dirname(dstpath);
      if (!await pathExists(dir)) {
        await mkdirs(dir);
      }
      return fs7.symlink(srcpath, dstpath, toType);
    }
    function createSymlinkSync(srcpath, dstpath, type) {
      let stats;
      try {
        stats = fs7.lstatSync(dstpath);
      } catch (e) {
      }
      if (stats && stats.isSymbolicLink()) {
        const srcStat = fs7.statSync(srcpath);
        const dstStat = fs7.statSync(dstpath);
        if (areIdentical(srcStat, dstStat))
          return;
      }
      const relative = symlinkPathsSync(srcpath, dstpath);
      srcpath = relative.toDst;
      type = symlinkTypeSync(relative.toCwd, type);
      const dir = path5.dirname(dstpath);
      const exists = fs7.existsSync(dir);
      if (exists)
        return fs7.symlinkSync(srcpath, dstpath, type);
      mkdirsSync(dir);
      return fs7.symlinkSync(srcpath, dstpath, type);
    }
    module2.exports = {
      createSymlink: u(createSymlink),
      createSymlinkSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/index.js"(exports, module2) {
    "use strict";
    var { createFile, createFileSync } = require_file();
    var { createLink, createLinkSync } = require_link();
    var { createSymlink, createSymlinkSync } = require_symlink();
    module2.exports = {
      // file
      createFile,
      createFileSync,
      ensureFile: createFile,
      ensureFileSync: createFileSync,
      // link
      createLink,
      createLinkSync,
      ensureLink: createLink,
      ensureLinkSync: createLinkSync,
      // symlink
      createSymlink,
      createSymlinkSync,
      ensureSymlink: createSymlink,
      ensureSymlinkSync: createSymlinkSync
    };
  }
});

// node_modules/.store/jsonfile@6.1.0/node_modules/jsonfile/utils.js
var require_utils2 = __commonJS({
  "node_modules/.store/jsonfile@6.1.0/node_modules/jsonfile/utils.js"(exports, module2) {
    function stringify(obj, { EOL = "\n", finalEOL = true, replacer = null, spaces } = {}) {
      const EOF = finalEOL ? EOL : "";
      const str = JSON.stringify(obj, replacer, spaces);
      return str.replace(/\n/g, EOL) + EOF;
    }
    function stripBom(content) {
      if (Buffer.isBuffer(content))
        content = content.toString("utf8");
      return content.replace(/^\uFEFF/, "");
    }
    module2.exports = { stringify, stripBom };
  }
});

// node_modules/.store/jsonfile@6.1.0/node_modules/jsonfile/index.js
var require_jsonfile = __commonJS({
  "node_modules/.store/jsonfile@6.1.0/node_modules/jsonfile/index.js"(exports, module2) {
    var _fs;
    try {
      _fs = require_graceful_fs();
    } catch (_) {
      _fs = require("fs");
    }
    var universalify = require_universalify();
    var { stringify, stripBom } = require_utils2();
    async function _readFile(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs7 = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      let data = await universalify.fromCallback(fs7.readFile)(file, options);
      data = stripBom(data);
      let obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err;
        } else {
          return null;
        }
      }
      return obj;
    }
    var readFile = universalify.fromPromise(_readFile);
    function readFileSync3(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs7 = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      try {
        let content = fs7.readFileSync(file, options);
        content = stripBom(content);
        return JSON.parse(content, options.reviver);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err;
        } else {
          return null;
        }
      }
    }
    async function _writeFile(file, obj, options = {}) {
      const fs7 = options.fs || _fs;
      const str = stringify(obj, options);
      await universalify.fromCallback(fs7.writeFile)(file, str, options);
    }
    var writeFile = universalify.fromPromise(_writeFile);
    function writeFileSync3(file, obj, options = {}) {
      const fs7 = options.fs || _fs;
      const str = stringify(obj, options);
      return fs7.writeFileSync(file, str, options);
    }
    var jsonfile = {
      readFile,
      readFileSync: readFileSync3,
      writeFile,
      writeFileSync: writeFileSync3
    };
    module2.exports = jsonfile;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile2 = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/jsonfile.js"(exports, module2) {
    "use strict";
    var jsonFile = require_jsonfile();
    module2.exports = {
      // jsonfile exports
      readJson: jsonFile.readFile,
      readJsonSync: jsonFile.readFileSync,
      writeJson: jsonFile.writeFile,
      writeJsonSync: jsonFile.writeFileSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/output-file/index.js
var require_output_file = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/output-file/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs7 = require_fs();
    var path5 = require("path");
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    async function outputFile(file, data, encoding = "utf-8") {
      const dir = path5.dirname(file);
      if (!await pathExists(dir)) {
        await mkdir.mkdirs(dir);
      }
      return fs7.writeFile(file, data, encoding);
    }
    function outputFileSync(file, ...args) {
      const dir = path5.dirname(file);
      if (!fs7.existsSync(dir)) {
        mkdir.mkdirsSync(dir);
      }
      fs7.writeFileSync(file, ...args);
    }
    module2.exports = {
      outputFile: u(outputFile),
      outputFileSync
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json.js"(exports, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFile } = require_output_file();
    async function outputJson(file, data, options = {}) {
      const str = stringify(data, options);
      await outputFile(file, str, options);
    }
    module2.exports = outputJson;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json-sync.js"(exports, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFileSync } = require_output_file();
    function outputJsonSync2(file, data, options) {
      const str = stringify(data, options);
      outputFileSync(file, str, options);
    }
    module2.exports = outputJsonSync2;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/json/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var jsonFile = require_jsonfile2();
    jsonFile.outputJson = u(require_output_json());
    jsonFile.outputJsonSync = require_output_json_sync();
    jsonFile.outputJSON = jsonFile.outputJson;
    jsonFile.outputJSONSync = jsonFile.outputJsonSync;
    jsonFile.writeJSON = jsonFile.writeJson;
    jsonFile.writeJSONSync = jsonFile.writeJsonSync;
    jsonFile.readJSON = jsonFile.readJson;
    jsonFile.readJSONSync = jsonFile.readJsonSync;
    module2.exports = jsonFile;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move.js
var require_move = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move.js"(exports, module2) {
    "use strict";
    var fs7 = require_fs();
    var path5 = require("path");
    var { copy } = require_copy2();
    var { remove } = require_remove();
    var { mkdirp } = require_mkdirs();
    var { pathExists } = require_path_exists();
    var stat = require_stat();
    async function move(src, dest, opts = {}) {
      const overwrite = opts.overwrite || opts.clobber || false;
      const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, "move", opts);
      await stat.checkParentPaths(src, srcStat, dest, "move");
      const destParent = path5.dirname(dest);
      const parsedParentPath = path5.parse(destParent);
      if (parsedParentPath.root !== destParent) {
        await mkdirp(destParent);
      }
      return doRename(src, dest, overwrite, isChangingCase);
    }
    async function doRename(src, dest, overwrite, isChangingCase) {
      if (!isChangingCase) {
        if (overwrite) {
          await remove(dest);
        } else if (await pathExists(dest)) {
          throw new Error("dest already exists.");
        }
      }
      try {
        await fs7.rename(src, dest);
      } catch (err) {
        if (err.code !== "EXDEV") {
          throw err;
        }
        await moveAcrossDevice(src, dest, overwrite);
      }
    }
    async function moveAcrossDevice(src, dest, overwrite) {
      const opts = {
        overwrite,
        errorOnExist: true,
        preserveTimestamps: true
      };
      await copy(src, dest, opts);
      return remove(src);
    }
    module2.exports = move;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move-sync.js
var require_move_sync = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move-sync.js"(exports, module2) {
    "use strict";
    var fs7 = require_graceful_fs();
    var path5 = require("path");
    var copySync3 = require_copy2().copySync;
    var removeSync4 = require_remove().removeSync;
    var mkdirpSync = require_mkdirs().mkdirpSync;
    var stat = require_stat();
    function moveSync(src, dest, opts) {
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;
      const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, "move", opts);
      stat.checkParentPathsSync(src, srcStat, dest, "move");
      if (!isParentRoot(dest))
        mkdirpSync(path5.dirname(dest));
      return doRename(src, dest, overwrite, isChangingCase);
    }
    function isParentRoot(dest) {
      const parent = path5.dirname(dest);
      const parsedPath = path5.parse(parent);
      return parsedPath.root === parent;
    }
    function doRename(src, dest, overwrite, isChangingCase) {
      if (isChangingCase)
        return rename(src, dest, overwrite);
      if (overwrite) {
        removeSync4(dest);
        return rename(src, dest, overwrite);
      }
      if (fs7.existsSync(dest))
        throw new Error("dest already exists.");
      return rename(src, dest, overwrite);
    }
    function rename(src, dest, overwrite) {
      try {
        fs7.renameSync(src, dest);
      } catch (err) {
        if (err.code !== "EXDEV")
          throw err;
        return moveAcrossDevice(src, dest, overwrite);
      }
    }
    function moveAcrossDevice(src, dest, overwrite) {
      const opts = {
        overwrite,
        errorOnExist: true,
        preserveTimestamps: true
      };
      copySync3(src, dest, opts);
      return removeSync4(src);
    }
    module2.exports = moveSync;
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/move/index.js
var require_move2 = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/move/index.js"(exports, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    module2.exports = {
      move: u(require_move()),
      moveSync: require_move_sync()
    };
  }
});

// node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/index.js
var require_lib = __commonJS({
  "node_modules/.store/fs-extra@11.2.0/node_modules/fs-extra/lib/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      // Export promiseified graceful-fs:
      ...require_fs(),
      // Export extra methods:
      ...require_copy2(),
      ...require_empty(),
      ...require_ensure(),
      ...require_json(),
      ...require_mkdirs(),
      ...require_move2(),
      ...require_output_file(),
      ...require_path_exists(),
      ...require_remove()
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/main.ts
var path4 = __toESM(require("path"));
var fs6 = __toESM(require_lib());
var import_obsidian27 = require("obsidian");

// src/settings/data.ts
var DEFAULT_SETTINGS = {
  // ==============================
  //         基础设置
  // ==============================
  // 同意
  I18N_AGREEMENT: false,
  // 首次向导
  I18N_WIZARD: true,
  // UUID
  I18N_UUID: "",
  // 翻译语言
  I18N_LANGUAGE: "zh-cn",
  // 主题色
  I18N_COLOR: "#409EFF",
  // 签名
  I18N_AUTHOR: "",
  // 译文编辑
  I18N_EDIT_MODE: true,
  // 打开设置
  I18N_OPEN_SETTINGS: true,
  // 网络文件配置
  I18N_SEARCH_TEXT: "",
  // 排序
  I18N_SORT: "0",
  // 类型
  I18N_TYPE: "0",
  // ==============================
  //         本地模式
  // ==============================
  I18N_MODE_LDT: true,
  // 自动更新
  I18N_AUTOMATIC_UPDATE: false,
  // 增量提取
  I18N_INCREMENTAL_EXTRACTION: false,
  // 名称翻译
  I18N_NAME_TRANSLATION: false,
  // 名称翻译 前缀
  I18N_NAME_TRANSLATION_PREFIX: "[",
  // 名称翻译 后缀
  I18N_NAME_TRANSLATION_SUFFIX: "]",
  // ==============================
  //         云端模式
  // ==============================
  I18N_MODE_NDT: false,
  // ==============================
  //         机器翻译
  // ==============================
  I18N_MODE_NIT: false,
  I18N_NIT_API: "BAIDU",
  I18N_NIT_API_INTERVAL: 500,
  I18N_NIT_APIS: {
    BAIDU: { FROM: "auto", TO: "zh", APP_ID: "", KEY: "" }
  },
  I18N_NIT_OPENAI_URL: "https://api.openai.com",
  I18N_NIT_OPENAI_KEY: "",
  I18N_NIT_OPENAI_MODEL: "gpt-3.5-turbo",
  I18N_NIT_OPENAI_TIPS: "\u4F60\u662F\u4E00\u4E2A\u7FFB\u8BD1\u5DE5\u4F5C\u8005\uFF0C\u4F60\u5C06\u8FDB\u884Cobsidian\u7B14\u8BB0\u8F6F\u4EF6\u7684\u63D2\u4EF6\u7FFB\u8BD1\uFF0C\u672C\u6B21\u7FFB\u8BD1\u7684\u63D2\u4EF6\u540D\u79F0\u4E3A: ${plugin}\uFF0C\u8BF7\u7ED3\u5408\u63D2\u4EF6\u540D\u79F0\u4EE5\u53CA\u8F6F\u4EF6\u7FFB\u8BD1\u7684\u6807\u51C6\u8FDB\u884C\u540E\u7EED\u5DE5\u4F5C\uFF0C\u56E0\u4E3A\u5927\u591A\u6570\u6587\u672C\u957F\u5EA6\u8F83\u77ED\uFF0C\u8BF7\u4EE5\u7B26\u5408\u4E2D\u6587\u4E60\u60EF\u7684\u65B9\u5F0F\u7FFB\u8BD1\u3002\u63A5\u4E0B\u6765\u6211\u4F1A\u63D0\u4EA4\u7ED9\u4F60\u5F88\u591A\u82F1\u6587\u6587\u672C\uFF0C\u8BF7\u5C06\u5176\u7FFB\u8BD1\u4E3A\u7B80\u4F53\u4E2D\u6587\uFF0C\u5E76\u4E14\u53EA\u8FD4\u56DE\u7ED9\u6211\u7FFB\u8BD1\u540E\u7684\u5185\u5BB9",
  // ==============================
  //         沉浸翻译
  // ==============================
  I18N_MODE_IMT: false,
  I18N_IMT_CONFIG: {
    selectors: [
      "*"
    ],
    excludeSelectors: [
      ".modal .i18n__container"
    ],
    excludeTags: [],
    additionalSelectors: [],
    additionalExcludeSelectors: [],
    additionalExcludeTags: [],
    stayOriginalSelectors: [],
    stayOriginalTags: [],
    atomicBlockSelectors: [],
    atomicBlockTags: []
  },
  // ==============================
  //         共建远端
  // ==============================
  // 译文提交
  I18N_SUBMIT_MODE: true,
  // 译文提交
  I18N_SUBMIT_URL: "",
  // 提交时间标记
  I18N_SUBMIT_TIME: 0,
  // 提交历史
  I18N_SUBMIT_HISTORY: [],
  // 忽略插件
  I18N_IGNORE: false,
  // ==============================
  //         正则匹配
  // ==============================
  I18N_RE_TEMP_MODE: true,
  I18N_RE_TEMP: "",
  I18N_RE_MODE: "\u9ED8\u8BA4",
  I18N_RE_FLAGS: "gs",
  I18N_RE_LENGTH: 300,
  I18N_RE_MODE_EDIT: false,
  I18N_RE_MODE_DISPLAY: false,
  I18N_RE_DATAS_DISPLAY: false,
  I18N_RE_MODES: ["\u9ED8\u8BA4"],
  I18N_RE_DATAS: {
    "\u9ED8\u8BA4": [
      "Notice\\(\\s*(.+?)\\s*\\)",
      ".log\\(\\s*(.+?)\\s*\\)",
      ".error\\(\\s*(.+?)\\s*\\)",
      "t\\s*=\\s*:\\s*(['\"`])(.+?)\\1",
      ".textContent\\s*=\\s*:\\s*(['\"`])(.+?)\\1",
      "name\\s*:\\s*(['\"`])(.+?)\\1",
      "description\\s*:\\s*(['\"`])(.+?)\\1",
      "selection\\s*:\\s*(['\"`])(.+?)\\1",
      "annotation\\s*:\\s*(['\"`])(.+?)\\1",
      "link\\s*:\\s*(['\"`])(.+?)\\1",
      "text\\s*:\\s*(['\"`])(.+?)\\1",
      "search\\s*:\\s*(['\"`])(.+?)\\1",
      "speech\\s*:\\s*(['\"`])(.+?)\\1",
      "page\\s*:\\s*(['\"`])(.+?)\\1",
      "settings\\s*:\\s*(['\"`])(.+?)\\1",
      ".setText\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".setButtonText\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".setName\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".setDesc\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".setPlaceholder\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".setTooltip\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".appendText\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".setTitle\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".addHeading\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      ".renderMarkdown\\(\\s*(['\"`])(.+?)\\1\\s*\\)",
      // ".createEl\\((['\"`])([\\w:-]+)\\1,\\s*\\{\\s*text:\\s*(['\"`])(.+?)\\3\\s*\\}\\s*\\)",
      ".innerText\\s*=\\s*(['\"`]).*?\\1"
    ]
  },
  // ==============================
  //         GITEE
  // ==============================
  I18N_GITEE_OWNER: "zero--two",
  I18N_GITEE_REPO: "obsidian-i18n-translation",
  // ==============================
  //         管理员
  // ==============================
  I18N_ADMIN_MODE: false,
  I18N_ADMIN_TOKEN: ""
};

// src/settings/ui/index.ts
var import_obsidian18 = require("obsidian");

// src/settings/ui/i18n-language.ts
var import_obsidian2 = require("obsidian");

// src/settings/ui/base-setting.ts
var BaseSetting = class {
  constructor(obj) {
    this.settingTab = obj;
    this.i18n = obj.i18n;
    this.settings = obj.i18n.settings;
    this.containerEl = obj.contentEl;
    this.app = obj.app;
  }
  display() {
    this.main();
  }
};

// src/data/data.ts
var LANGUAGES = {
  "zh-cn": "\u7B80\u4F53\u4E2D\u6587"
};
var API_TYPES = {
  "BAIDU": "\u767E\u5EA6",
  "OPENAI": "OpenAI"
};
var BAIDU_ERROR_CODE = {
  "52000": "\u6210\u529F",
  "52001": "\u8BF7\u6C42\u8D85\u65F6",
  "52002": "\u7CFB\u7EDF\u9519\u8BEF",
  "52003": "\u672A\u6388\u6743\u7528\u6237",
  "54000": "\u5FC5\u586B\u53C2\u6570\u4E3A\u7A7A",
  "54001": "\u7B7E\u540D\u9519\u8BEF",
  "54003": "\u8BBF\u95EE\u9891\u7387\u53D7\u9650",
  "54004": "\u8D26\u6237\u4F59\u989D\u4E0D\u8DB3",
  "54005": "\u957Fquery\u8BF7\u6C42\u9891\u7E41",
  "58000": "\u5BA2\u6237\u7AEFIP\u975E\u6CD5",
  "58001": "\u8BD1\u6587\u8BED\u8A00\u65B9\u5411\u4E0D\u652F\u6301",
  "58002": "\u670D\u52A1\u5F53\u524D\u5DF2\u5173\u95ED",
  "58003": "\u6B64IP\u5DF2\u88AB\u5C01\u7981",
  "90107": "\u8BA4\u8BC1\u672A\u901A\u8FC7\u6216\u672A\u751F\u6548",
  "20003": "\u8BF7\u6C42\u5185\u5BB9\u5B58\u5728\u5B89\u5168\u98CE\u9669 "
};
var I18N_SORT = {
  "0": "\u6B63\u5E8F",
  "1": "\u5012\u5E8F"
};
var I18N_TYPE = {
  "0": "\u5168\u90E8",
  "1": "\u63D0\u53D6",
  "2": "\u7FFB\u8BD1",
  "3": "\u8FD8\u539F"
};

// src/lang/inxdex.ts
var import_obsidian = require("obsidian");

// src/lang/locale/zh_cn.ts
var zh_cn_default = {
  // ====================
  //      公共区域
  // ====================
  PUBLIC_SUCCESS: "\u6210\u529F",
  PUBLIC_FAILURE: "\u5931\u8D25",
  // ====================
  //      主要区域
  // ====================
  I18N_NAME: "I18N",
  I18N_HELP_TITLE_NAME: "\u9047\u5230\u96BE\u9898\uFF1F\u901F\u52A0Q\u7FA4\u54A8\u8BE2\uFF01",
  I18N_HELP_TITLE_QQ_BUTTON_TIP: "\u4E00\u952E\u76F4\u8FBE\uFF0C\u52A0\u5165Q\u7FA4\u5171\u4EAB\u7CBE\u5F69\uFF01",
  I18N_HELP_TITLE_SETTING_BUTTON_TIP: "\u6253\u5F00I18N\u8BBE\u7F6E\u754C\u9762",
  I18N_HELP_TITLE_HELP_BUTTON_TIP: "\u6253\u5F00I18N\u5E2E\u52A9\u754C\u9762",
  I18N_SEARCH_TITLE_NAME: "\u641C\u7D22",
  I18N_ITEM_LABEL_A_NAME: "\u65E0\u8BD1\u6587",
  I18N_ITEM_LABEL_A_DESC: "\u60A8\u8FD8\u672A\u63D0\u53D6\u8BD1\u6587",
  I18N_ITEM_LABEL_B_NAME: "\u5DF2\u7FFB\u8BD1",
  I18N_ITEM_LABEL_C_NAME: "\u672A\u7FFB\u8BD1",
  I18N_ITEM_LABEL_D_NAME: "\u5DF2\u8FC7\u65F6",
  I18N_ITEM_LABEL_BCD_DESC_AUTHOR: "\u4F5C\u8005",
  I18N_ITEM_LABEL_BCD_DESC_VERSION: "\u652F\u6301\u7248\u672C",
  I18N_ITEM_LABEL_E_NAME: "\u8BD1\u6587\u6709\u8BEF",
  I18N_ITEM_LABEL_E_DESC: "\u683C\u5F0F\u683C\u5F0F\u53EF\u80FD\u5B58\u5728\u9519\u8BEF \u8BF7\u4ED4\u7EC6\u68C0\u67E5\u540E\u91CD\u8BD5",
  I18N_ITEM_LABEL_F_NAME: "\u6709\u6C49\u5316",
  I18N_ITEM_LABEL_F_DESC: "\u6839\u636E\u53CD\u9988 \u6B64\u63D2\u4EF6\u53EF\u80FD\u81EA\u5E26\u4E2D\u6587",
  I18N_ITEM_LABEL_G_DESC: "\u65E0",
  I18N_ITEM_OPEN_SETTING_BUTTON_TIP: "\u6253\u5F00\u63D2\u4EF6\u8BBE\u7F6E",
  I18N_ITEM_OPEN_DIR_BUTTON_TIP: "\u6253\u5F00\u63D2\u4EF6\u76EE\u5F55",
  I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD: "\u6253\u5F00\u76EE\u5F55",
  I18N_ITEM_DELETE_DIR_BUTTON_TIP: "\u5220\u9664\u8BD1\u6587\u76EE\u5F55",
  I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD: "\u5220\u9664\u8BD1\u6587",
  I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP: "\u7F16\u8F91\u8BD1\u6587",
  I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP: "\u63D0\u4EA4\u8BD1\u6587",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT: "\u63D0\u53D6",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TIP: "\u4ECE\u63D2\u4EF6\u4E2D\u63D0\u53D6\u672A\u7FFB\u8BD1\u7684\u8BD1\u6587",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD: "\u63D0\u53D6\u8BD1\u6587",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u63D0\u53D6\u8BD1\u6587",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT: "\u4E0B\u8F7D",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TIP: "\u4ECE\u7F51\u7EDC\u4E0B\u8F7D\u8BD1\u6587",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD: "\u4E0B\u8F7D\u8BD1\u6587",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT: "\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TIP: "\u4ECE\u7F51\u7EDC\u4E0B\u8F7D\u8BD1\u6587\u5BF9\u672C\u5730\u8BD1\u6587\u8FDB\u884C\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u66F4\u65B0\u8BD1\u6587",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_TIP: "\u751F\u6210\u5DF2\u7FFB\u8BD1\u8BD1\u6587",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u673A\u5668\u7FFB\u8BD1",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_TRANSLATION_BUTTON_TEXT: "\u7FFB\u8BD1",
  I18N_ITEM_TRANSLATION_BUTTON_TIP: "\u63D2\u4EF6\u7FFB\u8BD1",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD: "\u63D2\u4EF6\u7FFB\u8BD1",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u5982\u9047\u7FFB\u8BD1\u540E\u63D2\u4EF6\u5931\u6548\n\u8BF4\u660E\u8BD1\u6587\u53EF\u80FD\u51FA\u73B0\u95EE\u9898\n\u70B9\u51FB\u8FD8\u539F\u5373\u53EF\u6062\u590D\u539F\u72B6",
  I18N_ITEM_RESTORE_BUTTON_TEXT: "\u8FD8\u539F",
  I18N_ITEM_RESTORE_BUTTON_TIP: "\u63D2\u4EF6\u8FD8\u539F",
  I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD: "\u63D2\u4EF6\u8FD8\u539F",
  I18N_STATE_HEAD: "\u72B6\u6001\u6587\u4EF6",
  I18N_UPDATE_HEAD: "\u63D2\u4EF6\u66F4\u65B0",
  // ====================
  //      Wizard区域
  // ====================
  WIZARD_VIDEO_TUTORIAL_TITLE_NAME: "\u5B98\u65B9\u89C6\u9891\u6559\u7A0B",
  WIZARD_VIDEO_TUTORIAL_TITLE_DESC: "\u8BE6\u5C3D\u6F14\u793AObsidian i18n\u64CD\u4F5C\uFF0C\u52A9\u529B\u5FEB\u901F\u638C\u63E1",
  WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT: "\u6D4F\u89C8",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME: "\u5B98\u65B9\u6587\u6863\u6559\u7A0B",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC: "Obsidian i18n\u7684\u5168\u9762\u63A2\u7D22\u4E4B\u65C5\u6307\u5357",
  WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT: "\u6D4F\u89C8",
  WIZARD_QQ_TITLE_NAME: "\u5B98\u65B9Q\u7FA4",
  WIZARD_QQ_TITLE_DESC: "\u5728\u5B98\u65B9\u7FA4\uFF0C\u60A8\u53EF\u53D1\u5E03\u9700\u6C42\u3001\u63D0\u4EA4BUG\u3001\u5206\u4EAB\u8BD1\u6587\uFF0C\u5E76\u4E0E\u5176\u4ED6\u7528\u6237\u5C31\u63D2\u4EF6\u4F7F\u7528\u3001\u7FFB\u8BD1\u7B49\u8BDD\u9898\u4EA4\u6D41\u4E92\u52A9\u3002",
  WIZARD_QQ_TEXT: "\u52A0\u5165",
  // ====================
  //       提交区域
  // ====================
  SUBMITE_PUBLIC_AUTHOR: "\u4F5C\u8005",
  SUBMITE_PUBLIC_TRANSLATION_VERSION: "\u8BD1\u6587\u7248\u672C",
  SUBMITE_PUBLIC_PLUGIN_VERSION: "\u63D2\u4EF6\u7248\u672C",
  SUBMITE_TITLE_NAME: "\u611F\u8C22\u5171\u4EAB\u8BD1\u6587",
  SUBMITE_TITLE_DESC: "\u63D0\u4EA4\u524D\uFF0C\u8BF7\u60A8\u7EC6\u5FC3\u5BA1\u9605\uFF0C\u6211\u4EEC\u8877\u5FC3\u611F\u8C22\u60A8\u7684\u914D\u5408\u4E0E\u52AA\u529B\u3002",
  SUBMITE_LOCAL_TRANSLATION_NAME: "[\u672C\u5730\u8BD1\u6587]",
  SUBMITE_CLOUD_TRANSLATION_NAME: "[\u4E91\u7AEF\u8BD1\u6587]",
  SUBMITE_OPERATE_CANCEL_BUTTON_TEXT: "\u53D6\u6D88\u63D0\u4EA4",
  SUBMITE_OPERATE_CANCEL_BUTTON_NOTICE_HEAD: "\u53D6\u6D88\u63D0\u4EA4",
  SUBMITE_OPERATE_REQUEST_BUTTON_TEXT: "\u8BF7\u6C42\u7FFB\u8BD1",
  SUBMITE_OPERATE_REQUEST_BUTTON_NOTICE_HEAD: "\u8BF7\u6C42\u7FFB\u8BD1",
  SUBMITE_OPERATE_MARK_BUTTON_TEXT: "\u6807\u8BB0\u6C49\u5316",
  SUBMITE_OPERATE_MARK_BUTTON_NOTICE_HEAD: "\u6807\u8BB0\u6C49\u5316",
  SUBMITE_OPERATE_SUBMITE_BUTTON_TEXT: "\u63D0\u4EA4\u8BD1\u6587",
  SUBMITE_OPERATE_SUBMITE_BUTTON_NOTICE_HEAD: "\u63D0\u4EA4\u8BD1\u6587",
  SUBMITE_OPERATE_UPDATE_BUTTON_TEXT: "\u63D0\u4EA4\u4FEE\u6539",
  SUBMITE_OPERATE_UPDATE_BUTTON_NOTICE_HEAD: "\u63D0\u4EA4\u4FEE\u6539",
  SUBMITE_INSPECT_HEAD: "\u8BD1\u6587\u68C0\u67E5",
  SUBMITE_INSPECT_NOTICE_A: "\u8BD1\u6587\u5B57\u6BB5\u7F3A\u5931",
  SUBMITE_INSPECT_NOTICE_B: "\u4F5C\u8005\u4E0D\u80FD\u4E3A\u7A7A",
  SUBMITE_INSPECT_NOTICE_C: "\u7FFB\u8BD1\u5185\u5BB9\u8FBE\u6807",
  SUBMITE_INSPECT_NOTICE_D: "\u7FFB\u8BD1\u5185\u5BB9\u4E0D\u8D85\u8FC7\u767E\u5206\u4E4B\u4E94\u5341",
  SUBMITE_INSPECT_NOTICE_E: "\u7248\u672C\u53F7\u683C\u5F0F\u5FC5\u987B\u4E3A(X.X.X)",
  // ====================
  //       编辑区域
  // ====================
  EDITOR_PUBLIC_HEAD: "\u8BD1\u6587\u7F16\u8F91\u5668",
  EDITOR_TITLE_AUTHOR: "\u4F5C\u8005",
  EDITOR_TITLE_TRANSLATION_VERSION: "\u8BD1\u6587\u7248\u672C",
  EDITOR_TITLE_PLUGIN_VERSION: "\u7248\u672C",
  EDITOR_TITLE_DESCRIPTION: "\u63CF\u8FF0",
  EDITOR_SAVE_TRANSLATION_BUTTON_TEXT: "\u4FDD\u5B58",
  EDITOR_CANCEL_ITEM_BUTTON_TEXT: "\u53D6\u6D88",
  EDITOR_CANCEL_ITEM_BUTTON_NOTICE_CONTENT_A: "\u53D6\u6D88\u9009\u62E9",
  EDITOR_DELETE_ITEM_BUTTON_TEXT: "\u5220\u9664",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A: "\u5220\u9664\u6210\u529F",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_B: "\u5220\u9664\u5931\u8D25",
  EDITOR_INSERT_ITEM_BUTTON_TEXT: "\u65B0\u589E",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A: "\u65B0\u589E\u6210\u529F",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B: "\u65B0\u589E\u5931\u8D25\n\u8BD1\u6587\u4E2D\u5DF2\u5B58\u5728\u6B64\u5185\u5BB9",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_C: "\u65B0\u589E\u5931\u8D25\n\u65B0\u589E\u524D\u8BF7\u53D6\u6D88\u9009\u4E2D\u5BF9\u8C61",
  EDITOR_RESTORE_ITEM_BUTTON_TEXT: "\u8FD8\u539F",
  EDITOR_RESTORE_ITEM_BUTTON_NOTICE_CONTENT_A: "\u8FD8\u539F\u6210\u529F",
  EDITOR_RESTORE_ITEM_BUTTON_NOTICE_CONTENT_B: "\u8FD8\u539F\u5931\u8D25\n\u8FD8\u539F\u65F6\u8BF7\u9009\u4E2D\u5BF9\u8C61",
  EDITOR_HELP_BUTTON_TEXT: "\u9000\u51FA\u524D\u8BF7\u4FDD\u5B58",
  EDITOR_HELP_BUTTON_NOTICE_CONTENT_A: "\n\u9000\u51FA\u524D\u8BF7\u52A1\u5FC5\u4FDD\u5B58\n\u9000\u51FA\u524D\u8BF7\u52A1\u5FC5\u4FDD\u5B58\n\u9000\u51FA\u524D\u8BF7\u52A1\u5FC5\u4FDD\u5B58",
  // ====================
  //       设置区域
  // ====================
  SETTING_PUBLIC_HIDE: "\u9690\u85CF",
  SETTING_PUBLIC_SHOW: "\u663E\u793A",
  SETTING_PUBLIC_RE: "\u6B63\u5219",
  SETTING_BASE_TITLE_NAME: "\u57FA\u7840\u8BBE\u7F6E",
  SETTING_HELP_NAME: "\u5E2E\u52A9",
  SETTING_LANGUAGE_NAME: "\u8BED\u8A00",
  SETTING_LANGUAGE_DESC: "\u9009\u62E9\u9700\u8981\u7FFB\u8BD1\u7684\u8BED\u8A00",
  SETTING_LDT_NAME: "\u672C\u5730\u6A21\u5F0F",
  SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD: "\u8BCD\u5178\u91CD\u8F7D",
  SETTING_LDT_AUTOMATIC_UPDATE_NAME: "\u8BCD\u5178\u91CD\u8F7D",
  SETTING_LDT_AUTOMATIC_UPDATE_DESC: "\u68C0\u6D4B\u5230\u63D2\u4EF6\u7248\u672C\u53D8\u52A8\u540E\uFF0C\u81EA\u52A8\u5E94\u7528\u672C\u5730\u5DF2\u6709\u8BD1\u6587(\u56E0\u4E3A\u63D2\u4EF6\u66F4\u65B0\uFF0C\u672C\u5730\u8BD1\u6587\u53EF\u80FD\u4E0D\u9002\u914D\uFF0C\u8BF7\u6CE8\u610F\u662F\u5426\u62A5\u9519)",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A: "\u5F00\u59CB\u68C0\u67E5\u66F4\u65B0",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B: "\u6CA1\u6709\u9700\u8981\u66F4\u65B0\u7684\u63D2\u4EF6",
  SETTING_NDT_NAME: "\u4E91\u7AEF\u6A21\u5F0F",
  SETTING_NDT_PUBLIC_MODE_HEAD: "\u4E91\u7AEF\u6A21\u5F0F",
  SETTING_NDT_MODE_NOTICE_A: "\u5F53\u524D\u8BED\u8A00 API \u4E0D\u5B58\u5728",
  SETTING_NDT_MODE_NOTICE_B: "\u7F51\u7EDC\u5F02\u5E38",
  SETTING_NDT_PUBLIC_IGNORE_HEAD: "\u6807\u8BB0\u6C49\u5316",
  SETTING_NDT_APIS_NAME: "\u4E91\u7AEF\u63A5\u53E3",
  SETTING_NDT_APIS_DESC: "\u8BF7\u8F93\u5165\u60A8\u8981\u7FFB\u8BD1\u8BED\u8A00\u5BF9\u5E94\u7684API(\u91CD\u65B0\u6DFB\u52A0\u5C06\u4F1A\u8986\u76D6)",
  SETTING_NDT_APIS_INSERT_BUTTON: "\u6DFB\u52A0",
  SETTING_NDT_IGNORE_NAME: "\u6807\u8BB0\u6C49\u5316",
  SETTING_NDT_IGNORE_DESC: "\u6807\u8BB0\u81EA\u5E26\u4E2D\u6587\u7684\u63D2\u4EF6(\u7531\u793E\u533A\u53CD\u9988 \u9700\u8054\u7F51\u67E5\u8BE2)",
  SETTING_NDT_IGNORE_NOTICE_A: "\u5F53\u524D\u8BED\u8A00 API \u4E0D\u5B58\u5728",
  SETTING_NDT_IGNORE_NOTICE_B: "\u7F51\u7EDC\u5F02\u5E38",
  SETTING_NIT_NAME: "\u673A\u5668\u7FFB\u8BD1",
  SETTING_NIT_APIS_NAME: "\u9009\u62E9\u63A5\u53E3",
  SETTING_NIT_APIS_DESC: "\u9009\u62E9\u60A8\u8981\u4F7F\u7528\u7684\u63A5\u53E3",
  SETTING_NIT_TEST_BUTTON_TEXT: "\u6D4B\u8BD5",
  SETTING_NIT_INTERVAL_NAME: "\u8BF7\u6C42\u95F4\u9694",
  SETTING_NIT_INTERVAL_DESC: "\u7528\u4E8E\u9650\u5236\u6BCF\u6B21\u8BF7\u6C42\u95F4\u9694(\u5355\u4F4D: \u6BEB\u79D2)",
  SETTING_NIT_BAIDU_NAME: "\u767E\u5EA6",
  SETTING_NIT_BAIDU_DESC: "\u57FA\u4E8E\u767E\u5EA6API\u8FDB\u884C\u7FFB\u8BD1",
  SETTING_NIT_OPENAI_NAME: "OPENAI",
  SETTING_NIT_OPENAI_DESC: "\u57FA\u4E8EOPENAI\u7684API\u8FDB\u884C\u7FFB\u8BD1",
  SETTING_NIT_OPENAI_TIP_NAME: "\u63D0\u793A",
  SETTING_NIT_OPENAI_TIP_DESC: "\u5373prompt\uFF0C\u7528\u4E8E\u6307\u5BFCAI\u5982\u4F55\u7FFB\u8BD1\uFF0C\u672C\u63D2\u4EF6\u63D0\u4F9B\u9ED8\u8BA4\u63D0\u793A\u8BCD\uFF0C\u5982\u6709\u9700\u8981\u53EF\u81EA\u884C\u8C03\u6574\u3002",
  SETTING_NIT_OPENAI_TIP_PLACEHOLDER: "\u63D0\u793A\u8BCD",
  SETTING_MORE_TITLE_NAME: "\u66F4\u591A\u529F\u80FD",
  SETTING_Author_NAME: "\u8BD1\u6587\u7B7E\u540D",
  SETTING_Author_DESC: "\u751F\u6210\u8BD1\u6587\u65F6\u81EA\u52A8\u6DFB\u52A0\u4F5C\u8005\u7B7E\u540D",
  SETTING_Author_PLACEHOLDER: "\u7B7E\u540D",
  SETTING_OPEN_SETTING_NAME: "\u8BBE\u7F6E\u8DF3\u8F6C",
  SETTING_OPEN_SETTING_DESC: "\u542F\u7528\u540E\u63D2\u4EF6\u9875\u9762\u4E2D\u4F1A\u663E\u793A\u8BBE\u7F6E\u8DF3\u8F6C\u6309\u94AE",
  SETTING_EDITOR_NAME: "\u8BD1\u6587\u7F16\u8F91",
  SETTING_EDITOR_DESC: "\u542F\u7528/\u7981\u7528\u5185\u7F6E\u8BD1\u6587\u7F16\u8F91\u5668\u529F\u80FD",
  SETTING_CLOUD_COLLABORATION_NAME: "\u5171\u5EFA\u4E91\u7AEF",
  SETTING_CLOUD_COLLABORATION_DESC: "\u542F\u52A8\u6B64\u529F\u80FD\u540E\uFF0C\u60A8\u53EF\u4EE5\u63D0\u4EA4\u81EA\u5DF1\u7684\u8BD1\u6587\u3001\u8BF7\u6C42\u5BF9\u67D0\u4E2A\u63D2\u4EF6\u8FDB\u884C\u7FFB\u8BD1\u3001\u6807\u8BB0\u63D2\u4EF6\u662F\u5426\u81EA\u5E26\u6C49\u5316\u3002\u6B22\u8FCE\u4E3A\u793E\u533A\u8D21\u732E\u529B\u91CF\uFF01(\u6CE8\u610F\uFF1A\u5982\u51FA\u73B0\u9875\u9762\u65E0\u5185\u5BB9\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5)",
  SETTING_CLOUD_COLLABORATION_TOKEN_NAME: "Gitee Token",
  SETTING_CLOUD_COLLABORATION_TOKEN_DESC: "\u8BF7\u63D0\u4F9B\u60A8\u7684Token\u4EE5\u652F\u6301\u6279\u91CF\u63D0\u4EA4(\u4E34\u65F6\u4F7F\u7528\u65E0\u9700\u586B\u5199)",
  SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER: "Toekn",
  SETTING_RE_TITLE_NAME: "\u5339\u914D\u6A21\u5F0F\u914D\u7F6E",
  SETTING_RE_MODE_NAME: "\u6A21\u5F0F",
  SETTING_RE_MODE_DESC: "\u5F53\u524D\u6B63\u5728\u4F7F\u7528\u7684\u5339\u914D\u6A21\u5F0F",
  SETTING_RE_FLAGS_NAME: "\u6807\u5FD7",
  SETTING_RE_FLAGS_DESC: "\u6B63\u5219\u8868\u8FBE\u5F0F\u7684flags",
  SETTING_RE_FLAGS_PLACEHOLDER: "flags",
  SETTING_RE_LENGTH_NAME: "\u957F\u5EA6",
  SETTING_RE_LENGTH_DESC: "\u9650\u5236re\u53EF\u4EE5\u5339\u914D\u5230\u7684\u6700\u5927\u957F\u5EA6",
  SETTING_RE_EDIT_MODE_NAME: "\u6A21\u5F0F\u7F16\u8F91",
  SETTING_RE_EDIT_MODE_DESC: "\u65B0\u589E\u548C\u5220\u9664\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u6A21\u5F0F",
  SETTING_RE_EDIT_MODE_PLACEHOLDER: "\u6A21\u5F0F",
  SETTING_RE_EDIT_INSERT_BUTTON_TEXT: "\u6DFB\u52A0",
  SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A: "RE\u6A21\u5F0F\u540D\u79F0\u91CD\u590D \u65E0\u6CD5\u6DFB\u52A0",
  SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A: "\u5220\u9664\u5931\u8D25",
  SETTING_RE_EDIT_ITEM_NAME: "\u6570\u636E\u7F16\u8F91",
  SETTING_RE_EDIT_ITEM_DESC: "\u65B0\u589E\u548C\u5220\u9664\u6B63\u5219\u8868\u8FBE\u5F0F\u6A21\u5F0F\u6570\u636E",
  SETTING_RE_EDIT_ITEM_PLACEHOLDER: "RegExp",
  SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT: "\u6DFB\u52A0"
  // ====================
  //       公共区域
  // ====================
};

// src/lang/locale/zh_tw.ts
var zh_tw_default = {
  // ====================
  //      公共区域
  // ====================
  PUBLIC_SUCCESS: "\u6210\u529F",
  PUBLIC_FAILURE: "\u5931\u6557",
  // ====================
  //      主要區域
  // ====================
  I18N_NAME: "I18N",
  I18N_HELP_TITLE_NAME: "\u9047\u5230\u96E3\u984C\uFF1F\u901F\u52A0Q\u7FA4\u54A8\u8A62\uFF01",
  I18N_HELP_TITLE_QQ_BUTTON_TIP: "\u58F9\u9375\u76F4\u9054\uFF0C\u52A0\u5165Q\u7FA4\u5171\u4EAB\u7CBE\u5F69\uFF01",
  I18N_HELP_TITLE_SETTING_BUTTON_TIP: "\u6253\u958BI18N\u8A2D\u7F6E\u754C\u9762",
  I18N_HELP_TITLE_HELP_BUTTON_TIP: "\u6253\u958BI18N\u5E6B\u52A9\u754C\u9762",
  I18N_SEARCH_TITLE_NAME: "\u641C\u7D22",
  I18N_ITEM_LABEL_A_NAME: "\u7121\u8B6F\u6587",
  I18N_ITEM_LABEL_A_DESC: "\u60A8\u9084\u672A\u63D0\u53D6\u8B6F\u6587",
  I18N_ITEM_LABEL_B_NAME: "\u5DF2\u7FFB\u8B6F",
  I18N_ITEM_LABEL_C_NAME: "\u672A\u7FFB\u8B6F",
  I18N_ITEM_LABEL_D_NAME: "\u5DF2\u904E\u6642",
  I18N_ITEM_LABEL_BCD_DESC_AUTHOR: "\u4F5C\u8005",
  I18N_ITEM_LABEL_BCD_DESC_VERSION: "\u652F\u6301\u7248\u672C",
  I18N_ITEM_LABEL_E_NAME: "\u8B6F\u6587\u6709\u8AA4",
  I18N_ITEM_LABEL_E_DESC: "\u683C\u5F0F\u683C\u5F0F\u53EF\u80FD\u5B58\u5728\u932F\u8AA4 \u8ACB\u4ED4\u7D30\u6AA2\u67E5\u5F8C\u91CD\u8A66",
  I18N_ITEM_LABEL_F_NAME: "\u6709\u6F22\u5316",
  I18N_ITEM_LABEL_F_DESC: "\u6839\u64DA\u53CD\u994B \u6B64\u63D2\u4EF6\u53EF\u80FD\u81EA\u5E36\u4E2D\u6587",
  I18N_ITEM_LABEL_G_DESC: "\u7121",
  I18N_ITEM_OPEN_SETTING_BUTTON_TIP: "\u6253\u958B\u63D2\u4EF6\u8A2D\u7F6E",
  I18N_ITEM_OPEN_DIR_BUTTON_TIP: "\u6253\u958B\u63D2\u4EF6\u76EE\u9304",
  I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD: "\u6253\u958B\u76EE\u9304",
  I18N_ITEM_DELETE_DIR_BUTTON_TIP: "\u522A\u9664\u8B6F\u6587\u76EE\u9304",
  I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD: "\u522A\u9664\u8B6F\u6587",
  I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP: "\u7DE8\u8F2F\u8B6F\u6587",
  I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP: "\u63D0\u4EA4\u8B6F\u6587",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT: "\u63D0\u53D6",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TIP: "\u5F9E\u63D2\u4EF6\u4E2D\u63D0\u53D6\u672A\u7FFB\u8B6F\u7684\u8B6F\u6587",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD: "\u63D0\u53D6\u8B6F\u6587",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u63D0\u53D6\u8B6F\u6587",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT: "\u4E0B\u8F09",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TIP: "\u5F9E\u7DB2\u7D61\u4E0B\u8F09\u8B6F\u6587",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD: "\u4E0B\u8F09\u8B6F\u6587",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT: "\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TIP: "\u5F9E\u7DB2\u7D61\u4E0B\u8F09\u8B6F\u6587\u5C0D\u672C\u5730\u8B6F\u6587\u9032\u884C\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u66F4\u65B0\u8B6F\u6587",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_TIP: "\u751F\u6210\u5DF2\u7FFB\u8B6F\u8B6F\u6587",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u6A5F\u5668\u7FFB\u8B6F",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_TRANSLATION_BUTTON_TEXT: "\u7FFB\u8B6F",
  I18N_ITEM_TRANSLATION_BUTTON_TIP: "\u63D2\u4EF6\u7FFB\u8B6F",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD: "\u63D2\u4EF6\u7FFB\u8B6F",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u5982\u9047\u7FFB\u8B6F\u5F8C\u63D2\u4EF6\u5931\u6548\n\u8AAA\u660E\u8B6F\u6587\u53EF\u80FD\u51FA\u73FE\u554F\u984C\n\u9EDE\u64CA\u9084\u539F\u5373\u53EF\u6062\u5FA9\u539F\u72C0",
  I18N_ITEM_RESTORE_BUTTON_TEXT: "\u9084\u539F",
  I18N_ITEM_RESTORE_BUTTON_TIP: "\u63D2\u4EF6\u9084\u539F",
  I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD: "\u63D2\u4EF6\u9084\u539F",
  I18N_STATE_HEAD: "\u72C0\u614B\u6587\u4EF6",
  I18N_UPDATE_HEAD: "\u63D2\u4EF6\u66F4\u65B0",
  // ====================
  //      Wizard區域
  // ====================
  WIZARD_VIDEO_TUTORIAL_TITLE_NAME: "\u5B98\u65B9\u8996\u983B\u6559\u7A0B",
  WIZARD_VIDEO_TUTORIAL_TITLE_DESC: "\u8A73\u76E1\u6F14\u793AObsidian i18n\u64CD\u4F5C\uFF0C\u52A9\u529B\u5FEB\u901F\u638C\u63E1",
  WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT: "\u700F\u89BD",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME: "\u5B98\u65B9\u6587\u6A94\u6559\u7A0B",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC: "Obsidian i18n\u7684\u5168\u9762\u63A2\u7D22\u4E4B\u65C5\u6307\u5357",
  WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT: "\u700F\u89BD",
  WIZARD_QQ_TITLE_NAME: "\u5B98\u65B9Q\u7FA4",
  WIZARD_QQ_TITLE_DESC: "\u5728\u5B98\u65B9\u7FA4\uFF0C\u60A8\u53EF\u767C\u5E03\u9700\u6C42\u3001\u63D0\u4EA4BUG\u3001\u5206\u4EAB\u8B6F\u6587\uFF0C\u4E26\u8207\u5176\u4ED6\u7528\u6236\u5C31\u63D2\u4EF6\u4F7F\u7528\u3001\u7FFB\u8B6F\u7B49\u8A71\u984C\u4EA4\u6D41\u4E92\u52A9\u3002",
  WIZARD_QQ_TEXT: "\u52A0\u5165",
  // ====================
  //       提交區域
  // ====================
  SUBMITE_PUBLIC_AUTHOR: "\u4F5C\u8005",
  SUBMITE_PUBLIC_TRANSLATION_VERSION: "\u8B6F\u6587\u7248\u672C",
  SUBMITE_PUBLIC_PLUGIN_VERSION: "\u63D2\u4EF6\u7248\u672C",
  SUBMITE_TITLE_NAME: "\u611F\u8B1D\u5171\u4EAB\u8B6F\u6587",
  SUBMITE_TITLE_DESC: "\u63D0\u4EA4\u524D\uFF0C\u8ACB\u60A8\u7D30\u5FC3\u5BE9\u95B1\uFF0C\u6211\u5011\u8877\u5FC3\u611F\u8B1D\u60A8\u7684\u914D\u5408\u8207\u52AA\u529B\u3002",
  SUBMITE_LOCAL_TRANSLATION_NAME: "[\u672C\u5730\u8B6F\u6587]",
  SUBMITE_CLOUD_TRANSLATION_NAME: "[\u96F2\u7AEF\u8B6F\u6587]",
  SUBMITE_OPERATE_CANCEL_BUTTON_TEXT: "\u53D6\u6D88\u63D0\u4EA4",
  SUBMITE_OPERATE_CANCEL_BUTTON_NOTICE_HEAD: "\u53D6\u6D88\u63D0\u4EA4",
  SUBMITE_OPERATE_REQUEST_BUTTON_TEXT: "\u8ACB\u6C42\u7FFB\u8B6F",
  SUBMITE_OPERATE_REQUEST_BUTTON_NOTICE_HEAD: "\u8ACB\u6C42\u7FFB\u8B6F",
  SUBMITE_OPERATE_MARK_BUTTON_TEXT: "\u6A19\u8A18\u6F22\u5316",
  SUBMITE_OPERATE_MARK_BUTTON_NOTICE_HEAD: "\u6A19\u8A18\u6F22\u5316",
  SUBMITE_OPERATE_SUBMITE_BUTTON_TEXT: "\u63D0\u4EA4\u8B6F\u6587",
  SUBMITE_OPERATE_SUBMITE_BUTTON_NOTICE_HEAD: "\u63D0\u4EA4\u8B6F\u6587",
  SUBMITE_OPERATE_UPDATE_BUTTON_TEXT: "\u63D0\u4EA4\u4FEE\u6539",
  SUBMITE_OPERATE_UPDATE_BUTTON_NOTICE_HEAD: "\u63D0\u4EA4\u4FEE\u6539",
  SUBMITE_INSPECT_HEAD: "\u8B6F\u6587\u6AA2\u67E5",
  SUBMITE_INSPECT_NOTICE_A: "\u8B6F\u6587\u5B57\u6BB5\u7F3A\u5931",
  SUBMITE_INSPECT_NOTICE_B: "\u4F5C\u8005\u4E0D\u80FD\u70BA\u7A7A",
  SUBMITE_INSPECT_NOTICE_C: "\u7FFB\u8B6F\u5167\u5BB9\u9054\u6A19",
  SUBMITE_INSPECT_NOTICE_D: "\u7FFB\u8B6F\u5167\u5BB9\u4E0D\u8D85\u904E\u767E\u5206\u4E4B\u4E94\u5341",
  SUBMITE_INSPECT_NOTICE_E: "\u7248\u672C\u865F\u683C\u5F0F\u61C9\u8A72\u70BA(X.X.X)",
  // ====================
  //       編輯區域
  // ====================
  EDITOR_PUBLIC_HEAD: "\u8B6F\u6587\u7DE8\u8F2F\u5668",
  EDITOR_TITLE_AUTHOR: "\u4F5C\u8005",
  EDITOR_TITLE_TRANSLATION_VERSION: "\u8B6F\u6587\u7248\u672C",
  EDITOR_TITLE_PLUGIN_VERSION: "\u63D2\u4EF6\u7248\u672C",
  EDITOR_TITLE_DESCRIPTION: "\u63CF\u8FF0",
  EDITOR_SAVE_TRANSLATION_BUTTON_TEXT: "\u4FDD\u5B58",
  EDITOR_CANCEL_ITEM_BUTTON_TEXT: "\u53D6\u6D88",
  EDITOR_CANCEL_ITEM_BUTTON_NOTICE_CONTENT_A: "\u53D6\u6D88\u9078\u64C7",
  EDITOR_DELETE_ITEM_BUTTON_TEXT: "\u522A\u9664",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A: "\u522A\u9664\u6210\u529F",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_B: "\u522A\u9664\u5931\u6557",
  EDITOR_INSERT_ITEM_BUTTON_TEXT: "\u65B0\u589E",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A: "\u65B0\u589E\u6210\u529F",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B: "\u65B0\u589E\u5931\u6557\n\u8B6F\u6587\u4E2D\u5DF2\u5B58\u5728\u6B64\u5167\u5BB9",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_C: "\u65B0\u589E\u5931\u6557\n\u65B0\u589E\u524D\u8ACB\u53D6\u6D88\u9078\u4E2D\u5C0D\u8C61",
  EDITOR_HELP_BUTTON_TEXT: "\u9000\u51FA\u524D\u8ACB\u4FDD\u5B58",
  EDITOR_HELP_BUTTON_NOTICE_CONTENT_A: "\n\u9000\u51FA\u524D\u8ACB\u52D9\u5FC5\u4FDD\u5B58\n\u9000\u51FA\u524D\u8ACB\u52D9\u5FC5\u4FDD\u5B58\n\u9000\u51FA\u524D\u8ACB\u52D9\u5FC5\u4FDD\u5B58",
  // ====================
  //       設置區域
  // ====================
  SETTING_PUBLIC_HIDE: "\u96B1\u85CF",
  SETTING_PUBLIC_SHOW: "\u986F\u793A",
  SETTING_PUBLIC_RE: "\u6B63\u5247",
  SETTING_BASE_TITLE_NAME: "\u57FA\u790E\u8A2D\u7F6E",
  SETTING_HELP_NAME: "\u5E6B\u52A9",
  SETTING_LANGUAGE_NAME: "\u8A9E\u8A00",
  SETTING_LANGUAGE_DESC: "\u9078\u64C7\u9700\u8981\u7FFB\u8B6F\u7684\u8A9E\u8A00",
  SETTING_LDT_NAME: "\u672C\u5730\u6587\u4EF6\u6A21\u5F0F",
  SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD: "\u8A5E\u5178\u91CD\u8F09",
  SETTING_LDT_AUTOMATIC_UPDATE_NAME: "\u8A5E\u5178\u91CD\u8F09",
  SETTING_LDT_AUTOMATIC_UPDATE_DESC: "\u6AA2\u6E2C\u5230\u63D2\u4EF6\u7248\u672C\u8B8A\u52D5\u5F8C\uFF0C\u81EA\u52D5\u61C9\u7528\u672C\u5730\u5DF2\u6709\u8B6F\u6587(\u56E0\u70BA\u63D2\u4EF6\u66F4\u65B0\uFF0C\u672C\u5730\u8B6F\u6587\u53EF\u80FD\u4E0D\u9069\u914D\uFF0C\u8ACB\u8A3B\u610F\u662F\u5426\u5831\u932F)",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A: "\u958B\u59CB\u6AA2\u67E5\u66F4\u65B0",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B: "\u6C92\u6709\u9700\u8981\u66F4\u65B0\u7684\u63D2\u4EF6",
  SETTING_NDT_NAME: "\u96F2\u7AEF\u6587\u4EF6\u6A21\u5F0F",
  SETTING_NDT_PUBLIC_MODE_HEAD: "\u96F2\u7AEF\u6A21\u5F0F",
  SETTING_NDT_MODE_NOTICE_A: "\u7576\u524D\u8A9E\u8A00 API \u4E0D\u5B58\u5728",
  SETTING_NDT_MODE_NOTICE_B: "\u7DB2\u7D61\u7570\u5E38",
  SETTING_NDT_PUBLIC_IGNORE_HEAD: "\u6A19\u8A18\u6F22\u5316",
  SETTING_NDT_APIS_NAME: "\u63A5\u53E3",
  SETTING_NDT_APIS_DESC: "\u8ACB\u8F38\u5165\u60A8\u8981\u7FFB\u8B6F\u8A9E\u8A00\u5C0D\u61C9\u7684API(\u91CD\u65B0\u6DFB\u52A0\u5C07\u6703\u8986\u84CB)",
  SETTING_NDT_APIS_INSERT_BUTTON: "\u6DFB\u52A0",
  SETTING_NDT_IGNORE_NAME: "\u6A19\u8A18\u6F22\u5316",
  SETTING_NDT_IGNORE_DESC: "\u6A19\u8A18\u81EA\u5E36\u4E2D\u6587\u7684\u63D2\u4EF6(\u7531\u793E\u5340\u53CD\u994B \u9700\u806F\u7DB2\u67E5\u8A62)",
  SETTING_NDT_IGNORE_NOTICE_A: "\u7576\u524D\u8A9E\u8A00 API \u4E0D\u5B58\u5728",
  SETTING_NDT_IGNORE_NOTICE_B: "\u7DB2\u7D61\u7570\u5E38",
  SETTING_NIT_NAME: "\u6A5F\u5668\u7FFB\u8B6F\u6A21\u5F0F",
  SETTING_NIT_APIS_NAME: "\u63A5\u53E3",
  SETTING_NIT_APIS_DESC: "\u9078\u64C7\u60A8\u8981\u4F7F\u7528\u7684\u63A5\u53E3",
  SETTING_NIT_TEST_BUTTON_TEXT: "\u6E2C\u8A66",
  SETTING_NIT_INTERVAL_NAME: "\u9593\u9694",
  SETTING_NIT_INTERVAL_DESC: "\u7528\u65BC\u9650\u5236\u6BCF\u6B21\u8ACB\u6C42\u9593\u9694(\u55AE\u4F4D: \u6BEB\u79D2)",
  SETTING_NIT_BAIDU_NAME: "\u767E\u5EA6",
  SETTING_NIT_BAIDU_DESC: "\u57FA\u65BC\u767E\u5EA6API\u9032\u884C\u7FFB\u8B6F",
  SETTING_NIT_OPENAI_NAME: "OPENAI",
  SETTING_NIT_OPENAI_DESC: "\u57FA\u65BCOPENAI\u7684API\u9032\u884C\u7FFB\u8B6F",
  SETTING_NIT_OPENAI_TIP_NAME: "\u63D0\u793A",
  SETTING_NIT_OPENAI_TIP_DESC: "\u5373prompt\uFF0C\u7528\u65BC\u6307\u5C0EAI\u5982\u4F55\u7FFB\u8B6F\uFF0C\u672C\u63D2\u4EF6\u63D0\u4F9B\u9ED8\u8A8D\u63D0\u793A\u8A5E\uFF0C\u5982\u6709\u9700\u8981\u53EF\u81EA\u884C\u8ABF\u6574\u3002",
  SETTING_NIT_OPENAI_TIP_PLACEHOLDER: "\u63D0\u793A\u8A5E",
  SETTING_MORE_TITLE_NAME: "\u66F4\u591A\u529F\u80FD",
  SETTING_Author_NAME: "\u8B6F\u6587\u7C3D\u540D",
  SETTING_Author_DESC: "\u751F\u6210\u8B6F\u6587\u6642\u81EA\u52D5\u6DFB\u52A0\u4F5C\u8005\u7C3D\u540D",
  SETTING_Author_PLACEHOLDER: "\u7C3D\u540D",
  SETTING_OPEN_SETTING_NAME: "\u6253\u958B\u8A2D\u7F6E",
  SETTING_OPEN_SETTING_DESC: "\u555F\u7528\u5F8C\u63D2\u4EF6\u9801\u9762\u4E2D\u6703\u986F\u793A\u8A2D\u7F6E\u8DF3\u8F49\u6309\u9215",
  SETTING_EDITOR_NAME: "\u8B6F\u6587\u7DE8\u8F2F",
  SETTING_EDITOR_DESC: "\u555F\u7528/\u7981\u7528\u5167\u7F6E\u8B6F\u6587\u7DE8\u8F2F\u5668\u529F\u80FD",
  SETTING_CLOUD_COLLABORATION_NAME: "\u5171\u5EFA\u96F2\u7AEF",
  SETTING_CLOUD_COLLABORATION_DESC: "\u555F\u52D5\u6B64\u529F\u80FD\u5F8C\uFF0C\u60A8\u53EF\u4EE5\u63D0\u4EA4\u81EA\u5DF1\u7684\u8B6F\u6587\u3001\u8ACB\u6C42\u5C0D\u67D0\u500B\u63D2\u4EF6\u9032\u884C\u7FFB\u8B6F\u3001\u6A19\u8A18\u63D2\u4EF6\u662F\u5426\u81EA\u5E36\u6F22\u5316\u3002\u6B61\u8FCE\u70BA\u793E\u5340\u8CA2\u737B\u529B\u91CF\uFF01",
  SETTING_CLOUD_COLLABORATION_TOKEN_NAME: "Gitee Token",
  SETTING_CLOUD_COLLABORATION_TOKEN_DESC: "\u8ACB\u63D0\u4F9B\u60A8\u7684Token\u4EE5\u652F\u6301\u6279\u91CF\u63D0\u4EA4(\u81E8\u6642\u4F7F\u7528\u7121\u9700\u586B\u5BEB)",
  SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER: "Toekn",
  SETTING_RE_TITLE_NAME: "\u5339\u914D\u6A21\u5F0F\u914D\u7F6E",
  SETTING_RE_MODE_NAME: "\u6A21\u5F0F",
  SETTING_RE_MODE_DESC: "\u7576\u524D\u6B63\u5728\u4F7F\u7528\u7684\u5339\u914D\u6A21\u5F0F",
  SETTING_RE_FLAGS_NAME: "\u6A19\u8A8C",
  SETTING_RE_FLAGS_DESC: "\u6B63\u5247\u8868\u9054\u5F0F\u7684flags",
  SETTING_RE_FLAGS_PLACEHOLDER: "flags",
  SETTING_RE_LENGTH_NAME: "\u9577\u5EA6",
  SETTING_RE_LENGTH_DESC: "\u9650\u5236re\u53EF\u4EE5\u5339\u914D\u5230\u7684\u6700\u5927\u9577\u5EA6",
  SETTING_RE_EDIT_MODE_NAME: "\u6A21\u5F0F\u7DE8\u8F2F",
  SETTING_RE_EDIT_MODE_DESC: "\u65B0\u589E\u548C\u522A\u9664\u6B63\u5247\u8868\u9054\u5F0F\u5339\u914D\u6A21\u5F0F",
  SETTING_RE_EDIT_MODE_PLACEHOLDER: "\u6A21\u5F0F",
  SETTING_RE_EDIT_INSERT_BUTTON_TEXT: "\u6DFB\u52A0",
  SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A: "RE\u6A21\u5F0F\u540D\u7A31\u91CD\u5FA9 \u7121\u6CD5\u6DFB\u52A0",
  SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A: "\u522A\u9664\u5931\u6557",
  SETTING_RE_EDIT_ITEM_NAME: "\u6578\u64DA\u7DE8\u8F2F",
  SETTING_RE_EDIT_ITEM_DESC: "\u65B0\u589E\u548C\u522A\u9664\u6B63\u5247\u8868\u9054\u5F0F\u6A21\u5F0F\u6578\u64DA",
  SETTING_RE_EDIT_ITEM_PLACEHOLDER: "RegExp",
  SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT: "\u6DFB\u52A0"
};

// src/lang/locale/en_us.ts
var en_us_default = {
  // ====================
  //      公共区域
  // ====================
  PUBLIC_SUCCESS: "Success",
  PUBLIC_FAILURE: "Failure",
  // ====================
  //      Main Area
  // ====================
  I18N_NAME: "Internationalization",
  I18N_HELP_TITLE_NAME: "Need help? Join our QQ group for support!",
  I18N_HELP_TITLE_QQ_BUTTON_TIP: "One-click access to join the QQ group and share the fun!",
  I18N_HELP_TITLE_SETTING_BUTTON_TIP: "Open I18N settings interface",
  I18N_HELP_TITLE_HELP_BUTTON_TIP: "Open I18N help interface",
  I18N_SEARCH_TITLE_NAME: "Search",
  I18N_ITEM_LABEL_A_NAME: "No Translation",
  I18N_ITEM_LABEL_A_DESC: "You have not extracted translations yet",
  I18N_ITEM_LABEL_B_NAME: "Translated",
  I18N_ITEM_LABEL_C_NAME: "Not Translated",
  I18N_ITEM_LABEL_D_NAME: "Outdated",
  I18N_ITEM_LABEL_BCD_DESC_AUTHOR: "Author",
  I18N_ITEM_LABEL_BCD_DESC_VERSION: "Supported Version",
  I18N_ITEM_LABEL_E_NAME: "Translation Error",
  I18N_ITEM_LABEL_E_DESC: "The format may have errors, please check carefully and try again",
  I18N_ITEM_LABEL_F_NAME: "Chinese Available",
  I18N_ITEM_LABEL_F_DESC: "Based on feedback, this plugin may come with Chinese",
  I18N_ITEM_LABEL_G_DESC: "None",
  I18N_ITEM_OPEN_SETTING_BUTTON_TIP: "Open plugin settings",
  I18N_ITEM_OPEN_DIR_BUTTON_TIP: "Open plugin directory",
  I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD: "Open Directory",
  I18N_ITEM_DELETE_DIR_BUTTON_TIP: "Delete translation directory",
  I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD: "Delete Translation",
  I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP: "Edit translation",
  I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP: "Submit translation",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT: "Extract",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TIP: "Extract untranslated strings from the plugin",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD: "Extract Translation",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "Extracting translations",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT: "Download",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TIP: "Download translations from the network",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD: "Download Translation",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT: "Update",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TIP: "Update local translations with downloaded ones from the network",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD: "Update Translation",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_TIP: "Generate translated strings",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD: "Machine Translation",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_TRANSLATION_BUTTON_TEXT: "Translate",
  I18N_ITEM_TRANSLATION_BUTTON_TIP: "Plugin translation",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD: "Plugin Translation",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "If the plugin fails after translation\nIt indicates a possible issue with the translation\nClick restore to revert",
  I18N_ITEM_RESTORE_BUTTON_TEXT: "Restore",
  I18N_ITEM_RESTORE_BUTTON_TIP: "Plugin restore",
  I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD: "Plugin Restore",
  I18N_STATE_HEAD: "Status File",
  I18N_UPDATE_HEAD: "Plugin Update",
  // ====================
  //      Wizard Area
  // ====================
  WIZARD_VIDEO_TUTORIAL_TITLE_NAME: "Official Video Tutorial",
  WIZARD_VIDEO_TUTORIAL_TITLE_DESC: "A detailed demonstration of Obsidian i18n operations to help you master it quickly",
  WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT: "Browse",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME: "Official Documentation Tutorial",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC: "A comprehensive guide to exploring Obsidian i18n",
  WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT: "Browse",
  WIZARD_QQ_TITLE_NAME: "Official QQ Group",
  WIZARD_QQ_TITLE_DESC: "In the official group, you can post your needs, submit BUGs, share translations, and discuss plugin usage, translation, and other topics with other users.",
  WIZARD_QQ_TEXT: "Join",
  // ====================
  //       提交区域
  // ====================
  SUBMITE_PUBLIC_AUTHOR: "Author",
  SUBMITE_PUBLIC_TRANSLATION_VERSION: "Translation Version",
  SUBMITE_PUBLIC_PLUGIN_VERSION: "Plugin Version",
  SUBMITE_TITLE_NAME: "Thank you for sharing translations",
  SUBMITE_TITLE_DESC: "Before submitting, please review carefully, and we sincerely appreciate your cooperation and efforts.",
  SUBMITE_LOCAL_TRANSLATION_NAME: "[Local Translation]",
  SUBMITE_CLOUD_TRANSLATION_NAME: "[Cloud Translation]",
  SUBMITE_OPERATE_CANCEL_BUTTON_TEXT: "Cancel Submission",
  SUBMITE_OPERATE_CANCEL_BUTTON_NOTICE_HEAD: "Cancel Submission",
  SUBMITE_OPERATE_REQUEST_BUTTON_TEXT: "Request Translation",
  SUBMITE_OPERATE_REQUEST_BUTTON_NOTICE_HEAD: "Request Translation",
  SUBMITE_OPERATE_MARK_BUTTON_TEXT: "Mark as Chinese",
  SUBMITE_OPERATE_MARK_BUTTON_NOTICE_HEAD: "Mark as Chinese",
  SUBMITE_OPERATE_SUBMITE_BUTTON_TEXT: "Submit Translation",
  SUBMITE_OPERATE_SUBMITE_BUTTON_NOTICE_HEAD: "Submit Translation",
  SUBMITE_OPERATE_UPDATE_BUTTON_TEXT: "Submit Update",
  SUBMITE_OPERATE_UPDATE_BUTTON_NOTICE_HEAD: "Submit Update",
  SUBMITE_INSPECT_HEAD: "Translation Inspection",
  SUBMITE_INSPECT_NOTICE_A: "Translation field missing",
  SUBMITE_INSPECT_NOTICE_B: "Author cannot be empty",
  SUBMITE_INSPECT_NOTICE_C: "Translation content meets the standard",
  SUBMITE_INSPECT_NOTICE_D: "Translation content does not exceed 50%",
  SUBMITE_INSPECT_NOTICE_E: "The version number format should be (X.X.X)",
  // ====================
  //       Edit Area
  // ====================
  EDITOR_PUBLIC_HEAD: "Translation Editor",
  EDITOR_TITLE_AUTHOR: "Author",
  EDITOR_TITLE_TRANSLATION_VERSION: "Translation Version",
  EDITOR_TITLE_PLUGIN_VERSION: "Plugin Version",
  EDITOR_TITLE_DESCRIPTION: "Description",
  EDITOR_SAVE_TRANSLATION_BUTTON_TEXT: "Save",
  EDITOR_CANCEL_ITEM_BUTTON_TEXT: "Cancel",
  EDITOR_CANCEL_ITEM_BUTTON_NOTICE_CONTENT_A: "Cancel selection",
  EDITOR_DELETE_ITEM_BUTTON_TEXT: "Delete",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A: "Delete successful",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_B: "Delete failed",
  EDITOR_INSERT_ITEM_BUTTON_TEXT: "Add",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A: "Add successful",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B: "Add failed\nThis content already exists in the translation",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_C: "Add failed\nPlease unselect the object before adding",
  EDITOR_HELP_BUTTON_TEXT: "Please save before exiting",
  EDITOR_HELP_BUTTON_NOTICE_CONTENT_A: "\nPlease save before exiting\nPlease save before exiting\nPlease save before exiting",
  // ====================
  //       Settings Area
  // ====================
  SETTING_PUBLIC_HIDE: "Hide",
  SETTING_PUBLIC_SHOW: "Show",
  SETTING_PUBLIC_RE: "Regex",
  SETTING_BASE_TITLE_NAME: "Basic Settings",
  SETTING_HELP_NAME: "Help",
  SETTING_LANGUAGE_NAME: "Language",
  SETTING_LANGUAGE_DESC: "Select the language you need to translate",
  SETTING_LDT_NAME: "Local File Mode",
  SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD: "Dictionary Reload",
  SETTING_LDT_AUTOMATIC_UPDATE_NAME: "Dictionary Reload",
  SETTING_LDT_AUTOMATIC_UPDATE_DESC: "Automatically apply local translations when the plugin version changes (due to plugin updates, local translations may not be compatible, please check for errors)",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A: "Start checking for updates",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B: "No plugins need updating",
  SETTING_NDT_NAME: "Cloud File Mode",
  SETTING_NDT_PUBLIC_MODE_HEAD: "Cloud Mode",
  SETTING_NDT_MODE_NOTICE_A: "The current language API does not exist",
  SETTING_NDT_MODE_NOTICE_B: "Network exception",
  SETTING_NDT_PUBLIC_IGNORE_HEAD: "Mark as Chinese",
  SETTING_NDT_APIS_NAME: "APIs",
  SETTING_NDT_APIS_DESC: "Please enter the API corresponding to the language you want to translate (re-adding will overwrite)",
  SETTING_NDT_APIS_INSERT_BUTTON: "Add",
  SETTING_NDT_IGNORE_NAME: "Mark as Chinese",
  SETTING_NDT_IGNORE_DESC: "Mark plugins that come with Chinese (community feedback required, online query needed)",
  SETTING_NDT_IGNORE_NOTICE_A: "The current language API does not exist",
  SETTING_NDT_IGNORE_NOTICE_B: "Network exception",
  SETTING_NIT_NAME: "Machine Translation Mode",
  SETTING_NIT_APIS_NAME: "APIs",
  SETTING_NIT_APIS_DESC: "Select the interface you want to use",
  SETTING_NIT_TEST_BUTTON_TEXT: "Test",
  SETTING_NIT_INTERVAL_NAME: "Interval",
  SETTING_NIT_INTERVAL_DESC: "Used to limit the interval between requests (unit: milliseconds)",
  SETTING_NIT_BAIDU_NAME: "Baidu",
  SETTING_NIT_BAIDU_DESC: "Translate based on Baidu API",
  SETTING_NIT_OPENAI_NAME: "OPENAI",
  SETTING_NIT_OPENAI_DESC: "Translate based on OPENAI API",
  SETTING_NIT_OPENAI_TIP_NAME: "Prompt",
  SETTING_NIT_OPENAI_TIP_DESC: "The prompt guides the AI on how to translate. This plugin provides default prompts, but you can adjust them if needed.",
  SETTING_NIT_OPENAI_TIP_PLACEHOLDER: "Prompt",
  SETTING_MORE_TITLE_NAME: "More Features",
  SETTING_Author_NAME: "Translation Signature",
  SETTING_Author_DESC: "Automatically add author signature when generating translations",
  SETTING_Author_PLACEHOLDER: "Signature",
  SETTING_OPEN_SETTING_NAME: "Open Settings",
  SETTING_OPEN_SETTING_DESC: "Display a settings jump button in the plugin page when enabled",
  SETTING_EDITOR_NAME: "Translation Editor",
  SETTING_EDITOR_DESC: "Enable/Disable the built-in translation editor feature",
  SETTING_CLOUD_COLLABORATION_NAME: "Cloud Collaboration",
  SETTING_CLOUD_COLLABORATION_DESC: "Once enabled, you can submit your translations, request translations for plugins, and mark whether plugins come with Chinese. Welcome to contribute to the community!",
  SETTING_CLOUD_COLLABORATION_TOKEN_NAME: "Gitee Token",
  SETTING_CLOUD_COLLABORATION_TOKEN_DESC: "Please provide your Token to support batch submissions (not required for temporary use)",
  SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER: "Token",
  SETTING_RE_TITLE_NAME: "Matching Pattern Configuration",
  SETTING_RE_MODE_NAME: "Mode",
  SETTING_RE_MODE_DESC: "The current matching mode in use",
  SETTING_RE_FLAGS_NAME: "Flags",
  SETTING_RE_FLAGS_DESC: "Flags for regular expressions",
  SETTING_RE_FLAGS_PLACEHOLDER: "Flags",
  SETTING_RE_LENGTH_NAME: "Length",
  SETTING_RE_LENGTH_DESC: "Limit the maximum length that re can match",
  SETTING_RE_EDIT_MODE_NAME: "Mode Editing",
  SETTING_RE_EDIT_MODE_DESC: "Add and remove regular expression matching modes",
  SETTING_RE_EDIT_MODE_PLACEHOLDER: "Pattern",
  SETTING_RE_EDIT_INSERT_BUTTON_TEXT: "Add",
  SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A: "RE mode name already exists and cannot be added",
  SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A: "Failed to delete",
  SETTING_RE_EDIT_ITEM_NAME: "Data Editing",
  SETTING_RE_EDIT_ITEM_DESC: "Add and remove regular expression pattern data",
  SETTING_RE_EDIT_ITEM_PLACEHOLDER: "RegExp",
  SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT: "Add"
};

// src/lang/locale/ru_ru.ts
var ru_ru_default = {
  // ====================
  //      公共区域
  // ====================
  PUBLIC_SUCCESS: "\u0423\u0441\u043F\u0435\u0445",
  PUBLIC_FAILURE: "\u041D\u0435\u0443\u0434\u0430\u0447\u0430",
  // ====================
  //      Основной раздел
  // ====================
  I18N_NAME: "I18N",
  I18N_HELP_TITLE_NAME: "\u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043B\u043E\u0436\u043D\u0430? \u0421\u043A\u043E\u0440\u043E \u043F\u0440\u0438\u0441\u043E\u0435\u0434\u0438\u043D\u044F\u0439\u0442\u0435\u0441\u044C \u043A \u0433\u0440\u0443\u043F\u043F\u0435 QQ \u0434\u043B\u044F \u043A\u043E\u043D\u0441\u0443\u043B\u044C\u0442\u0430\u0446\u0438\u0438!",
  I18N_HELP_TITLE_QQ_BUTTON_TIP: "\u041E\u0434\u0438\u043D \u043A\u043B\u0438\u043A, \u043F\u0440\u0438\u0441\u043E\u0435\u0434\u0438\u043D\u044F\u0439\u0442\u0435\u0441\u044C \u043A \u0433\u0440\u0443\u043F\u043F\u0435 QQ \u0438 \u043F\u043E\u0434\u0435\u043B\u0438\u0442\u0435\u0441\u044C \u0440\u0430\u0434\u043E\u0441\u0442\u044C\u044E!",
  I18N_HELP_TITLE_SETTING_BUTTON_TIP: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 I18N",
  I18N_HELP_TITLE_HELP_BUTTON_TIP: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443 \u043F\u043E\u043C\u043E\u0449\u0438 I18N",
  I18N_SEARCH_TITLE_NAME: "\u041F\u043E\u0438\u0441\u043A",
  I18N_ITEM_LABEL_A_NAME: "\u0411\u0435\u0437 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  I18N_ITEM_LABEL_A_DESC: "\u0412\u044B \u0435\u0449\u0435 \u043D\u0435 \u0438\u0437\u0432\u043B\u0435\u043A\u043B\u0438 \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_LABEL_B_NAME: "\u041F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043E",
  I18N_ITEM_LABEL_C_NAME: "\u041D\u0435 \u043F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043E",
  I18N_ITEM_LABEL_D_NAME: "\u0423\u0441\u0442\u0430\u0440\u0435\u043B\u043E",
  I18N_ITEM_LABEL_BCD_DESC_AUTHOR: "\u0410\u0432\u0442\u043E\u0440",
  I18N_ITEM_LABEL_BCD_DESC_VERSION: "\u041F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043C\u0430\u044F \u0432\u0435\u0440\u0441\u0438\u044F",
  I18N_ITEM_LABEL_E_NAME: "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  I18N_ITEM_LABEL_E_DESC: "\u0412\u043E\u0437\u043C\u043E\u0436\u043D\u043E, \u0435\u0441\u0442\u044C \u043E\u0448\u0438\u0431\u043A\u0438 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430",
  I18N_ITEM_LABEL_F_NAME: "\u0421 \u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u043C \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u043E\u043C",
  I18N_ITEM_LABEL_F_DESC: "\u0421\u043E\u0433\u043B\u0430\u0441\u043D\u043E \u043E\u0442\u0437\u044B\u0432\u0430\u043C, \u044D\u0442\u043E\u0442 \u043F\u043B\u0430\u0433\u0438\u043D \u043C\u043E\u0436\u0435\u0442 \u0438\u043C\u0435\u0442\u044C \u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u0439 \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_LABEL_G_DESC: "\u041D\u0435\u0442",
  I18N_ITEM_OPEN_SETTING_BUTTON_TIP: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_ITEM_OPEN_DIR_BUTTON_TIP: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u0430\u0442\u0430\u043B\u043E\u0433 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u0430\u0442\u0430\u043B\u043E\u0433",
  I18N_ITEM_DELETE_DIR_BUTTON_TIP: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043A\u0430\u0442\u0430\u043B\u043E\u0433 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT: "\u0418\u0437\u0432\u043B\u0435\u0447\u044C",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TIP: "\u0418\u0437\u0432\u043B\u0435\u0447\u044C \u043D\u0435\u043F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043D\u044B\u0435 \u0441\u0442\u0440\u043E\u043A\u0438 \u0438\u0437 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD: "\u0418\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u0418\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TIP: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434 \u0441 \u0441\u0435\u0442\u0438",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT: "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TIP: "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u044B\u0439 \u043F\u0435\u0440\u0435\u0432\u043E\u0434 \u0441\u0435\u0442\u0435\u0432\u044B\u043C\u0438 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430\u043C\u0438",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_TIP: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043D\u044B\u0435 \u0441\u0442\u0440\u043E\u043A\u0438",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u041C\u0430\u0448\u0438\u043D\u043D\u044B\u0439 \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_TRANSLATION_BUTTON_TEXT: "\u041F\u0435\u0440\u0435\u0432\u043E\u0434",
  I18N_ITEM_TRANSLATION_BUTTON_TIP: "\u041F\u0435\u0440\u0435\u0432\u043E\u0434 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD: "\u041F\u0435\u0440\u0435\u0432\u043E\u0434 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u0415\u0441\u043B\u0438 \u043F\u043B\u0430\u0433\u0438\u043D \u043F\u0435\u0440\u0435\u0441\u0442\u0430\u0435\u0442 \u0440\u0430\u0431\u043E\u0442\u0430\u0442\u044C \u043F\u043E\u0441\u043B\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430,\n\u044D\u0442\u043E \u043E\u0437\u043D\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043E \u043F\u0435\u0440\u0435\u0432\u043E\u0434 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u043F\u0440\u043E\u0431\u043B\u0435\u043C\u043D\u044B\u043C\n\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u043D\u0430 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435, \u0447\u0442\u043E\u0431\u044B \u0432\u0435\u0440\u043D\u0443\u0442\u044C\u0441\u044F \u043A \u0438\u0441\u0445\u043E\u0434\u043D\u043E\u043C\u0443 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044E",
  I18N_ITEM_RESTORE_BUTTON_TEXT: "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C",
  I18N_ITEM_RESTORE_BUTTON_TIP: "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD: "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  I18N_STATE_HEAD: "\u0424\u0430\u0439\u043B \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F",
  I18N_UPDATE_HEAD: "\u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  // ====================
  //      Раздел мастера
  // ====================
  WIZARD_VIDEO_TUTORIAL_TITLE_NAME: "\u041E\u0444\u0438\u0446\u0438\u0430\u043B\u044C\u043D\u043E\u0435 \u0432\u0438\u0434\u0435\u043E-\u0443\u0447\u0435\u0431\u043D\u043E\u0435 \u043F\u043E\u0441\u043E\u0431\u0438\u0435",
  WIZARD_VIDEO_TUTORIAL_TITLE_DESC: "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0435 \u0434\u0435\u043C\u043E\u043D\u0441\u0442\u0440\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \u0440\u0430\u0431\u043E\u0442\u044B Obsidian i18n, \u0447\u0442\u043E\u0431\u044B \u0431\u044B\u0441\u0442\u0440\u043E \u043E\u0441\u0432\u043E\u0438\u0442\u044C",
  WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT: "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME: "\u041E\u0444\u0438\u0446\u0438\u0430\u043B\u044C\u043D\u043E\u0435 \u0440\u0443\u043A\u043E\u0432\u043E\u0434\u0441\u0442\u0432\u043E",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC: "\u041F\u043E\u043B\u043D\u043E\u0435 \u0438\u0441\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u043D\u0438\u0435 Obsidian i18n",
  WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT: "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C",
  WIZARD_QQ_TITLE_NAME: "\u041E\u0444\u0438\u0446\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0433\u0440\u0443\u043F\u043F\u0430 QQ",
  WIZARD_QQ_TITLE_DESC: "\u0412 \u043E\u0444\u0438\u0446\u0438\u0430\u043B\u044C\u043D\u043E\u0439 \u0433\u0440\u0443\u043F\u043F\u0435 \u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0440\u0430\u0437\u043C\u0435\u0449\u0430\u0442\u044C \u0441\u0432\u043E\u0438 \u0437\u0430\u043F\u0440\u043E\u0441\u044B, \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0442\u044C \u043E\u0448\u0438\u0431\u043A\u0438, \u0434\u0435\u043B\u0438\u0442\u044C\u0441\u044F \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430\u043C\u0438 \u0438 \u043E\u0431\u0449\u0430\u0442\u044C\u0441\u044F \u0441 \u0434\u0440\u0443\u0433\u0438\u043C\u0438 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F\u043C\u0438 \u043D\u0430 \u0442\u0435\u043C\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043B\u0430\u0433\u0438\u043D\u0430 \u0438 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430.",
  WIZARD_QQ_TEXT: "\u041F\u0440\u0438\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C\u0441\u044F",
  // ====================
  //     提交区域
  // ====================
  SUBMITE_PUBLIC_AUTHOR: "\u0410\u0432\u0442\u043E\u0440",
  SUBMITE_PUBLIC_TRANSLATION_VERSION: "\u0412\u0435\u0440\u0441\u0438\u044F \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  SUBMITE_PUBLIC_PLUGIN_VERSION: "\u0412\u0435\u0440\u0441\u0438\u044F \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  SUBMITE_TITLE_NAME: "\u0421\u043F\u0430\u0441\u0438\u0431\u043E \u0437\u0430 \u043E\u0431\u043C\u0435\u043D \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430\u043C\u0438",
  SUBMITE_TITLE_DESC: "\u041F\u0435\u0440\u0435\u0434 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u043E\u0439, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0432\u043D\u0438\u043C\u0430\u0442\u0435\u043B\u044C\u043D\u043E \u043F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435. \u041C\u044B \u0432\u044B\u0441\u043E\u043A\u043E \u0446\u0435\u043D\u0438\u043C \u0432\u0430\u0448\u0443 \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0438 \u0443\u0441\u0438\u043B\u0438\u044F.",
  SUBMITE_LOCAL_TRANSLATION_NAME: "[\u041B\u043E\u043A\u0430\u043B\u044C\u043D\u044B\u0439 \u043F\u0435\u0440\u0435\u0432\u043E\u0434]",
  SUBMITE_CLOUD_TRANSLATION_NAME: "[\u041E\u0431\u043B\u0430\u0447\u043D\u044B\u0439 \u043F\u0435\u0440\u0435\u0432\u043E\u0434]",
  SUBMITE_OPERATE_CANCEL_BUTTON_TEXT: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0443",
  SUBMITE_OPERATE_CANCEL_BUTTON_NOTICE_HEAD: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0443",
  SUBMITE_OPERATE_REQUEST_BUTTON_TEXT: "\u0417\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  SUBMITE_OPERATE_REQUEST_BUTTON_NOTICE_HEAD: "\u0417\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  SUBMITE_OPERATE_MARK_BUTTON_TEXT: "\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u043F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043D\u043E\u0435",
  SUBMITE_OPERATE_MARK_BUTTON_NOTICE_HEAD: "\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u043F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043D\u043E\u0435",
  SUBMITE_OPERATE_SUBMITE_BUTTON_TEXT: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  SUBMITE_OPERATE_SUBMITE_BUTTON_NOTICE_HEAD: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  SUBMITE_OPERATE_UPDATE_BUTTON_TEXT: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F",
  SUBMITE_OPERATE_UPDATE_BUTTON_NOTICE_HEAD: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F",
  SUBMITE_INSPECT_HEAD: "\u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  SUBMITE_INSPECT_NOTICE_A: "\u041F\u043E\u043B\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442",
  SUBMITE_INSPECT_NOTICE_B: "\u0410\u0432\u0442\u043E\u0440 \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u043F\u0443\u0441\u0442\u044B\u043C",
  SUBMITE_INSPECT_NOTICE_C: "\u0421\u043E\u0434\u0435\u0440\u0436\u0430\u043D\u0438\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0443",
  SUBMITE_INSPECT_NOTICE_D: "\u0421\u043E\u0434\u0435\u0440\u0436\u0430\u043D\u0438\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430 \u043D\u0435 \u043F\u0440\u0435\u0432\u044B\u0448\u0430\u0435\u0442 50%",
  SUBMITE_INSPECT_NOTICE_E: "\u0424\u043E\u0440\u043C\u0430\u0442 \u0432\u0435\u0440\u0441\u0438\u0438 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C (X.X.X)",
  // ====================
  //      Раздел редактора
  // ====================
  EDITOR_PUBLIC_HEAD: "\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  EDITOR_TITLE_AUTHOR: "\u0410\u0432\u0442\u043E\u0440",
  EDITOR_TITLE_TRANSLATION_VERSION: "\u0412\u0435\u0440\u0441\u0438\u044F \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  EDITOR_TITLE_PLUGIN_VERSION: "\u0412\u0435\u0440\u0441\u0438\u044F \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  EDITOR_TITLE_DESCRIPTION: "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435",
  EDITOR_SAVE_TRANSLATION_BUTTON_TEXT: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C",
  EDITOR_CANCEL_ITEM_BUTTON_TEXT: "\u041E\u0442\u043C\u0435\u043D\u0430",
  EDITOR_CANCEL_ITEM_BUTTON_NOTICE_CONTENT_A: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0432\u044B\u0431\u043E\u0440",
  EDITOR_DELETE_ITEM_BUTTON_TEXT: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A: "\u0423\u0441\u043F\u0435\u0448\u043D\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u043E",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_B: "\u041E\u0448\u0438\u0431\u043A\u0430 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F",
  EDITOR_INSERT_ITEM_BUTTON_TEXT: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A: "\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u043E \u0443\u0441\u043F\u0435\u0448\u043D\u043E",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B: "\u041E\u0448\u0438\u0431\u043A\u0430 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F\n\u0412 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0435 \u0443\u0436\u0435 \u0435\u0441\u0442\u044C \u044D\u0442\u043E \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u043D\u0438\u0435",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_C: "\u041E\u0448\u0438\u0431\u043A\u0430 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F\n\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u0435 \u0432\u044B\u0431\u043E\u0440 \u043F\u0435\u0440\u0435\u0434 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043C",
  EDITOR_HELP_BUTTON_TEXT: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u0435 \u043F\u0435\u0440\u0435\u0434 \u0432\u044B\u0445\u043E\u0434\u043E\u043C",
  EDITOR_HELP_BUTTON_NOTICE_CONTENT_A: "\n\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u0435 \u043F\u0435\u0440\u0435\u0434 \u0432\u044B\u0445\u043E\u0434\u043E\u043C\n\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u0435 \u043F\u0435\u0440\u0435\u0434 \u0432\u044B\u0445\u043E\u0434\u043E\u043C\n\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u0435 \u043F\u0435\u0440\u0435\u0434 \u0432\u044B\u0445\u043E\u0434\u043E\u043C",
  // ====================
  //      Раздел настроек
  // ====================
  SETTING_PUBLIC_HIDE: "\u0421\u043A\u0440\u044B\u0442\u044C",
  SETTING_PUBLIC_SHOW: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C",
  SETTING_PUBLIC_RE: "\u0420\u0435\u0433\u0443\u043B\u044F\u0440\u043D\u043E\u0435 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0435",
  SETTING_BASE_TITLE_NAME: "\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
  SETTING_HELP_NAME: "\u041F\u043E\u043C\u043E\u0449\u044C",
  SETTING_LANGUAGE_NAME: "\u042F\u0437\u044B\u043A",
  SETTING_LANGUAGE_DESC: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u044F\u0437\u044B\u043A, \u043D\u0430 \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F \u043F\u0435\u0440\u0435\u0432\u043E\u0434",
  SETTING_LDT_NAME: "\u0420\u0435\u0436\u0438\u043C \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u044B\u0445 \u0444\u0430\u0439\u043B\u043E\u0432",
  SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD: "\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u0441\u043B\u043E\u0432\u0430\u0440\u044F",
  SETTING_LDT_AUTOMATIC_UPDATE_NAME: "\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u0441\u043B\u043E\u0432\u0430\u0440\u044F",
  SETTING_LDT_AUTOMATIC_UPDATE_DESC: "\u041F\u0440\u0438 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0438\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u043F\u043B\u0430\u0433\u0438\u043D\u0430 \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043F\u0440\u0438\u043C\u0435\u043D\u044F\u0442\u044C \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u044B\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u044B (\u0438\u0437-\u0437\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u043F\u043B\u0430\u0433\u0438\u043D\u0430 \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u044B\u0435 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u044B \u043C\u043E\u0433\u0443\u0442 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C, \u043E\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043D\u0438\u043C\u0430\u043D\u0438\u0435 \u043D\u0430 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u044B\u0435 \u043E\u0448\u0438\u0431\u043A\u0438)",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A: "\u041D\u0430\u0447\u0430\u043B\u043E \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B: "\u041D\u0435\u0442 \u043F\u043B\u0430\u0433\u0438\u043D\u043E\u0432 \u0434\u043B\u044F \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F",
  SETTING_NDT_NAME: "\u0420\u0435\u0436\u0438\u043C \u043E\u0431\u043B\u0430\u0447\u043D\u043E\u0433\u043E \u0444\u0430\u0439\u043B\u0430",
  SETTING_NDT_PUBLIC_MODE_HEAD: "\u041E\u0431\u043B\u0430\u0447\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C",
  SETTING_NDT_MODE_NOTICE_A: "API \u0434\u043B\u044F \u0442\u0435\u043A\u0443\u0449\u0435\u0433\u043E \u044F\u0437\u044B\u043A\u0430 \u043D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442",
  SETTING_NDT_MODE_NOTICE_B: "\u0421\u0435\u0442\u0435\u0432\u0430\u044F\u7570\u5E38",
  SETTING_NDT_PUBLIC_IGNORE_HEAD: "\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u043B\u043E\u043A\u0430\u043B\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0439",
  SETTING_NDT_APIS_NAME: "\u0418\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441",
  SETTING_NDT_APIS_DESC: "\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 API \u0434\u043B\u044F \u044F\u0437\u044B\u043A\u0430, \u043D\u0430 \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u043F\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 (\u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0437\u0430\u043C\u0435\u043D\u0438\u0442 \u0442\u0435\u043A\u0443\u0449\u0438\u0439)",
  SETTING_NDT_APIS_INSERT_BUTTON: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C",
  SETTING_NDT_IGNORE_NAME: "\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u043B\u043E\u043A\u0430\u043B\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0439",
  SETTING_NDT_IGNORE_DESC: "\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043F\u043B\u0430\u0433\u0438\u043D\u044B \u0441 \u0441\u043E\u0431\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u043C\u0438 \u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u043C\u0438 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430\u043C\u0438 (\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043A \u0441\u0435\u0442\u0438 \u0434\u043B\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438)",
  SETTING_NDT_IGNORE_NOTICE_A: "API \u0434\u043B\u044F \u0442\u0435\u043A\u0443\u0449\u0435\u0433\u043E \u044F\u0437\u044B\u043A\u0430 \u043D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442",
  SETTING_NDT_IGNORE_NOTICE_B: "\u0421\u0435\u0442\u0435\u0432\u0430\u044F\u7570\u5E38",
  SETTING_NIT_NAME: "\u0420\u0435\u0436\u0438\u043C \u043C\u0430\u0448\u0438\u043D\u043D\u043E\u0433\u043E \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  SETTING_NIT_APIS_NAME: "\u0418\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441",
  SETTING_NIT_APIS_DESC: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C",
  SETTING_NIT_TEST_BUTTON_TEXT: "\u0422\u0435\u0441\u0442",
  SETTING_NIT_INTERVAL_NAME: "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B",
  SETTING_NIT_INTERVAL_DESC: "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0434\u043B\u044F \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430 \u043C\u0435\u0436\u0434\u0443 \u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043C\u0438 (\u0435\u0434. \u0438\u0437\u043C: \u043C\u0438\u043B\u043B\u0438\u0441\u0435\u043A\u0443\u043D\u0434\u044B)",
  SETTING_NIT_BAIDU_NAME: "Baidu",
  SETTING_NIT_BAIDU_DESC: "\u041F\u0435\u0440\u0435\u0432\u043E\u0434 \u043D\u0430 \u043E\u0441\u043D\u043E\u0432\u0435 API Baidu",
  SETTING_NIT_OPENAI_NAME: "OPENAI",
  SETTING_NIT_OPENAI_DESC: "\u041F\u0435\u0440\u0435\u0432\u043E\u0434 \u043D\u0430 \u043E\u0441\u043D\u043E\u0432\u0435 API OPENAI",
  SETTING_NIT_OPENAI_TIP_NAME: "\u041F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0430",
  SETTING_NIT_OPENAI_TIP_DESC: "\u0422\u043E \u0435\u0441\u0442\u044C prompt, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0434\u043B\u044F \u0443\u043A\u0430\u0437\u0430\u043D\u0438\u044F AI \u043E \u0442\u043E\u043C, \u043A\u0430\u043A \u043F\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438. \u042D\u0442\u043E\u0442 \u043F\u043B\u0430\u0433\u0438\u043D \u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u0442 \u043F\u043E\u0434\u0440\u0430\u0437\u0443\u043C\u0435\u0432\u0430\u0435\u043C\u044B\u0435 \u043F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0438, \u043D\u043E \u0435\u0441\u043B\u0438 \u0432\u0430\u043C \u043D\u0443\u0436\u043D\u043E, \u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0438\u0445.",
  SETTING_NIT_OPENAI_TIP_PLACEHOLDER: "\u041F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0430",
  SETTING_MORE_TITLE_NAME: "\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438",
  SETTING_Author_NAME: "\u041F\u043E\u0434\u043F\u0438\u0441\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0447\u0438\u043A\u0430",
  SETTING_Author_DESC: "\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0434\u043E\u0431\u0430\u0432\u043B\u044F\u0442\u044C \u043F\u043E\u0434\u043F\u0438\u0441\u044C \u0430\u0432\u0442\u043E\u0440\u0430 \u043F\u0440\u0438 \u0433\u0435\u043D\u0435\u0440\u0430\u0446\u0438\u0438 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  SETTING_Author_PLACEHOLDER: "\u041F\u043E\u0434\u043F\u0438\u0441\u044C",
  SETTING_OPEN_SETTING_NAME: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
  SETTING_OPEN_SETTING_DESC: "\u041F\u043E\u0441\u043B\u0435 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F \u043A\u043D\u043E\u043F\u043A\u0430 \u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430 \u043A \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u043C \u0431\u0443\u0434\u0435\u0442 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C\u0441\u044F \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u043F\u043B\u0430\u0433\u0438\u043D\u0430",
  SETTING_EDITOR_NAME: "\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  SETTING_EDITOR_DESC: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C/\u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440\u0430 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0430",
  SETTING_CLOUD_COLLABORATION_NAME: "\u041E\u0431\u043B\u0430\u0447\u043D\u043E\u0435 \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u0447\u0435\u0441\u0442\u0432\u043E",
  SETTING_CLOUD_COLLABORATION_DESC: "\u041F\u043E\u0441\u043B\u0435 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F \u044D\u0442\u043E\u0439 \u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u0432\u044B \u0441\u043C\u043E\u0436\u0435\u0442\u0435 \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0442\u044C \u0441\u0432\u043E\u0438 \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u044B, \u0437\u0430\u043F\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u043E\u0434 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445 \u043F\u043B\u0430\u0433\u0438\u043D\u043E\u0432, \u043E\u0442\u043C\u0435\u0447\u0430\u0442\u044C \u043F\u043B\u0430\u0433\u0438\u043D\u044B \u043A\u0430\u043A \u0441 \u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u043C \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u043E\u043C. \u041F\u0440\u0438\u0433\u043B\u0430\u0448\u0430\u0435\u043C \u0432\u043D\u0435\u0441\u0442\u0438 \u0441\u0432\u043E\u0439 \u0432\u043A\u043B\u0430\u0434 \u0432 \u0441\u043E\u043E\u0431\u0449\u0435\u0441\u0442\u0432\u043E!",
  SETTING_CLOUD_COLLABORATION_TOKEN_NAME: "Gitee Token",
  SETTING_CLOUD_COLLABORATION_TOKEN_DESC: "\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u044C\u0442\u0435 \u0432\u0430\u0448 Token \u0434\u043B\u044F \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0438 \u043F\u0430\u043A\u0435\u0442\u043D\u044B\u0445 \u043E\u0442\u043F\u0440\u0430\u0432\u043E\u043A (\u043D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E \u0434\u043B\u044F \u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F)",
  SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER: "Token",
  SETTING_RE_TITLE_NAME: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u0441\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u044F",
  SETTING_RE_MODE_NAME: "\u0420\u0435\u0436\u0438\u043C",
  SETTING_RE_MODE_DESC: "\u0422\u0435\u043A\u0443\u0449\u0438\u0439 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u044B\u0439 \u0440\u0435\u0436\u0438\u043C \u0441\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u044F",
  SETTING_RE_FLAGS_NAME: "\u0424\u043B\u0430\u0433\u0438",
  SETTING_RE_FLAGS_DESC: "\u0424\u043B\u0430\u0433\u0438 \u0440\u0435\u0433\u0443\u043B\u044F\u0440\u043D\u043E\u0433\u043E \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
  SETTING_RE_FLAGS_PLACEHOLDER: "\u0444\u043B\u0430\u0433\u0438",
  SETTING_RE_LENGTH_NAME: "\u0414\u043B\u0438\u043D\u0430",
  SETTING_RE_LENGTH_DESC: "\u041E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u0435 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0439 \u0434\u043B\u0438\u043D\u044B, \u0441\u043E\u0432\u043F\u0430\u0434\u0430\u0435\u043C\u043E\u0439 re",
  SETTING_RE_EDIT_MODE_NAME: "\u0420\u0435\u0436\u0438\u043C \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F",
  SETTING_RE_EDIT_MODE_DESC: "\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u0440\u0435\u0436\u0438\u043C\u043E\u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044F \u0440\u0435\u0433\u0443\u043B\u044F\u0440\u043D\u044B\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439",
  SETTING_RE_EDIT_MODE_PLACEHOLDER: "\u0420\u0435\u0436\u0438\u043C",
  SETTING_RE_EDIT_INSERT_BUTTON_TEXT: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C",
  SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A: "\u0418\u043C\u044F RE-\u0440\u0435\u0436\u0438\u043C\u0430 \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u0435\u0442\u0441\u044F, \u043D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C",
  SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A: "\u041E\u0448\u0438\u0431\u043A\u0430 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F",
  SETTING_RE_EDIT_ITEM_NAME: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \u0434\u0430\u043D\u043D\u044B\u0445",
  SETTING_RE_EDIT_ITEM_DESC: "\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u043B\u044F \u0440\u0435\u0433\u0443\u043B\u044F\u0440\u043D\u044B\u0445 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0439",
  SETTING_RE_EDIT_ITEM_PLACEHOLDER: "RegExp",
  SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C"
};

// src/lang/locale/ja_jp.ts
var ja_jp_default = {
  // ====================
  //      公共区域
  // ====================
  PUBLIC_SUCCESS: "\u6210\u529F",
  // 在日语中，'成功' 的发音和书写与中文相同，但在编程中通常直接使用汉字或假名（如果系统支持）  
  PUBLIC_FAILURE: "\u5931\u6557",
  // '失敗' 是日语中对应的词汇
  // ====================
  //      メインエリア
  // ====================
  I18N_NAME: "I18N",
  I18N_HELP_TITLE_NAME: "\u554F\u984C\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u304B\uFF1FQQ\u30B0\u30EB\u30FC\u30D7\u306B\u52A0\u5165\u3057\u3066\u76F8\u8AC7\u3057\u3066\u304F\u3060\u3055\u3044\uFF01",
  I18N_HELP_TITLE_QQ_BUTTON_TIP: "\u30EF\u30F3\u30AF\u30EA\u30C3\u30AF\u3067\u30B0\u30EB\u30FC\u30D7\u306B\u52A0\u5165\u3057\u3001\u7D20\u6674\u3089\u3057\u3044\u5171\u6709\u3092\u697D\u3057\u307F\u307E\u3057\u3087\u3046\uFF01",
  I18N_HELP_TITLE_SETTING_BUTTON_TIP: "I18N\u8A2D\u5B9A\u753B\u9762\u3092\u958B\u304F",
  I18N_HELP_TITLE_HELP_BUTTON_TIP: "I18N\u30D8\u30EB\u30D7\u753B\u9762\u3092\u958B\u304F",
  I18N_SEARCH_TITLE_NAME: "\u691C\u7D22",
  I18N_ITEM_LABEL_A_NAME: "\u7FFB\u8A33\u306A\u3057",
  I18N_ITEM_LABEL_A_DESC: "\u307E\u3060\u7FFB\u8A33\u3092\u62BD\u51FA\u3057\u3066\u3044\u307E\u305B\u3093",
  I18N_ITEM_LABEL_B_NAME: "\u7FFB\u8A33\u6E08\u307F",
  I18N_ITEM_LABEL_C_NAME: "\u672A\u7FFB\u8A33",
  I18N_ITEM_LABEL_D_NAME: "\u53E4\u304F\u306A\u3063\u305F",
  I18N_ITEM_LABEL_BCD_DESC_AUTHOR: "\u4F5C\u8005",
  I18N_ITEM_LABEL_BCD_DESC_VERSION: "\u30B5\u30DD\u30FC\u30C8\u30D0\u30FC\u30B8\u30E7\u30F3",
  I18N_ITEM_LABEL_E_NAME: "\u7FFB\u8A33\u30A8\u30E9\u30FC",
  I18N_ITEM_LABEL_E_DESC: "\u30D5\u30A9\u30FC\u30DE\u30C3\u30C8\u304C\u9593\u9055\u3063\u3066\u3044\u308B\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002\u78BA\u8A8D\u3057\u3066\u304B\u3089\u518D\u8A66\u884C\u3057\u3066\u304F\u3060\u3055\u3044",
  I18N_ITEM_LABEL_F_NAME: "\u4E2D\u56FD\u8A9E\u3042\u308A",
  I18N_ITEM_LABEL_F_DESC: "\u30D5\u30A3\u30FC\u30C9\u30D0\u30C3\u30AF\u306B\u3088\u308B\u3068\u3001\u3053\u306E\u30D7\u30E9\u30B0\u30A4\u30F3\u306F\u65E2\u306B\u4E2D\u56FD\u8A9E\u306B\u5BFE\u5FDC\u3057\u3066\u3044\u308B\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059",
  I18N_ITEM_LABEL_G_DESC: "\u306A\u3057",
  I18N_ITEM_OPEN_SETTING_BUTTON_TIP: "\u30D7\u30E9\u30B0\u30A4\u30F3\u8A2D\u5B9A\u3092\u958B\u304F",
  I18N_ITEM_OPEN_DIR_BUTTON_TIP: "\u30D7\u30E9\u30B0\u30A4\u30F3\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u3092\u958B\u304F",
  I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD: "\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u3092\u958B\u304F",
  I18N_ITEM_DELETE_DIR_BUTTON_TIP: "\u7FFB\u8A33\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u3092\u524A\u9664",
  I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD: "\u7FFB\u8A33\u3092\u524A\u9664",
  I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP: "\u7FFB\u8A33\u3092\u7DE8\u96C6",
  I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP: "\u7FFB\u8A33\u3092\u63D0\u51FA",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT: "\u62BD\u51FA",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TIP: "\u30D7\u30E9\u30B0\u30A4\u30F3\u304B\u3089\u7FFB\u8A33\u3055\u308C\u3066\u3044\u306A\u3044\u30C6\u30AD\u30B9\u30C8\u3092\u62BD\u51FA",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD: "\u7FFB\u8A33\u3092\u62BD\u51FA",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u7FFB\u8A33\u3092\u62BD\u51FA",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT: "\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TIP: "\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u304B\u3089\u7FFB\u8A33\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD: "\u7FFB\u8A33\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT: "\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TIP: "\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u304B\u3089\u7FFB\u8A33\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3057\u3066\u30ED\u30FC\u30AB\u30EB\u7FFB\u8A33\u3092\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u7FFB\u8A33\u3092\u66F4\u65B0",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_TIP: "\u7FFB\u8A33\u3092\u751F\u6210",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD: "\u6A5F\u68B0\u7FFB\u8A33",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_TRANSLATION_BUTTON_TEXT: "\u7FFB\u8A33",
  I18N_ITEM_TRANSLATION_BUTTON_TIP: "\u30D7\u30E9\u30B0\u30A4\u30F3\u7FFB\u8A33",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD: "\u30D7\u30E9\u30B0\u30A4\u30F3\u7FFB\u8A33",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "\u7FFB\u8A33\u5F8C\u3001\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u6A5F\u80FD\u3057\u306A\u304F\u306A\u3063\u305F\u5834\u5408\n\u7FFB\u8A33\u306B\u554F\u984C\u304C\u3042\u308B\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\n\u5143\u306B\u623B\u3059\u30DC\u30BF\u30F3\u3092\u30AF\u30EA\u30C3\u30AF\u3057\u3066\u5143\u306E\u72B6\u614B\u306B\u623B\u3059\u3053\u3068\u304C\u3067\u304D\u307E\u3059",
  I18N_ITEM_RESTORE_BUTTON_TEXT: "\u5143\u306B\u623B\u3059",
  I18N_ITEM_RESTORE_BUTTON_TIP: "\u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u5143\u306B\u623B\u3059",
  I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD: "\u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u5143\u306B\u623B\u3059",
  I18N_STATE_HEAD: "\u30B9\u30C6\u30FC\u30C8\u30D5\u30A1\u30A4\u30EB",
  I18N_UPDATE_HEAD: "\u30D7\u30E9\u30B0\u30A4\u30F3\u66F4\u65B0",
  // ====================
  //     ウィザードエリア
  // ====================
  WIZARD_VIDEO_TUTORIAL_TITLE_NAME: "\u516C\u5F0F\u30D3\u30C7\u30AA\u30C1\u30E5\u30FC\u30C8\u30EA\u30A2\u30EB",
  WIZARD_VIDEO_TUTORIAL_TITLE_DESC: "Obsidian i18n\u64CD\u4F5C\u3092\u8A73\u3057\u304F\u8AAC\u660E\u3057\u3001\u8FC5\u901F\u306A\u30DE\u30B9\u30BF\u30FC\u3092\u652F\u63F4\u3057\u307E\u3059",
  WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT: "\u53C2\u7167",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME: "\u516C\u5F0F\u30C9\u30AD\u30E5\u30E1\u30F3\u30C8\u30C1\u30E5\u30FC\u30C8\u30EA\u30A2\u30EB",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC: "Obsidian i18n\u306E\u5305\u62EC\u7684\u306A\u63A2\u6C42\u306E\u65C5\u30AC\u30A4\u30C9",
  WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT: "\u53C2\u7167",
  WIZARD_QQ_TITLE_NAME: "\u516C\u5F0FQQ\u30B0\u30EB\u30FC\u30D7",
  WIZARD_QQ_TITLE_DESC: "\u516C\u5F0F\u30B0\u30EB\u30FC\u30D7\u3067\u306F\u3001\u30CB\u30FC\u30BA\u3092\u6295\u7A3F\u3001BUG\u3092\u63D0\u51FA\u3001\u7FFB\u8A33\u3092\u5171\u6709\u3057\u3001\u4ED6\u306E\u30E6\u30FC\u30B6\u30FC\u3068\u30D7\u30E9\u30B0\u30A4\u30F3\u306E\u4F7F\u7528\u3001\u7FFB\u8A33\u306A\u3069\u306E\u30C8\u30D4\u30C3\u30AF\u306B\u3064\u3044\u3066\u4EA4\u6D41\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002",
  WIZARD_QQ_TEXT: "\u52A0\u5165",
  // ====================
  //       サブミットエリア
  // ====================
  SUBMITE_PUBLIC_AUTHOR: "\u4F5C\u8005",
  SUBMITE_PUBLIC_TRANSLATION_VERSION: "\u7FFB\u8A33\u30D0\u30FC\u30B8\u30E7\u30F3",
  SUBMITE_PUBLIC_PLUGIN_VERSION: "\u30D7\u30E9\u30B0\u30A4\u30F3\u30D0\u30FC\u30B8\u30E7\u30F3",
  SUBMITE_TITLE_NAME: "\u7FFB\u8A33\u3092\u5171\u6709\u3057\u3066\u3044\u305F\u3060\u304D\u3001\u3042\u308A\u304C\u3068\u3046\u3054\u3056\u3044\u307E\u3059",
  SUBMITE_TITLE_DESC: "\u63D0\u51FA\u3059\u308B\u524D\u306B\u3001\u6CE8\u610F\u6DF1\u304F\u30EC\u30D3\u30E5\u30FC\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u3054\u5354\u529B\u3068\u52AA\u529B\u306B\u611F\u8B1D\u7533\u3057\u4E0A\u3052\u307E\u3059\u3002",
  SUBMITE_LOCAL_TRANSLATION_NAME: "[\u30ED\u30FC\u30AB\u30EB\u7FFB\u8A33]",
  SUBMITE_CLOUD_TRANSLATION_NAME: "[\u30AF\u30E9\u30A6\u30C9\u7FFB\u8A33]",
  SUBMITE_OPERATE_CANCEL_BUTTON_TEXT: "\u30AD\u30E3\u30F3\u30BB\u30EB",
  SUBMITE_OPERATE_CANCEL_BUTTON_NOTICE_HEAD: "\u30AD\u30E3\u30F3\u30BB\u30EB",
  SUBMITE_OPERATE_REQUEST_BUTTON_TEXT: "\u7FFB\u8A33\u3092\u30EA\u30AF\u30A8\u30B9\u30C8",
  SUBMITE_OPERATE_REQUEST_BUTTON_NOTICE_HEAD: "\u7FFB\u8A33\u3092\u30EA\u30AF\u30A8\u30B9\u30C8",
  SUBMITE_OPERATE_MARK_BUTTON_TEXT: "\u4E2D\u56FD\u8A9E\u306B\u30DE\u30FC\u30AF",
  SUBMITE_OPERATE_MARK_BUTTON_NOTICE_HEAD: "\u4E2D\u56FD\u8A9E\u306B\u30DE\u30FC\u30AF",
  SUBMITE_OPERATE_SUBMITE_BUTTON_TEXT: "\u7FFB\u8A33\u3092\u63D0\u51FA",
  SUBMITE_OPERATE_SUBMITE_BUTTON_NOTICE_HEAD: "\u7FFB\u8A33\u3092\u63D0\u51FA",
  SUBMITE_OPERATE_UPDATE_BUTTON_TEXT: "\u4FEE\u6B63\u3092\u63D0\u51FA",
  SUBMITE_OPERATE_UPDATE_BUTTON_NOTICE_HEAD: "\u4FEE\u6B63\u3092\u63D0\u51FA",
  SUBMITE_INSPECT_HEAD: "\u7FFB\u8A33\u691C\u67FB",
  SUBMITE_INSPECT_NOTICE_A: "\u7FFB\u8A33\u30D5\u30A3\u30FC\u30EB\u30C9\u304C\u6B20\u843D",
  SUBMITE_INSPECT_NOTICE_B: "\u8457\u8005\u3092\u7A7A\u306B\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093",
  SUBMITE_INSPECT_NOTICE_C: "\u7FFB\u8A33\u5185\u5BB9\u306F\u6A19\u6E96\u3092\u6E80\u305F\u3057\u3066\u3044\u307E\u3059",
  SUBMITE_INSPECT_NOTICE_D: "\u7FFB\u8A33\u5185\u5BB9\u306F50%\u3092\u8D85\u3048\u3066\u3044\u307E\u305B\u3093",
  SUBMITE_INSPECT_NOTICE_E: "\u30D0\u30FC\u30B8\u30E7\u30F3\u756A\u53F7\u306E\u30D5\u30A9\u30FC\u30DE\u30C3\u30C8\u306F(X.X.X)\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093",
  // ====================
  //       編集エリア
  // ====================
  EDITOR_PUBLIC_HEAD: "\u7FFB\u8A33\u30A8\u30C7\u30A3\u30BF\u30FC",
  EDITOR_TITLE_AUTHOR: "\u4F5C\u8005",
  EDITOR_TITLE_TRANSLATION_VERSION: "\u7FFB\u8A33\u30D0\u30FC\u30B8\u30E7\u30F3",
  EDITOR_TITLE_PLUGIN_VERSION: "\u30D7\u30E9\u30B0\u30A4\u30F3\u30D0\u30FC\u30B8\u30E7\u30F3",
  EDITOR_TITLE_DESCRIPTION: "\u8AAC\u660E",
  EDITOR_SAVE_TRANSLATION_BUTTON_TEXT: "\u4FDD\u5B58",
  EDITOR_CANCEL_ITEM_BUTTON_TEXT: "\u30AD\u30E3\u30F3\u30BB\u30EB",
  EDITOR_CANCEL_ITEM_BUTTON_NOTICE_CONTENT_A: "\u9078\u629E\u3092\u30AD\u30E3\u30F3\u30BB\u30EB",
  EDITOR_DELETE_ITEM_BUTTON_TEXT: "\u524A\u9664",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A: "\u524A\u9664\u6210\u529F",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_B: "\u524A\u9664\u5931\u6557",
  EDITOR_INSERT_ITEM_BUTTON_TEXT: "\u65B0\u898F\u8FFD\u52A0",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A: "\u65B0\u898F\u8FFD\u52A0\u6210\u529F",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B: "\u65B0\u898F\u8FFD\u52A0\u5931\u6557\n\u7FFB\u8A33\u306B\u3059\u3067\u306B\u3053\u306E\u5185\u5BB9\u304C\u5B58\u5728\u3057\u307E\u3059",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_C: "\u65B0\u898F\u8FFD\u52A0\u5931\u6557\n\u65B0\u898F\u8FFD\u52A0\u3059\u308B\u524D\u306B\u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u306E\u9078\u629E\u3092\u30AD\u30E3\u30F3\u30BB\u30EB\u3057\u3066\u304F\u3060\u3055\u3044",
  EDITOR_HELP_BUTTON_TEXT: "\u4FDD\u5B58\u3057\u3066\u304F\u3060\u3055\u3044",
  EDITOR_HELP_BUTTON_NOTICE_CONTENT_A: "\n\u9000\u51FA\u3059\u308B\u524D\u306B\u5FC5\u305A\u4FDD\u5B58\u3057\u3066\u304F\u3060\u3055\u3044\n\u9000\u51FA\u3059\u308B\u524D\u306B\u5FC5\u305A\u4FDD\u5B58\u3057\u3066\u304F\u3060\u3055\u3044\n\u9000\u51FA\u3059\u308B\u524D\u306B\u5FC5\u305A\u4FDD\u5B58\u3057\u3066\u304F\u3060\u3055\u3044",
  // ====================
  //       設定エリア
  // ====================
  SETTING_PUBLIC_HIDE: "\u975E\u8868\u793A",
  SETTING_PUBLIC_SHOW: "\u8868\u793A",
  SETTING_PUBLIC_RE: "\u6B63\u898F\u8868\u73FE",
  SETTING_BASE_TITLE_NAME: "\u57FA\u672C\u8A2D\u5B9A",
  SETTING_HELP_NAME: "\u30D8\u30EB\u30D7",
  SETTING_LANGUAGE_NAME: "\u8A00\u8A9E",
  SETTING_LANGUAGE_DESC: "\u7FFB\u8A33\u3059\u308B\u8A00\u8A9E\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044",
  SETTING_LDT_NAME: "\u30ED\u30FC\u30AB\u30EB\u30D5\u30A1\u30A4\u30EB\u30E2\u30FC\u30C9",
  SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD: "\u8F9E\u66F8\u306E\u518D\u8AAD\u307F\u8FBC\u307F",
  SETTING_LDT_AUTOMATIC_UPDATE_NAME: "\u8F9E\u66F8\u306E\u518D\u8AAD\u307F\u8FBC\u307F",
  SETTING_LDT_AUTOMATIC_UPDATE_DESC: "\u30D7\u30E9\u30B0\u30A4\u30F3\u30D0\u30FC\u30B8\u30E7\u30F3\u306E\u5909\u66F4\u3092\u691C\u77E5\u5F8C\u3001\u30ED\u30FC\u30AB\u30EB\u306B\u3042\u308B\u7FFB\u8A33\u3092\u81EA\u52D5\u7684\u306B\u9069\u7528\u3057\u307E\u3059\uFF08\u30D7\u30E9\u30B0\u30A4\u30F3\u306E\u66F4\u65B0\u306B\u3088\u308A\u3001\u30ED\u30FC\u30AB\u30EB\u7FFB\u8A33\u304C\u9069\u5408\u3057\u306A\u3044\u53EF\u80FD\u6027\u304C\u3042\u308B\u305F\u3081\u3001\u30A8\u30E9\u30FC\u304C\u306A\u3044\u304B\u3054\u6CE8\u610F\u304F\u3060\u3055\u3044\uFF09",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A: "\u66F4\u65B0\u306E\u78BA\u8A8D\u3092\u958B\u59CB",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B: "\u66F4\u65B0\u3059\u308B\u30D7\u30E9\u30B0\u30A4\u30F3\u306F\u3042\u308A\u307E\u305B\u3093",
  SETTING_NDT_NAME: "\u30AF\u30E9\u30A6\u30C9\u30D5\u30A1\u30A4\u30EB\u30E2\u30FC\u30C9",
  SETTING_NDT_PUBLIC_MODE_HEAD: "\u30AF\u30E9\u30A6\u30C9\u30E2\u30FC\u30C9",
  SETTING_NDT_MODE_NOTICE_A: "\u73FE\u5728\u306E\u8A00\u8A9EAPI\u304C\u5B58\u5728\u3057\u307E\u305B\u3093",
  SETTING_NDT_MODE_NOTICE_B: "\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u7570\u5E38",
  SETTING_NDT_PUBLIC_IGNORE_HEAD: "\u4E2D\u56FD\u8A9E\u306B\u30DE\u30FC\u30AF",
  SETTING_NDT_APIS_NAME: "\u30A4\u30F3\u30BF\u30FC\u30D5\u30A7\u30FC\u30B9",
  SETTING_NDT_APIS_DESC: "\u7FFB\u8A33\u3059\u308B\u8A00\u8A9E\u306B\u5BFE\u5FDC\u3059\u308BAPI\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\uFF08\u518D\u8FFD\u52A0\u3059\u308B\u3068\u4E0A\u66F8\u304D\u3055\u308C\u307E\u3059\uFF09",
  SETTING_NDT_APIS_INSERT_BUTTON: "\u8FFD\u52A0",
  SETTING_NDT_IGNORE_NAME: "\u4E2D\u56FD\u8A9E\u306B\u30DE\u30FC\u30AF",
  SETTING_NDT_IGNORE_DESC: "\u4E2D\u56FD\u8A9E\u304C\u7D44\u307F\u8FBC\u307E\u308C\u3066\u3044\u308B\u30D7\u30E9\u30B0\u30A4\u30F3\u306B\u30DE\u30FC\u30AF\u3092\u4ED8\u3051\u307E\u3059\uFF08\u30B3\u30DF\u30E5\u30CB\u30C6\u30A3\u304B\u3089\u306E\u30D5\u30A3\u30FC\u30C9\u30D0\u30C3\u30AF\u306B\u3088\u308A\u3001\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u63A5\u7D9A\u304C\u5FC5\u8981\u3067\u3059\uFF09",
  SETTING_NDT_IGNORE_NOTICE_A: "\u73FE\u5728\u306E\u8A00\u8A9EAPI\u304C\u5B58\u5728\u3057\u307E\u305B\u3093",
  SETTING_NDT_IGNORE_NOTICE_B: "\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u7570\u5E38",
  SETTING_NIT_NAME: "\u6A5F\u68B0\u7FFB\u8A33\u30E2\u30FC\u30C9",
  SETTING_NIT_APIS_NAME: "\u30A4\u30F3\u30BF\u30FC\u30D5\u30A7\u30FC\u30B9",
  SETTING_NIT_APIS_DESC: "\u4F7F\u7528\u3059\u308B\u30A4\u30F3\u30BF\u30FC\u30D5\u30A7\u30FC\u30B9\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044",
  SETTING_NIT_TEST_BUTTON_TEXT: "\u30C6\u30B9\u30C8",
  SETTING_NIT_INTERVAL_NAME: "\u30A4\u30F3\u30BF\u30FC\u30D0\u30EB",
  SETTING_NIT_INTERVAL_DESC: "\u5404\u30EA\u30AF\u30A8\u30B9\u30C8\u306E\u30A4\u30F3\u30BF\u30FC\u30D0\u30EB\u3092\u5236\u9650\u3057\u307E\u3059\uFF08\u5358\u4F4D\uFF1A\u30DF\u30EA\u79D2\uFF09",
  SETTING_NIT_BAIDU_NAME: "\u767E\u5EA6",
  SETTING_NIT_BAIDU_DESC: "\u767E\u5EA6API\u306B\u57FA\u3065\u304F\u7FFB\u8A33",
  SETTING_NIT_OPENAI_NAME: "OPENAI",
  SETTING_NIT_OPENAI_DESC: "OPENAI\u306EAPI\u306B\u57FA\u3065\u304F\u7FFB\u8A33",
  SETTING_NIT_OPENAI_TIP_NAME: "\u30D7\u30ED\u30F3\u30D7\u30C8",
  SETTING_NIT_OPENAI_TIP_DESC: "AI\u304C\u7FFB\u8A33\u3059\u308B\u65B9\u6CD5\u3092\u30AC\u30A4\u30C9\u3059\u308B\u30D7\u30ED\u30F3\u30D7\u30C8\u3001\u3053\u306E\u30D7\u30E9\u30B0\u30A4\u30F3\u3067\u306F\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u30D7\u30ED\u30F3\u30D7\u30C8\u304C\u63D0\u4F9B\u3055\u308C\u307E\u3059\u304C\u3001\u5FC5\u8981\u306B\u5FDC\u3058\u3066\u8ABF\u6574\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002",
  SETTING_NIT_OPENAI_TIP_PLACEHOLDER: "\u30D7\u30ED\u30F3\u30D7\u30C8",
  SETTING_MORE_TITLE_NAME: "\u305D\u306E\u4ED6\u306E\u6A5F\u80FD",
  SETTING_Author_NAME: "\u7FFB\u8A33\u306E\u7F72\u540D",
  SETTING_Author_DESC: "\u7FFB\u8A33\u3092\u751F\u6210\u3059\u308B\u969B\u306B\u81EA\u52D5\u7684\u306B\u4F5C\u8005\u306E\u7F72\u540D\u3092\u8FFD\u52A0\u3057\u307E\u3059",
  SETTING_Author_PLACEHOLDER: "\u7F72\u540D",
  SETTING_OPEN_SETTING_NAME: "\u8A2D\u5B9A\u3092\u958B\u304F",
  SETTING_OPEN_SETTING_DESC: "\u6709\u52B9\u306B\u3059\u308B\u3068\u3001\u30D7\u30E9\u30B0\u30A4\u30F3\u30DA\u30FC\u30B8\u306B\u8A2D\u5B9A\u30B8\u30E3\u30F3\u30D7\u30DC\u30BF\u30F3\u304C\u8868\u793A\u3055\u308C\u307E\u3059",
  SETTING_EDITOR_NAME: "\u7FFB\u8A33\u7DE8\u96C6",
  SETTING_EDITOR_DESC: "\u7D44\u307F\u8FBC\u307F\u7FFB\u8A33\u30A8\u30C7\u30A3\u30BF\u30FC\u6A5F\u80FD\u3092\u6709\u52B9/\u7121\u52B9\u306B\u3057\u307E\u3059",
  SETTING_CLOUD_COLLABORATION_NAME: "\u30AF\u30E9\u30A6\u30C9\u5171\u540C\u4F5C\u6210",
  SETTING_CLOUD_COLLABORATION_DESC: "\u3053\u306E\u6A5F\u80FD\u3092\u6709\u52B9\u306B\u3059\u308B\u3068\u3001\u7FFB\u8A33\u3092\u63D0\u51FA\u3057\u305F\u308A\u3001\u30D7\u30E9\u30B0\u30A4\u30F3\u306E\u7FFB\u8A33\u3092\u30EA\u30AF\u30A8\u30B9\u30C8\u3057\u305F\u308A\u3001\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u4E2D\u56FD\u8A9E\u3092\u65E2\u306B\u30B5\u30DD\u30FC\u30C8\u3057\u3066\u3044\u308B\u304B\u3069\u3046\u304B\u3092\u30DE\u30FC\u30AF\u3057\u305F\u308A\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\u30B3\u30DF\u30E5\u30CB\u30C6\u30A3\u306B\u8CA2\u732E\u3057\u3066\u304F\u3060\u3055\u3044\uFF01",
  SETTING_CLOUD_COLLABORATION_TOKEN_NAME: "Gitee Token",
  SETTING_CLOUD_COLLABORATION_TOKEN_DESC: "\u4E00\u62EC\u63D0\u51FA\u3092\u30B5\u30DD\u30FC\u30C8\u3059\u308B\u305F\u3081\u306B\u30C8\u30FC\u30AF\u30F3\u3092\u63D0\u4F9B\u3057\u3066\u304F\u3060\u3055\u3044\uFF08\u4E00\u6642\u7684\u306B\u4F7F\u7528\u3059\u308B\u5834\u5408\u306F\u5165\u529B\u4E0D\u8981\uFF09",
  SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER: "\u30C8\u30FC\u30AF\u30F3",
  SETTING_RE_TITLE_NAME: "\u30DE\u30C3\u30C1\u30F3\u30B0\u30E2\u30FC\u30C9\u8A2D\u5B9A",
  SETTING_RE_MODE_NAME: "\u30E2\u30FC\u30C9",
  SETTING_RE_MODE_DESC: "\u73FE\u5728\u4F7F\u7528\u3055\u308C\u3066\u3044\u308B\u30DE\u30C3\u30C1\u30F3\u30B0\u30E2\u30FC\u30C9",
  SETTING_RE_FLAGS_NAME: "\u30D5\u30E9\u30B0",
  SETTING_RE_FLAGS_DESC: "\u6B63\u898F\u8868\u73FE\u306Eflags",
  SETTING_RE_FLAGS_PLACEHOLDER: "flags",
  SETTING_RE_LENGTH_NAME: "\u9577\u3055",
  SETTING_RE_LENGTH_DESC: "re\u304C\u30DE\u30C3\u30C1\u30F3\u30B0\u3067\u304D\u308B\u6700\u5927\u9577\u3092\u5236\u9650\u3057\u307E\u3059",
  SETTING_RE_EDIT_MODE_NAME: "\u30E2\u30FC\u30C9\u7DE8\u96C6",
  SETTING_RE_EDIT_MODE_DESC: "\u6B63\u898F\u8868\u73FE\u30DE\u30C3\u30C1\u30F3\u30B0\u30E2\u30FC\u30C9\u3092\u65B0\u898F\u8FFD\u52A0/\u524A\u9664\u3057\u307E\u3059",
  SETTING_RE_EDIT_MODE_PLACEHOLDER: "\u30E2\u30FC\u30C9",
  SETTING_RE_EDIT_INSERT_BUTTON_TEXT: "\u8FFD\u52A0",
  SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A: "RE\u30E2\u30FC\u30C9\u540D\u304C\u91CD\u8907\u3057\u3066\u3044\u307E\u3059\u3002\u8FFD\u52A0\u3067\u304D\u307E\u305B\u3093",
  SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A: "\u524A\u9664\u5931\u6557",
  SETTING_RE_EDIT_ITEM_NAME: "\u30C7\u30FC\u30BF\u7DE8\u96C6",
  SETTING_RE_EDIT_ITEM_DESC: "\u6B63\u898F\u8868\u73FE\u30E2\u30FC\u30C9\u30C7\u30FC\u30BF\u3092\u65B0\u898F\u8FFD\u52A0/\u524A\u9664\u3057\u307E\u3059",
  SETTING_RE_EDIT_ITEM_PLACEHOLDER: "RegExp",
  SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT: "\u8FFD\u52A0"
};

// src/lang/locale/fr_fr.ts
var fr_fr_default = {
  // ====================
  //      公共区域
  // ====================
  PUBLIC_SUCCESS: "Succ\xE8s",
  PUBLIC_FAILURE: "\xC9chec",
  // ====================
  //      主要区域
  // ====================
  I18N_NAME: "I18N",
  I18N_HELP_TITLE_NAME: "Vous rencontrez des difficult\xE9s ? Rejoignez rapidement le groupe QQ pour consultation !",
  I18N_HELP_TITLE_QQ_BUTTON_TIP: "Acc\xE8s direct, rejoignez le groupe QQ et partagez les plaisirs !",
  I18N_HELP_TITLE_SETTING_BUTTON_TIP: "Ouvrez l\u2019interface de configuration de I18N",
  I18N_HELP_TITLE_HELP_BUTTON_TIP: "Ouvrez l\u2019interface d\u2019aide de I18N",
  I18N_SEARCH_TITLE_NAME: "Recherche",
  I18N_ITEM_LABEL_A_NAME: "Aucune traduction",
  I18N_ITEM_LABEL_A_DESC: "Vous n\u2019avez pas encore extrait de traduction",
  I18N_ITEM_LABEL_B_NAME: "Traduit",
  I18N_ITEM_LABEL_C_NAME: "Non traduit",
  I18N_ITEM_LABEL_D_NAME: "P\xE9rim\xE9",
  I18N_ITEM_LABEL_BCD_DESC_AUTHOR: "Auteur",
  I18N_ITEM_LABEL_BCD_DESC_VERSION: "Version support\xE9e",
  I18N_ITEM_LABEL_E_NAME: "Erreur de traduction",
  I18N_ITEM_LABEL_E_DESC: "Le format peut contenir des erreurs, veuillez v\xE9rifier attentivement avant de r\xE9essayer",
  I18N_ITEM_LABEL_F_NAME: "Traduction chinoise existante",
  I18N_ITEM_LABEL_F_DESC: "Selon les commentaires, ce plugin peut avoir une traduction chinoise int\xE9gr\xE9e",
  I18N_ITEM_LABEL_G_DESC: "Non applicable",
  I18N_ITEM_OPEN_SETTING_BUTTON_TIP: "Ouvrez les param\xE8tres du plugin",
  I18N_ITEM_OPEN_DIR_BUTTON_TIP: "Ouvrez le r\xE9pertoire du plugin",
  I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD: "Ouverture du r\xE9pertoire",
  I18N_ITEM_DELETE_DIR_BUTTON_TIP: "Supprimez le r\xE9pertoire de traduction",
  I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD: "Suppression de la traduction",
  I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP: "Modifier la traduction",
  I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP: "Soumettre la traduction",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT: "Extraction",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TIP: "Extraire les traductions non traduites du plugin",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD: "Extraction de traduction",
  I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "Extraction de traduction",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT: "T\xE9l\xE9chargement",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TIP: "T\xE9l\xE9charger les traductions \xE0 partir du r\xE9seau",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD: "T\xE9l\xE9chargement de traduction",
  I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT: "Mise \xE0 jour",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TIP: "Mettre \xE0 jour les traductions locales avec les traductions du r\xE9seau",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD: "Mise \xE0 jour de la traduction",
  I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_TIP: "G\xE9n\xE9rer des traductions traduites",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD: "Traduction automatique",
  I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "",
  I18N_ITEM_TRANSLATION_BUTTON_TEXT: "Traduire",
  I18N_ITEM_TRANSLATION_BUTTON_TIP: "Traduction du plugin",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD: "Traduction du plugin",
  I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A: "Si le plugin ne fonctionne pas apr\xE8s la traduction\nCela peut indiquer que la traduction a des probl\xE8mes\nCliquez sur restaurer pour revenir \xE0 l'\xE9tat d'origine",
  I18N_ITEM_RESTORE_BUTTON_TEXT: "Restaurer",
  I18N_ITEM_RESTORE_BUTTON_TIP: "Restauration du plugin",
  I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD: "Restauration du plugin",
  I18N_STATE_HEAD: "Fichier d'\xE9tat",
  I18N_UPDATE_HEAD: "Mise \xE0 jour du plugin",
  // ====================
  //      Wizard区域
  // ====================
  WIZARD_VIDEO_TUTORIAL_TITLE_NAME: "Tutoriel vid\xE9o officiel",
  WIZARD_VIDEO_TUTORIAL_TITLE_DESC: "D\xE9monstration d\xE9taill\xE9e de l'op\xE9ration i18n d'Obsidian, pour vous aider \xE0 ma\xEEtriser rapidement",
  WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT: "Explorer",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME: "Tutoriel de documentation officiel",
  WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC: "Guide de la d\xE9couverte compl\xE8te d'Obsidian i18n",
  WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT: "Explorer",
  WIZARD_QQ_TITLE_NAME: "Groupe QQ officiel",
  WIZARD_QQ_TITLE_DESC: "Dans le groupe officiel, vous pouvez publier des demandes, soumettre des bogues, partager des traductions et discuter avec d'autres utilisateurs sur l'utilisation du plugin, la traduction et autres sujets.",
  WIZARD_QQ_TEXT: "Rejoindre",
  // ====================
  //       提交区域
  // ====================
  SUBMITE_PUBLIC_AUTHOR: "Auteur",
  SUBMITE_PUBLIC_TRANSLATION_VERSION: "Version de la traduction",
  SUBMITE_PUBLIC_PLUGIN_VERSION: "Version du plugin",
  SUBMITE_TITLE_NAME: "Merci pour le partage de la traduction",
  SUBMITE_TITLE_DESC: "Veuillez relire attentivement avant de soumettre, nous appr\xE9cions sinc\xE8rement votre coop\xE9ration et vos efforts.",
  SUBMITE_LOCAL_TRANSLATION_NAME: "[Traduction locale]",
  SUBMITE_CLOUD_TRANSLATION_NAME: "[Traduction cloud]",
  SUBMITE_OPERATE_CANCEL_BUTTON_TEXT: "Annuler la soumission",
  SUBMITE_OPERATE_CANCEL_BUTTON_NOTICE_HEAD: "Annuler la soumission",
  SUBMITE_OPERATE_REQUEST_BUTTON_TEXT: "Demander une traduction",
  SUBMITE_OPERATE_REQUEST_BUTTON_NOTICE_HEAD: "Demander une traduction",
  SUBMITE_OPERATE_MARK_BUTTON_TEXT: "Marquer la traduction chinoise",
  SUBMITE_OPERATE_MARK_BUTTON_NOTICE_HEAD: "Marquer la traduction chinoise",
  SUBMITE_OPERATE_SUBMITE_BUTTON_TEXT: "Soumettre la traduction",
  SUBMITE_OPERATE_SUBMITE_BUTTON_NOTICE_HEAD: "Soumettre la traduction",
  SUBMITE_OPERATE_UPDATE_BUTTON_TEXT: "Soumettre les modifications",
  SUBMITE_OPERATE_UPDATE_BUTTON_NOTICE_HEAD: "Soumettre les modifications",
  SUBMITE_INSPECT_HEAD: "Inspection de la traduction",
  SUBMITE_INSPECT_NOTICE_A: "Champ de traduction manquant",
  SUBMITE_INSPECT_NOTICE_B: "L auteur ne peut \xEAtre vide",
  SUBMITE_INSPECT_NOTICE_C: "Le contenu de la traduction est conforme aux normes",
  SUBMITE_INSPECT_NOTICE_D: "Le contenu de la traduction ne d\xE9passe pas 50%",
  SUBMITE_INSPECT_NOTICE_E: "Le format de la version doit \xEAtre (X.X.X)",
  // ====================
  //       编辑区域
  // ====================
  EDITOR_PUBLIC_HEAD: "\xC9diteur de traduction",
  EDITOR_TITLE_AUTHOR: "Auteur",
  EDITOR_TITLE_TRANSLATION_VERSION: "Version de la traduction",
  EDITOR_TITLE_PLUGIN_VERSION: "Version du plugin",
  EDITOR_TITLE_DESCRIPTION: "Description",
  EDITOR_SAVE_TRANSLATION_BUTTON_TEXT: "Sauvegarder",
  EDITOR_CANCEL_ITEM_BUTTON_TEXT: "Annuler",
  EDITOR_CANCEL_ITEM_BUTTON_NOTICE_CONTENT_A: "Annuler la s\xE9lection",
  EDITOR_DELETE_ITEM_BUTTON_TEXT: "Supprimer",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A: "Suppression r\xE9ussie",
  EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_B: "\xC9chec de la suppression",
  EDITOR_INSERT_ITEM_BUTTON_TEXT: "Ajouter",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A: "Ajout r\xE9ussi",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B: "\xC9chec de l'ajout\nCe contenu existe d\xE9j\xE0 dans la traduction",
  EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_C: "\xC9chec de l'ajout\nVeuillez annuler la s\xE9lection avant d'ajouter",
  EDITOR_HELP_BUTTON_TEXT: "Veuillez sauvegarder avant de quitter",
  EDITOR_HELP_BUTTON_NOTICE_CONTENT_A: "\nVeuillez sauvegarder avant de quitter\nVeuillez sauvegarder avant de quitter\nVeuillez sauvegarder avant de quitter",
  // ====================
  //       设置区域
  // ====================
  SETTING_PUBLIC_HIDE: "Cacher",
  SETTING_PUBLIC_SHOW: "Afficher",
  SETTING_PUBLIC_RE: "RE",
  SETTING_BASE_TITLE_NAME: "Param\xE8tres de base",
  SETTING_HELP_NAME: "Aide",
  SETTING_LANGUAGE_NAME: "Langue",
  SETTING_LANGUAGE_DESC: "Choisissez la langue \xE0 traduire",
  SETTING_LDT_NAME: "Mode de fichier local",
  SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD: "Rechargement du dictionnaire",
  SETTING_LDT_AUTOMATIC_UPDATE_NAME: "Rechargement du dictionnaire",
  SETTING_LDT_AUTOMATIC_UPDATE_DESC: "Appliquez automatiquement les traductions locales existantes apr\xE8s la d\xE9tection d'un changement de version du plugin (attention aux erreurs possibles suite \xE0 la mise \xE0 jour du plugin)",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A: "Commencer \xE0 v\xE9rifier les mises \xE0 jour",
  SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B: "Aucune mise \xE0 jour de plugin n\xE9cessaire",
  SETTING_NDT_NAME: "Mode de fichier cloud",
  SETTING_NDT_PUBLIC_MODE_HEAD: "Mode cloud",
  SETTING_NDT_MODE_NOTICE_A: "L'API de la langue actuelle n'existe pas",
  SETTING_NDT_MODE_NOTICE_B: "Anomalie r\xE9seau",
  SETTING_NDT_PUBLIC_IGNORE_HEAD: "Marquer la traduction chinoise",
  SETTING_NDT_APIS_NAME: "API",
  SETTING_NDT_APIS_DESC: "Veuillez entrer l'API correspondante \xE0 la langue que vous souhaitez traduire (ajouter de nouveau la couvrira)",
  SETTING_NDT_APIS_INSERT_BUTTON: "Ajouter",
  SETTING_NDT_IGNORE_NAME: "Marquer la traduction chinoise",
  SETTING_NDT_IGNORE_DESC: "Marquer les plugins avec une traduction chinoise int\xE9gr\xE9e (bas\xE9 sur les commentaires de la communaut\xE9, n\xE9cessite une connexion r\xE9seau)",
  SETTING_NDT_IGNORE_NOTICE_A: "L'API de la langue actuelle n'existe pas",
  SETTING_NDT_IGNORE_NOTICE_B: "Anomalie r\xE9seau",
  SETTING_NIT_NAME: "Mode de traduction automatique",
  SETTING_NIT_APIS_NAME: "API",
  SETTING_NIT_APIS_DESC: "Choisissez l'interface que vous souhaitez utiliser",
  SETTING_NIT_TEST_BUTTON_TEXT: "Tester",
  SETTING_NIT_INTERVAL_NAME: "Intervalle",
  SETTING_NIT_INTERVAL_DESC: "Utilis\xE9 pour limiter l'intervalle de chaque demande (unit\xE9: millisecondes)",
  SETTING_NIT_BAIDU_NAME: "Baidu",
  SETTING_NIT_BAIDU_DESC: "Traduction bas\xE9e sur l'API Baidu",
  SETTING_NIT_OPENAI_NAME: "OPENAI",
  SETTING_NIT_OPENAI_DESC: "Traduction bas\xE9e sur l'API OPENAI",
  SETTING_NIT_OPENAI_TIP_NAME: "Indice",
  SETTING_NIT_OPENAI_TIP_DESC: "C'est-\xE0-dire le prompt, utilis\xE9 pour guider l'AI dans la traduction, ce plugin fournit des mots indicatifs par d\xE9faut, mais vous pouvez les ajuster si n\xE9cessaire.",
  SETTING_NIT_OPENAI_TIP_PLACEHOLDER: "Mots indicatifs",
  SETTING_MORE_TITLE_NAME: "Plus de fonctionnalit\xE9s",
  SETTING_Author_NAME: "Signature de la traduction",
  SETTING_Author_DESC: "Ajouter automatiquement la signature de l'auteur lors de la g\xE9n\xE9ration de la traduction",
  SETTING_Author_PLACEHOLDER: "Signature",
  SETTING_OPEN_SETTING_NAME: "Ouvrir les param\xE8tres",
  SETTING_OPEN_SETTING_DESC: "Une fois activ\xE9, un bouton de saut vers les param\xE8tres appara\xEEtra dans la page du plugin",
  SETTING_EDITOR_NAME: "\xC9diteur de traduction",
  SETTING_EDITOR_DESC: "Activer/d\xE9sactiver la fonctionnalit\xE9 de l'\xE9diteur de traduction int\xE9gr\xE9",
  SETTING_CLOUD_COLLABORATION_NAME: "Collaboration cloud",
  SETTING_CLOUD_COLLABORATION_DESC: "Une fois cette fonction activ\xE9e, vous pouvez soumettre votre traduction, demander une traduction pour un plugin sp\xE9cifique, marquer si un plugin a une traduction chinoise int\xE9gr\xE9e. Rejoignez notre communaut\xE9 et contribuez !",
  SETTING_CLOUD_COLLABORATION_TOKEN_NAME: "Jeton Gitee",
  SETTING_CLOUD_COLLABORATION_TOKEN_DESC: "Veuillez fournir votre jeton pour prendre en charge les soumissions group\xE9es (facultatif)",
  SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER: "Jeton",
  SETTING_RE_TITLE_NAME: "Configuration des mod\xE8les de correspondance",
  SETTING_RE_MODE_NAME: "Mode",
  SETTING_RE_MODE_DESC: "Le mode de correspondance actuellement utilis\xE9",
  SETTING_RE_FLAGS_NAME: "Drapeaux",
  SETTING_RE_FLAGS_DESC: "Drapeaux pour l'expression rationnelle",
  SETTING_RE_FLAGS_PLACEHOLDER: "Drapeaux",
  SETTING_RE_LENGTH_NAME: "Longueur",
  SETTING_RE_LENGTH_DESC: "Limite la longueur maximale que re peut correspondre",
  SETTING_RE_EDIT_MODE_NAME: "\xC9dition du mode",
  SETTING_RE_EDIT_MODE_DESC: "Ajouter et supprimer des modes de correspondance des expressions rationnelles",
  SETTING_RE_EDIT_MODE_PLACEHOLDER: "Mode",
  SETTING_RE_EDIT_INSERT_BUTTON_TEXT: "Ajouter",
  SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A: "Le nom du mode RE est en double, impossible \xE0 ajouter",
  SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A: "\xC9chec de la suppression",
  SETTING_RE_EDIT_ITEM_NAME: "\xC9dition des donn\xE9es",
  SETTING_RE_EDIT_ITEM_DESC: "Ajouter et supprimer des donn\xE9es de mode d'expression rationnelle",
  SETTING_RE_EDIT_ITEM_PLACEHOLDER: "RegExp",
  SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT: "Ajouter"
};

// src/lang/inxdex.ts
var localeMap = {
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default,
  "en-gb": en_us_default,
  "ru-ru": ru_ru_default,
  "ja-jp": ja_jp_default,
  "fr-fr": fr_fr_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || zh_cn_default[str];
}

// src/settings/ui/i18n-language.ts
var I18nLanguage = class extends BaseSetting {
  main() {
    const i18nLanguage = new import_obsidian2.Setting(this.containerEl);
    i18nLanguage.setName(t("SETTING_LANGUAGE_NAME"));
    i18nLanguage.setDesc(t("SETTING_LANGUAGE_DESC"));
    i18nLanguage.addDropdown(
      (cb) => cb.addOptions(LANGUAGES).setValue(this.settings.I18N_LANGUAGE).onChange(async (value) => {
        this.settings.I18N_LANGUAGE = value;
        await this.i18n.saveSettings();
      })
    );
  }
};

// src/settings/ui/i18n-mod-ldt.ts
var import_obsidian3 = require("obsidian");
var I18nModLDT = class extends BaseSetting {
  main() {
    const i18nModLDT = new import_obsidian3.Setting(this.containerEl);
    i18nModLDT.setName(t("SETTING_LDT_NAME"));
    i18nModLDT.setDesc("\u662F\u5426\u5F00\u542F\u672C\u5730\u6587\u4EF6\u6A21\u5F0F");
    i18nModLDT.addButton((cb) => {
      cb.setButtonText(this.settings.I18N_MODE_LDT ? "\u5173\u95ED" : "\u5F00\u542F");
      cb.onClick(() => {
        this.settings.I18N_MODE_LDT = !this.settings.I18N_MODE_LDT;
        this.i18n.saveSettings();
        this.settingTab.ldtDisplay();
      });
      cb.setClass("i18n-button");
      this.settings.I18N_MODE_LDT ? cb.setClass("i18n-button--danger") : cb.setClass("i18n-button--primary");
    });
    const i18nAutomaticUpdate = new import_obsidian3.Setting(this.containerEl);
    i18nAutomaticUpdate.setName(t("SETTING_LDT_AUTOMATIC_UPDATE_NAME"));
    i18nAutomaticUpdate.setDesc(t("SETTING_LDT_AUTOMATIC_UPDATE_DESC"));
    i18nAutomaticUpdate.addToggle(
      (cb) => cb.setValue(this.settings.I18N_AUTOMATIC_UPDATE).onChange(() => {
        this.settings.I18N_AUTOMATIC_UPDATE = !this.settings.I18N_AUTOMATIC_UPDATE;
        this.i18n.saveSettings();
        this.settingTab.ldtDisplay();
      }).toggleEl.addClass("i18n-checkbox")
    );
    const i18nIncrementalExtraction = new import_obsidian3.Setting(this.containerEl);
    i18nIncrementalExtraction.setName("\u589E\u91CF\u63D0\u53D6");
    i18nIncrementalExtraction.setDesc("\u589E\u91CF\u63D0\u53D6\u529F\u80FD\u5141\u8BB8\u60A8\u5728\u672C\u5730\u5DF2\u6709\u8BD1\u6587\u7684\u57FA\u7840\u4E0A\uFF0C\u7EE7\u7EED\u63D0\u53D6\u5E76\u81EA\u52A8\u5408\u5E76\u65B0\u8BD1\u6587\uFF0C\u5B9E\u73B0\u8BD1\u6587\u7684\u6301\u7EED\u66F4\u65B0\u4E0E\u7D2F\u79EF\u3002");
    i18nIncrementalExtraction.addToggle(
      (cb) => cb.setValue(this.settings.I18N_INCREMENTAL_EXTRACTION).onChange(() => {
        this.settings.I18N_INCREMENTAL_EXTRACTION = !this.settings.I18N_INCREMENTAL_EXTRACTION;
        this.i18n.saveSettings();
        this.settingTab.ldtDisplay();
      }).toggleEl.addClass("i18n-checkbox")
    );
    const i18nNameTranslation = new import_obsidian3.Setting(this.containerEl);
    i18nNameTranslation.setName("\u540D\u79F0\u7FFB\u8BD1");
    i18nNameTranslation.setDesc("\u542F\u7528\u63D2\u4EF6\u540D\u79F0\u7FFB\u8BD1\u529F\u80FD\uFF0C\u5C06\u5728\u63D2\u4EF6\u540E\u6DFB\u52A0[]\u4EE5\u5C55\u793A\u5176\u7FFB\u8BD1\u540D\u79F0(\u63D2\u4EF6\u8BBE\u7F6E\u754C\u9762\u5237\u65B0\u64CD\u4F5C\u4F1A\u5BFC\u81F4\u5F53\u524D\u7FFB\u8BD1\u5931\u6548\uFF0C\u9700\u91CD\u542Fob\u91CD\u65B0\u52A0\u8F7D\u7FFB\u8BD1)");
    i18nNameTranslation.addText(
      (cb) => cb.setValue(this.settings.I18N_NAME_TRANSLATION_PREFIX).onChange((value) => {
        this.settings.I18N_NAME_TRANSLATION_PREFIX = value;
        this.i18n.reloadPluginsName();
        this.i18n.saveSettings();
      }).inputEl.addClass("i18n-name__input")
    );
    i18nNameTranslation.addText(
      (cb) => cb.setValue(this.settings.I18N_NAME_TRANSLATION_SUFFIX).onChange((value) => {
        this.settings.I18N_NAME_TRANSLATION_SUFFIX = value;
        this.i18n.reloadPluginsName();
        this.i18n.saveSettings();
      }).inputEl.addClass("i18n-name__input")
    );
    i18nNameTranslation.addToggle(
      (cb) => cb.setValue(this.settings.I18N_NAME_TRANSLATION).onChange(() => {
        this.settings.I18N_NAME_TRANSLATION = !this.settings.I18N_NAME_TRANSLATION;
        this.settings.I18N_NAME_TRANSLATION ? this.i18n.trenslatorPluginsName() : this.i18n.restorePluginsName();
        this.i18n.saveSettings();
        this.settingTab.ldtDisplay();
      }).toggleEl.addClass("i18n-checkbox")
    );
  }
};

// src/settings/ui/i18n-mod-ndt.ts
var import_obsidian4 = require("obsidian");
var I18nModNDT = class extends BaseSetting {
  main() {
    const i18nModNDT = new import_obsidian4.Setting(this.containerEl);
    i18nModNDT.setName(`${t("SETTING_NDT_NAME")}`);
    i18nModNDT.setDesc("\u662F\u5426\u5F00\u542F\u4E91\u7AEF\u6587\u4EF6\u6A21\u5F0F\u3002");
    i18nModNDT.addButton((cb) => {
      cb.setButtonText(this.settings.I18N_MODE_NDT ? "\u5173\u95ED" : "\u5F00\u542F");
      cb.onClick(async () => {
        this.settings.I18N_MODE_NDT = !this.settings.I18N_MODE_NDT;
        await this.i18n.saveSettings();
        await this.i18n.ignoreCache();
        await this.i18n.directoryCache();
        this.settingTab.ndtDisplay();
      });
      cb.setClass("i18n-button");
      this.settings.I18N_MODE_NDT ? cb.setClass("i18n-button--danger") : cb.setClass("i18n-button--primary");
    });
    const i18nIgnore = new import_obsidian4.Setting(this.containerEl);
    i18nIgnore.setName(t("SETTING_NDT_IGNORE_NAME"));
    i18nIgnore.setDesc(t("SETTING_NDT_IGNORE_DESC"));
    i18nIgnore.addToggle(
      (cb) => cb.setValue(this.settings.I18N_IGNORE).onChange(async () => {
        this.settings.I18N_IGNORE = !this.settings.I18N_IGNORE;
        this.i18n.saveSettings();
        await this.i18n.ignoreCache();
        this.settingTab.ndtDisplay();
      }).toggleEl.addClass("i18n-checkbox")
    );
    const i18nNdtApi = new import_obsidian4.Setting(this.containerEl);
    i18nNdtApi.setName(t("SETTING_NDT_APIS_NAME"));
    i18nNdtApi.setDesc(t("SETTING_NDT_APIS_DESC"));
    i18nNdtApi.addText(
      (cb) => cb.setPlaceholder("owner").setValue(this.settings.I18N_GITEE_OWNER).onChange((value) => {
        this.settings.I18N_GITEE_OWNER = value;
      })
    );
    i18nNdtApi.addText(
      (cb) => cb.setPlaceholder("repo").setValue(this.settings.I18N_GITEE_REPO).onChange((value) => {
        this.settings.I18N_GITEE_REPO = value;
      })
    );
  }
};

// src/settings/ui/i18n-mod-nit.ts
var import_obsidian7 = require("obsidian");

// src/api.ts
var import_crypto = require("crypto");
var import_obsidian6 = require("obsidian");

// src/utils.ts
var fs = __toESM(require_lib());
var import_obsidian5 = require("obsidian");
var import_zlib = require("zlib");
var State = class {
  constructor(path5) {
    this.stateJson = { "type": "", "state": false, "pluginVersion": "", "translationVersion": 0 };
    this.path = path5;
    this.isStateDoc = fs.pathExistsSync(this.path);
    this.stateObj = this.isStateDoc ? fs.readJsonSync(this.path) : void 0;
  }
  getType() {
    return this.stateObj.type;
  }
  getState() {
    return this.stateObj.state;
  }
  getPluginVersion() {
    return this.stateObj.pluginVersion;
  }
  getTranslationVersion() {
    return this.stateObj.translationVersion;
  }
  setType(v) {
    this.stateObj.type = v;
    fs.outputJsonSync(this.path, this.stateObj);
  }
  setState(v) {
    this.stateObj.state = v;
    fs.outputJsonSync(this.path, this.stateObj);
  }
  setPluginVersion(v) {
    this.stateObj.pluginVersion = v;
    fs.outputJsonSync(this.path, this.stateObj);
  }
  setTranslationVersion(v) {
    this.stateObj.translationVersion = v;
    fs.outputJsonSync(this.path, this.stateObj);
  }
  // 增
  insert() {
    try {
      this.stateObj = this.stateJson;
      this.isStateDoc = true;
      fs.outputJsonSync(this.path, this.stateJson);
    } catch (e) {
      NoticeOperationResult("\u65B0\u589E\u72B6\u6001\u6587\u4EF6", false, e);
    }
  }
  // 删
  delete() {
    try {
      this.isStateDoc = false;
      fs.removeSync(this.path);
    } catch (e) {
      NoticeOperationResult("\u5220\u9664\u72B6\u6001\u6587\u4EF6", false, e);
    }
  }
  // 改
  update(t2, s, p, v) {
    const state = { "type": t2, "state": s, "pluginVersion": p, "translationVersion": v };
    this.stateObj = state;
    try {
      fs.outputJsonSync(this.path, state);
    } catch (e) {
      NoticeOperationResult("\u4FEE\u6539\u72B6\u6001\u6587\u4EF6", false, e);
    }
  }
  // [重置]
  reset() {
    try {
      fs.outputJsonSync(this.path, this.stateJson);
      console.log(this.stateJson);
    } catch (e) {
      NoticeOperationResult("\u91CD\u7F6E\u72B6\u6001\u6587\u4EF6", false, e);
    }
  }
};
function generateTranslation(pluginVersion, manifestJSON, mainStr, reLength, regexps, flags) {
  const description = manifestJSON.description;
  const translationJson = {
    "manifest": {
      "translationVersion": Date.now(),
      "pluginVersion": pluginVersion
    },
    "description": {
      "original": description,
      "translation": description
    },
    "dict": {}
  };
  for (let i = 0; i < regexps.length; i++) {
    const temp_array = mainStr.match(new RegExp(regexps[i], flags));
    if (temp_array != null) {
      for (const i2 in temp_array)
        if (temp_array[i2].length <= reLength)
          translationJson.dict[temp_array[i2]] = temp_array[i2];
    }
  }
  return translationJson;
}
function compareVersions(version1, version2) {
  const v1 = version1.split(".").map(Number);
  const v2 = version2.split(".").map(Number);
  const len = Math.max(v1.length, v2.length);
  for (let i = 0; i < len; i++) {
    const num1 = v1[i] || 0;
    const num2 = v2[i] || 0;
    if (num1 > num2) {
      return 1;
    } else if (num1 < num2) {
      return -1;
    }
  }
  return 0;
}
function NoticePrimary(prefix, text, duration = 4e3) {
  const hasClass = document.body ? document.body.classList.contains("theme-dark") : false;
  const notice = new import_obsidian5.Notice(`[${prefix}] ${text}`, duration);
  notice.noticeEl.addClass("notice__container", `notice__${hasClass ? "dark" : "light"}--primary`);
  return notice;
}
function NoticeSuccess(prefix, text, duration = 4e3) {
  const hasClass = document.body ? document.body.classList.contains("theme-dark") : false;
  const notice = new import_obsidian5.Notice(`[${prefix}] ${text}`, duration);
  notice.noticeEl.addClass("notice__container", `notice__${hasClass ? "dark" : "light"}--success`);
  return notice;
}
function NoticeInfo(prefix, text, duration = 4e3) {
  const hasClass = document.body ? document.body.classList.contains("theme-dark") : false;
  const notice = new import_obsidian5.Notice(`[${prefix}] ${text}`, duration);
  notice.noticeEl.addClass("notice__container", `notice__${hasClass ? "dark" : "light"}--info`);
  return notice;
}
function NoticeError(prefix, text, duration = 1e4) {
  const hasClass = document.body ? document.body.classList.contains("theme-dark") : false;
  const notice = new import_obsidian5.Notice(`[${prefix}] ${text}`, duration);
  notice.noticeEl.addClass("notice__container", `notice__${hasClass ? "dark" : "light"}--error`);
  return notice;
}
function NoticeOperationResult(prefix, isSuccess, text = "", duration = 4e3) {
  const hasClass = document.body ? document.body.classList.contains("theme-dark") : false;
  if (isSuccess) {
    if (text != "") {
      const notice = new import_obsidian5.Notice(`[${prefix}] ${t("PUBLIC_SUCCESS")}
${text}`, duration);
      notice.noticeEl.addClass(`notice__${hasClass ? "dark" : "light"}--success`);
      return notice;
    } else {
      const notice = new import_obsidian5.Notice(`[${prefix}] ${t("PUBLIC_SUCCESS")}`, duration);
      notice.noticeEl.addClass("notice__container", `notice__${hasClass ? "dark" : "light"}--success`);
      return notice;
    }
  } else {
    const notice = new import_obsidian5.Notice(`[${prefix}] ${t("PUBLIC_FAILURE")}
${text}`, 1e4);
    notice.noticeEl.addClass("notice__container", `notice__${hasClass ? "dark" : "light"}--error`);
    return notice;
  }
}
var restoreTranslate = () => {
  const event = new KeyboardEvent("keydown", { key: "a", keyCode: 65, which: 65, code: "KeyA", altKey: true, bubbles: true });
  document.dispatchEvent(event);
};
var clearStorage = async () => {
  const prefix = "immersiveTranslate";
  const keys = Object.keys(window.localStorage).filter((v) => v.startsWith(prefix));
  keys.forEach((v) => {
    delete window.localStorage[v];
  });
  const dbPrefix = "immersive-translate";
  await window.indexedDB.databases().then((dbList) => {
    var _a;
    (_a = dbList == null ? void 0 : dbList.filter((v) => {
      var _a2;
      return (_a2 = v.name) == null ? void 0 : _a2.startsWith(dbPrefix);
    })) == null ? void 0 : _a.forEach((v) => {
      v.name && window.indexedDB.deleteDatabase(v.name);
    });
  }).catch(() => {
  });
  const windowKey = "mmersiveTranslate";
  const windowKeys = Object.keys(window).filter((v) => v.indexOf(windowKey) !== -1);
  windowKeys.forEach((v) => {
    typeof window[v] !== "undefined" && delete window[v];
  });
};
var formatTimestamp = (timestamp) => {
  const date = new Date(timestamp);
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const hours = String(date.getHours()).padStart(2, "0");
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const formattedDate = `${month}\u6708${day}\u65E5 ${hours}:${minutes}`;
  return formattedDate;
};
var deflate = (str) => {
  return (0, import_zlib.deflateSync)(str).toString("base64");
};
var inflate = (str) => {
  return (0, import_zlib.inflateSync)(Buffer.from(str, "base64")).toString();
};
var isValidTranslationFormat = (json) => {
  return json !== void 0 && "manifest" in json && "translationVersion" in json.manifest && "pluginVersion" in json.manifest && "description" in json && "original" in json.description && "translation" in json.description && "dict" in json;
};

// src/api.ts
var API = class {
  constructor(i18n) {
    this.i18n = i18n;
    this.settings = this.i18n.settings;
  }
  async version(version) {
    const RequestUrlParam2 = {
      url: "https://gitee.com/zero--two/obsidian-i18n-translation/raw/master/version.json",
      method: "GET"
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      if (version !== response.json.version) {
        NoticePrimary("I18N", `\u53D1\u73B0\u65B0\u7248\u672C(${response.json.version})
${response.json.content}`);
      }
    } catch (error) {
      NoticeError("I18N", `\u7F51\u7EDC\u5F02\u5E38(\u65E0\u6CD5\u83B7\u53D6\u6700\u65B0\u7248)
${error}`);
    }
  }
  async submitUrl() {
    const RequestUrlParam2 = {
      url: "https://gitee.com/zero--two/obsidian-i18n-translation/raw/master/version.json",
      method: "GET"
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return response.json.submit;
    } catch (error) {
      NoticeError("I18N", `\u7F51\u7EDC\u5F02\u5E38(\u5982\u679C\u6CA1\u6709\u81EA\u5B9A\u4E49token\u5219\u65E0\u6CD5\u4F7F\u7528\u63D0\u4EA4\u529F\u80FD)
${error}`);
      return void 0;
    }
  }
  async getMark() {
    const RequestUrlParam2 = {
      url: `https://gitee.com/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/raw/master/translation/mark/${this.settings.I18N_LANGUAGE}.json`,
      method: "GET"
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      return { "state": false, "data": [] };
    }
  }
  async baiduAPI(s) {
    const BAIDU = this.i18n.settings.I18N_NIT_APIS.BAIDU;
    const md5 = (0, import_crypto.createHash)("md5");
    const from = BAIDU.FROM;
    const to = BAIDU.TO;
    const appid = BAIDU.APP_ID;
    const key = BAIDU.KEY;
    const salt = Math.round(Math.random() * 10);
    const sign = md5.update(`${appid}${s}${salt}${key}`).digest("hex");
    const RequestUrlParam2 = {
      url: `https://fanyi-api.baidu.com/api/trans/vip/translate?q=${s}&from=${from}&to=${to}&appid=${appid}&salt=${salt}&sign=${sign}`,
      method: "GET"
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      if (response.json.hasOwnProperty("error_code")) {
        const error_code = response.json.error_code;
        NoticeError("\u767E\u5EA6", `${error_code}
${BAIDU_ERROR_CODE[error_code]}`);
        return { "state": false, "data": "" };
      }
      return { "state": true, "data": response.json["trans_result"][0]["dst"] };
    } catch (error) {
      return { "state": false, "data": "" };
    }
  }
  async openAI(plugin, q) {
    try {
      const RequestUrlParam2 = {
        url: `${this.settings.I18N_NIT_OPENAI_URL}/v1/chat/completions`,
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${this.settings.I18N_NIT_OPENAI_KEY}`
        },
        body: JSON.stringify({
          model: this.settings.I18N_NIT_OPENAI_MODEL,
          messages: [
            { role: "user", content: this.settings.I18N_NIT_OPENAI_TIPS },
            { role: "user", content: q }
          ],
          temperature: 0.7
        })
      };
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      if (response.json && response.json.choices && response.json.choices.length > 0) {
        return response.json.choices[0].message;
      }
      return null;
    } catch (error) {
      NoticeError("\u9519\u8BEF", error);
      return null;
    }
  }
  openAITest() {
    const RequestUrlParam2 = {
      url: `${this.settings.I18N_NIT_OPENAI_URL}/v1/chat/completions`,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.settings.I18N_NIT_OPENAI_KEY}`
      },
      body: JSON.stringify({
        model: this.settings.I18N_NIT_OPENAI_MODEL,
        messages: [
          { role: "user", content: "i18n" }
        ],
        temperature: 0.7
      })
    };
    const response = (0, import_obsidian6.requestUrl)(RequestUrlParam2);
    response.then(() => {
      NoticeOperationResult("OpenAI", true);
    }).catch((error) => {
      NoticeOperationResult("OpenAI", false, error);
    });
  }
  async submite(title, body, label) {
    try {
      let token;
      if (this.settings.I18N_SUBMIT_URL != "") {
        token = this.settings.I18N_SUBMIT_URL;
      } else {
        if (this.i18n.tempSubmitUrl != void 0) {
          token = this.i18n.tempSubmitUrl;
        } else {
          NoticeOperationResult("\u63D0\u4EA4", false, `\u4EE4\u724C\u6709\u8BEF`);
        }
      }
      const RequestUrlParam2 = {
        url: `https://gitee.com/api/v5/repos/zero--two/issues`,
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Charset": "UTF-8"
        },
        body: JSON.stringify({
          access_token: token,
          repo: "obsidian-i18n-translation",
          title,
          body,
          labels: label
        })
      };
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      if (response.json.number)
        return response.json.number;
      return null;
    } catch (error) {
      NoticeOperationResult("\u63D0\u4EA4\u64CD\u4F5C", false, `${error}`);
      return null;
    }
  }
  async giteeGetDirectory() {
    const RequestUrlParam2 = {
      url: `https://gitee.com/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/raw/master/translation/directory/${this.settings.I18N_LANGUAGE}.json`,
      method: "GET"
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      return { "state": false, "data": {} };
    }
  }
  async giteeGetTranslation(id, version) {
    try {
      const RequestUrlParam2 = {
        url: `https://gitee.com/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/raw/master/translation/dict/${id}/${this.settings.I18N_LANGUAGE}/${version}.json`,
        method: "GET"
      };
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  async giteePutTranslation(path5, content, sha, message) {
    const RequestUrlParam2 = {
      url: `https://gitee.com/api/v5/repos/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/contents/${path5}`,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        "Charset": "UTF-8"
      },
      body: JSON.stringify({
        access_token: this.i18n.settings.I18N_ADMIN_TOKEN,
        owner: this.i18n.settings.I18N_GITEE_OWNER,
        repo: this.i18n.settings.I18N_GITEE_REPO,
        content,
        sha,
        message
      })
    };
    console.log(RequestUrlParam2);
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  async giteeGetSha(path5) {
    try {
      const RequestUrlParam2 = {
        url: `https://gitee.com/api/v5/repos/${this.i18n.settings.I18N_GITEE_OWNER}/${this.i18n.settings.I18N_GITEE_REPO}/contents/${path5}`,
        method: "GET",
        body: JSON.stringify({
          access_token: this.i18n.settings.I18N_ADMIN_TOKEN,
          owner: this.i18n.settings.I18N_GITEE_OWNER,
          repo: this.i18n.settings.I18N_GITEE_REPO,
          path: path5
        })
      };
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  async giteeGetIssue(number) {
    const RequestUrlParam2 = {
      url: `https://gitee.com/api/v5/repos/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/issues/${number}`,
      method: "GET"
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  async giteeGetAllIssue() {
    const RequestUrlParam2 = {
      url: `https://gitee.com/api/v5/repos/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/issues`,
      method: "GET"
    };
    console.log(RequestUrlParam2);
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  async giteePatchIssue(number, state) {
    const RequestUrlParam2 = {
      url: `https://gitee.com/api/v5/repos/${this.settings.I18N_GITEE_OWNER}/issues/${number}`,
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "Charset": "UTF-8"
      },
      body: JSON.stringify({
        access_token: this.i18n.settings.I18N_ADMIN_TOKEN,
        owner: this.i18n.settings.I18N_GITEE_OWNER,
        repo: this.i18n.settings.I18N_GITEE_REPO,
        number,
        state
      })
    };
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  async giteeCreateTranslation(path5, content, message) {
    let access_token;
    if (this.settings.I18N_SUBMIT_URL != "") {
      access_token = this.settings.I18N_ADMIN_TOKEN;
    } else {
      NoticeOperationResult("\u5BA1\u6838\u9762\u677F", false, "\u672A\u627E\u5230Token");
    }
    const RequestUrlParam2 = {
      url: `https://gitee.com/api/v5/repos/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/contents/${path5}`,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "charset": "UTF-8"
      },
      body: JSON.stringify({
        access_token,
        content,
        message
      })
    };
    console.log(RequestUrlParam2);
    try {
      const response = await (0, import_obsidian6.requestUrl)(RequestUrlParam2);
      return { "state": true, "data": response.json };
    } catch (error) {
      console.log(error);
      return { "state": false, "data": "" };
    }
  }
  // public async a() {
  // 	const RequestUrlParam: RequestUrlParam = {
  // 		url: `https://gitee.com/api/v5/repos/${this.settings.I18N_GITEE_OWNER}/${this.settings.I18N_GITEE_REPO}/contents/zh-cn/ignore.json`,
  // 		method: 'PUT',
  // 		headers: {
  // 			'Content-Type': 'application/json',
  // 			'Charset': 'UTF-8'
  // 		},
  // 		body: JSON.stringify({
  // 			access_token: this.i18n.settings.I18N_ADMIN_TOKEN,
  // 			owner: this.i18n.settings.I18N_GITEE_OWNER,
  // 			repo: this.i18n.settings.I18N_GITEE_REPO,
  // 			content: 'ewogICAgInZlcnNpb24iOiAiMS40LjciLAogICAgImNvbnRlbnQiOiAi5L+u5aSNIOS4tOaXtuato+WImeS9jee9rumXrumimFxu5paw5aKeIOWGhee9ruayiea1uOW8j+e/u+ivkSIsCiAgICAic3VibWl0IjogIk1XWXdNRGhqTm1FNE9UUTNaakZrWlRFNE1tSTFPREJoTnpoaE9UZGpPRFU9Igp9',
  // 			sha: '28d54ba8706c28e3309a9d97bf47b64140c05427',
  // 			message: 'message'
  // 		})
  // 	};
  // 	console.log(RequestUrlParam);
  // 	try {
  // 		const response = await requestUrl(RequestUrlParam);
  // 		return { 'state': true, 'data': response.json };
  // 	} catch (error) {
  // 		console.log(error)
  // 		return { 'state': false, 'data': '' };
  // 	}
  // }
};

// src/settings/ui/i18n-mod-nit.ts
var I18nModeNIT = class extends BaseSetting {
  main() {
    const api = new API(this.i18n);
    const i18nModeNIT = new import_obsidian7.Setting(this.containerEl);
    i18nModeNIT.setName(t("SETTING_NIT_NAME"));
    i18nModeNIT.setDesc("\u662F\u5426\u5F00\u542F\u673A\u5668\u7FFB\u8BD1\u6A21\u5F0F");
    i18nModeNIT.addButton((cb) => {
      cb.setButtonText(this.settings.I18N_MODE_NIT ? "\u5173\u95ED" : "\u5F00\u542F");
      cb.onClick(async () => {
        this.settings.I18N_MODE_NIT = !this.settings.I18N_MODE_NIT;
        this.i18n.saveSettings();
        this.settingTab.nitDisplay();
      });
      cb.setClass("i18n-button");
      this.settings.I18N_MODE_NIT ? cb.setClass("i18n-button--danger") : cb.setClass("i18n-button--primary");
    });
    const i18nNITAPI = new import_obsidian7.Setting(this.containerEl);
    i18nNITAPI.setName(t("SETTING_NIT_APIS_NAME"));
    i18nNITAPI.setDesc(t("SETTING_NIT_APIS_DESC"));
    i18nNITAPI.addDropdown(
      (cb) => cb.addOptions(API_TYPES).setValue(this.settings.I18N_NIT_API).onChange((value) => {
        this.settings.I18N_NIT_API = value;
        this.i18n.saveSettings();
        this.settingTab.nitDisplay();
      })
    );
    i18nNITAPI.addButton(
      (cb) => cb.setButtonText(t("SETTING_NIT_TEST_BUTTON_TEXT")).onClick(async () => {
        switch (this.settings.I18N_NIT_API) {
          case "BAIDU":
            if ((await api.baiduAPI("i18n")).state)
              NoticeOperationResult("\u767E\u5EA6", true);
            break;
          case "OPENAI":
            api.openAITest();
            break;
          default:
            break;
        }
      }).setClass("i18n-button").setClass("i18n-button--primary")
    );
    const i18nModeNITInterval = new import_obsidian7.Setting(this.containerEl);
    i18nModeNITInterval.setName(t("SETTING_NIT_INTERVAL_NAME"));
    i18nModeNITInterval.setDesc(t("SETTING_NIT_INTERVAL_DESC"));
    i18nModeNITInterval.addSlider(
      (cb) => cb.setDynamicTooltip().setLimits(0, 1e3, 50).setValue(this.settings.I18N_NIT_API_INTERVAL).onChange((value) => {
        this.settings.I18N_NIT_API_INTERVAL = value;
        this.i18n.saveSettings();
      })
    );
  }
};

// src/settings/ui/i18n-mod-imt.ts
var import_obsidian8 = require("obsidian");
var I18nModIMT = class extends BaseSetting {
  main() {
    const i18nModIMT = new import_obsidian8.Setting(this.containerEl);
    i18nModIMT.setName("\u6C89\u6D78\u5F0F\u7FFB\u8BD1");
    i18nModIMT.setDesc("\u662F\u5426\u5F00\u542F\u6C89\u6D78\u5F0F\u7FFB\u8BD1\u6A21\u5F0F");
    i18nModIMT.addButton(
      (cb) => cb.setButtonText("\u91CD\u542F").onClick(() => {
        document.location.reload();
      }).buttonEl.addClasses(["i18n-button", "i18n-button--primary"])
    );
    i18nModIMT.addButton((cb) => {
      cb.setButtonText(this.settings.I18N_MODE_IMT ? "\u5173\u95ED" : "\u5F00\u542F");
      cb.onClick(() => {
        this.settings.I18N_MODE_IMT = !this.settings.I18N_MODE_IMT;
        if (!this.settings.I18N_MODE_IMT)
          document.location.reload();
        this.i18n.saveSettings();
        this.settingTab.imtDisplay();
        this.settings.I18N_MODE_IMT ? this.i18n.activateIMT() : this.i18n.enableIMT();
      });
      cb.setClass("i18n-button");
      this.settings.I18N_MODE_IMT ? cb.setClass("i18n-button--danger") : cb.setClass("i18n-button--primary");
    });
    new import_obsidian8.Setting(this.containerEl).setName("\u6307\u5B9A\u7FFB\u8BD1\u8303\u56F4").setHeading();
    const selectors = new import_obsidian8.Setting(this.containerEl);
    selectors.setName("\u5339\u914D\u5143\u7D20");
    selectors.setDesc("\u4FEE\u6539\u540E\u8BF7\u91CD\u542F\u6C89\u6D78\u5F0F\u7FFB\u8BD1\u529F\u80FD");
    selectors.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.selectors ? this.settings.I18N_IMT_CONFIG.selectors.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.selectors = v.split(",");
        await this.i18n.saveSettings();
        window.immersiveTranslateConfig = { "pageRule": this.settings.I18N_IMT_CONFIG };
        console.log(window.immersiveTranslateConfig);
      })
    );
    const excludeSelectors = new import_obsidian8.Setting(this.containerEl);
    excludeSelectors.setName("\u6392\u9664\u5143\u7D20");
    excludeSelectors.setDesc("\u4EC5\u7FFB\u8BD1\u5339\u914D\u5230\u7684\u5143\u7D20");
    excludeSelectors.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.excludeSelectors ? this.settings.I18N_IMT_CONFIG.excludeSelectors.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.excludeSelectors = v.split(",");
        await this.i18n.saveSettings();
        window.immersiveTranslateConfig = { "pageRule": this.settings.I18N_IMT_CONFIG };
        console.log(window.immersiveTranslateConfig);
      })
    );
    const excludeTags = new import_obsidian8.Setting(this.containerEl);
    excludeTags.setName("\u6392\u9664Tags");
    excludeTags.setDesc("\u6392\u9664Tags\uFF0C\u4E0D\u7FFB\u8BD1\u5339\u914D\u7684Tag");
    excludeTags.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.excludeTags ? this.settings.I18N_IMT_CONFIG.excludeTags.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.excludeTags = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    new import_obsidian8.Setting(this.containerEl).setName("\u8FFD\u52A0\u7FFB\u8BD1\u8303\u56F4").setHeading();
    const additionalSelectors = new import_obsidian8.Setting(this.containerEl);
    additionalSelectors.setName("\u8FFD\u52A0\u7FFB\u8BD1\u8303\u56F4");
    additionalSelectors.setDesc("\u8FFD\u52A0\u7FFB\u8BD1\u8303\u56F4\u3002\u5728\u667A\u80FD\u7FFB\u8BD1\u7684\u533A\u57DF\uFF0C\u8FFD\u52A0\u7FFB\u8BD1\u4F4D\u7F6E\u3002");
    additionalSelectors.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.additionalSelectors ? this.settings.I18N_IMT_CONFIG.additionalSelectors.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.additionalSelectors = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    const additionalExcludeSelectors = new import_obsidian8.Setting(this.containerEl);
    additionalExcludeSelectors.setName("\u8FFD\u52A0\u6392\u9664\u5143\u7D20");
    additionalExcludeSelectors.setDesc("\u8FFD\u52A0\u6392\u9664\u5143\u7D20\uFF0C\u8BA9\u667A\u80FD\u7FFB\u8BD1\u4E0D\u7FFB\u8BD1\u7279\u5B9A\u4F4D\u7F6E\u3002");
    additionalExcludeSelectors.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.additionalExcludeSelectors ? this.settings.I18N_IMT_CONFIG.additionalExcludeSelectors.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.additionalExcludeSelectors = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    const additionalExcludeTags = new import_obsidian8.Setting(this.containerEl);
    additionalExcludeTags.setName("\u8FFD\u52A0\u6392\u9664Tags");
    additionalExcludeTags.setDesc("\u8FFD\u52A0\u6392\u9664Tags");
    additionalExcludeTags.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.additionalExcludeTags ? this.settings.I18N_IMT_CONFIG.additionalExcludeTags.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.additionalExcludeTags = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    new import_obsidian8.Setting(this.containerEl).setName("\u4FDD\u6301\u539F\u6837").setHeading();
    const stayOriginalSelectors = new import_obsidian8.Setting(this.containerEl);
    stayOriginalSelectors.setName("\u5339\u914D\u7684\u5143\u7D20\u5C06\u4FDD\u6301\u539F\u6837");
    stayOriginalSelectors.setDesc("\u5339\u914D\u7684\u5143\u7D20\u5C06\u4FDD\u6301\u539F\u6837\u3002\u5E38\u7528\u4E8E\u8BBA\u575B\u7F51\u7AD9\u7684\u6807\u7B7E\u3002");
    stayOriginalSelectors.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.stayOriginalSelectors ? this.settings.I18N_IMT_CONFIG.stayOriginalSelectors.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.stayOriginalSelectors = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    const stayOriginalTags = new import_obsidian8.Setting(this.containerEl);
    stayOriginalTags.setName("\u5339\u914D\u5230\u7684Tag\u5C06\u4FDD\u6301\u539F\u6837");
    stayOriginalTags.setDesc("\u5339\u914D\u5230\u7684Tag\u5C06\u4FDD\u6301\u539F\u6837\uFF0C\u6BD4\u5982 `code`");
    stayOriginalTags.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.stayOriginalTags ? this.settings.I18N_IMT_CONFIG.stayOriginalTags.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.stayOriginalTags = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    new import_obsidian8.Setting(this.containerEl).setName("\u533A\u57DF\u7FFB\u8BD1").setHeading();
    const atomicBlockSelectors = new import_obsidian8.Setting(this.containerEl);
    atomicBlockSelectors.setName("\u533A\u57DF\u9009\u62E9\u5668");
    atomicBlockSelectors.setDesc("\u5339\u914D\u7684\u5143\u7D20\u5C06\u88AB\u89C6\u4E3A\u4E00\u4E2A\u6574\u4F53, \u4E0D\u4F1A\u5206\u6BB5\u7FFB\u8BD1");
    atomicBlockSelectors.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.atomicBlockSelectors ? this.settings.I18N_IMT_CONFIG.atomicBlockSelectors.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.atomicBlockSelectors = v.split(",");
        await this.i18n.saveSettings();
      })
    );
    const atomicBlockTags = new import_obsidian8.Setting(this.containerEl);
    atomicBlockTags.setName("\u533A\u57DFTag\u9009\u62E9\u5668");
    atomicBlockTags.setDesc("\u5339\u914D\u7684\u5143\u7D20\u5C06\u88AB\u89C6\u4E3A\u4E00\u4E2A\u6574\u4F53, \u4E0D\u4F1A\u5206\u6BB5\u7FFB\u8BD1");
    atomicBlockTags.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_IMT_CONFIG.atomicBlockTags ? this.settings.I18N_IMT_CONFIG.atomicBlockTags.toString() : "").onChange(async (v) => {
        this.settings.I18N_IMT_CONFIG.atomicBlockTags = v.split(",");
        await this.i18n.saveSettings();
      })
    );
  }
};

// src/settings/ui/i18n-nit-baidu.ts
var import_obsidian9 = require("obsidian");
var from_lang = {
  "auto": "\u81EA\u52A8\u68C0\u6D4B",
  "zh": "\u4E2D\u6587",
  "cht": "\u7E41\u4F53\u4E2D\u6587",
  "yue": "\u7CA4\u8BED",
  "wyw": "\u6587\u8A00\u6587",
  "en": "\u82F1\u8BED",
  "jp": "\u65E5\u8BED",
  "kor": "\u97E9\u8BED",
  "fra": "\u6CD5\u8BED",
  "spa": "\u897F\u73ED\u7259\u8BED",
  "th": "\u6CF0\u8BED",
  "ara": "\u963F\u62C9\u4F2F\u8BED",
  "ru": "\u4FC4\u8BED",
  "pt": "\u8461\u8404\u7259\u8BED",
  "de": "\u5FB7\u8BED",
  "it": "\u610F\u5927\u5229\u8BED",
  "el": "\u5E0C\u814A\u8BED",
  "nl": "\u8377\u5170\u8BED",
  "pl": "\u6CE2\u5170\u8BED",
  "bul": "\u4FDD\u52A0\u5229\u4E9A\u8BED",
  "est": "\u7231\u6C99\u5C3C\u4E9A\u8BED",
  "dan": "\u4E39\u9EA6\u8BED",
  "fin": "\u82AC\u5170\u8BED",
  "cs": "\u6377\u514B\u8BED",
  "rom": "\u7F57\u9A6C\u5C3C\u4E9A\u8BED",
  "slo": "\u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED",
  "swe": "\u745E\u5178\u8BED",
  "hu": "\u5308\u7259\u5229\u8BED",
  "vie": "\u8D8A\u5357\u8BED"
};
var to_lang = JSON.parse(JSON.stringify(from_lang));
delete to_lang.auto;
var I18nNitBaiDu = class extends BaseSetting {
  main() {
    const i18nNitBaiDuFrom = new import_obsidian9.Setting(this.containerEl);
    if (!(this.settings.I18N_NIT_API == "BAIDU"))
      i18nNitBaiDuFrom.setClass("i18n--hidden");
    i18nNitBaiDuFrom.setName("\u6E90\u8BED\u8A00");
    i18nNitBaiDuFrom.setDesc("\u5F85\u8BD1\u6587\u672C\u8BED\u8A00\uFF08\u9ED8\u8BA4:\u81EA\u52A8\u68C0\u6D4B\uFF09");
    i18nNitBaiDuFrom.addDropdown(
      (cb) => cb.addOptions(from_lang).setValue(this.settings.I18N_NIT_APIS.BAIDU.FROM).onChange((value) => {
        this.settings.I18N_NIT_APIS.BAIDU.FROM = value;
        this.i18n.saveSettings();
      })
    );
    const i18nNitBaiDuTo = new import_obsidian9.Setting(this.containerEl);
    if (!(this.settings.I18N_NIT_API == "BAIDU"))
      i18nNitBaiDuTo.setClass("i18n--hidden");
    i18nNitBaiDuTo.setName("\u76EE\u6807\u8BED\u8A00");
    i18nNitBaiDuTo.setDesc("\u76EE\u6807\u6587\u672C\u8BED\u8A00\uFF08\u9ED8\u8BA4\uFF1A\u4E2D\u6587\uFF09");
    i18nNitBaiDuTo.addDropdown(
      (cb) => cb.addOptions(to_lang).setValue(this.settings.I18N_NIT_APIS.BAIDU.TO).onChange((value) => {
        this.settings.I18N_NIT_APIS.BAIDU.TO = value;
        this.i18n.saveSettings();
      })
    );
    const i18nNitBaiDuAppID = new import_obsidian9.Setting(this.containerEl);
    if (!(this.settings.I18N_NIT_API == "BAIDU"))
      i18nNitBaiDuAppID.setClass("i18n--hidden");
    i18nNitBaiDuAppID.setName("APPID");
    i18nNitBaiDuAppID.setDesc("APPID\u662F\u8BBF\u95EE\u767E\u5EA6\u7FFB\u8BD1API\u7684\u8EAB\u4EFD\u9A8C\u8BC1\u5BC6\u94A5\u3002");
    i18nNitBaiDuAppID.addText(
      (cb) => cb.setValue(this.settings.I18N_NIT_APIS.BAIDU.APP_ID).setPlaceholder("APPID").onChange((value) => {
        this.settings.I18N_NIT_APIS.BAIDU.APP_ID = value;
        this.i18n.saveSettings();
      })
    );
    const i18nNitBaiDuAppIDKey = new import_obsidian9.Setting(this.containerEl);
    if (!(this.settings.I18N_NIT_API == "BAIDU"))
      i18nNitBaiDuAppIDKey.setClass("i18n--hidden");
    i18nNitBaiDuAppIDKey.setName("\u5BC6\u94A5");
    i18nNitBaiDuAppIDKey.setDesc("Key\u662F\u8BBF\u95EE\u767E\u5EA6\u7FFB\u8BD1API\u7684\u8EAB\u4EFD\u9A8C\u8BC1\u5BC6\u94A5\u3002");
    i18nNitBaiDuAppIDKey.addText(
      (cb) => cb.setValue(this.settings.I18N_NIT_APIS.BAIDU.KEY).setPlaceholder("KEY").onChange((value) => {
        this.settings.I18N_NIT_APIS.BAIDU.KEY = value;
        this.i18n.saveSettings();
      })
    );
  }
};

// src/settings/ui/i18n-author.ts
var import_obsidian10 = require("obsidian");
var I18nAuthor = class extends BaseSetting {
  main() {
    const i18nAuthor = new import_obsidian10.Setting(this.containerEl);
    i18nAuthor.setName(t("SETTING_Author_NAME"));
    i18nAuthor.setDesc(t("SETTING_Author_DESC"));
    i18nAuthor.addText(
      (cb) => cb.setValue(this.settings.I18N_AUTHOR).setPlaceholder(t("SETTING_Author_PLACEHOLDER")).onChange((value) => {
        this.settings.I18N_AUTHOR = value;
        this.i18n.saveSettings();
      })
      // .inputEl.addClass('i18n-input')
    );
  }
};

// src/settings/ui/i18n-open-settings.ts
var import_obsidian11 = require("obsidian");
var I18nOpenSettings = class extends BaseSetting {
  main() {
    const i18nOpenSettings = new import_obsidian11.Setting(this.containerEl);
    i18nOpenSettings.setName(t("SETTING_OPEN_SETTING_NAME"));
    i18nOpenSettings.setDesc(t("SETTING_OPEN_SETTING_DESC"));
    i18nOpenSettings.addToggle(
      (cb) => cb.setValue(this.settings.I18N_OPEN_SETTINGS).onChange(() => {
        this.settings.I18N_OPEN_SETTINGS = !this.settings.I18N_OPEN_SETTINGS;
        this.i18n.saveSettings();
        this.settingTab.basisDisplay();
      }).toggleEl.addClass("i18n-checkbox")
    );
  }
};

// src/settings/ui/i18n-nit-openAI.ts
var import_obsidian12 = require("obsidian");
var I18nNITOpenAI = class extends BaseSetting {
  main() {
    const i18nNITOpenAIUrl = new import_obsidian12.Setting(this.containerEl);
    i18nNITOpenAIUrl.setName("\u63A5\u53E3");
    i18nNITOpenAIUrl.setDesc("\u9ED8\u8BA4\u4E3Ahttps://api.openai.com\u3002\n\u5373ChatGPT\u5B98\u65B9\u5730\u5740\uFF0C\u4F7F\u7528\u5B98\u65B9key\u5219\u65E0\u9700\u4FEE\u6539\u3002\n\u5982\u679C\u4F7F\u7528\u7B2C\u4E09\u65B9\u670D\u52A1\uFF0C\u8BF7\u53C2\u8003\u5BF9\u5E94\u670D\u52A1\u5546\u7684\u6587\u6863\u8BF4\u660E\u3002");
    if (!(this.settings.I18N_NIT_API == "OPENAI"))
      i18nNITOpenAIUrl.setClass("i18n--hidden");
    i18nNITOpenAIUrl.addText(
      (cb) => cb.setValue(this.settings.I18N_NIT_OPENAI_URL).setPlaceholder("https://api.openai.com").onChange((value) => {
        this.settings.I18N_NIT_OPENAI_URL = value;
        this.i18n.saveSettings();
      })
    );
    const i18nNITOpenAIKey = new import_obsidian12.Setting(this.containerEl);
    i18nNITOpenAIKey.setName("KEY");
    i18nNITOpenAIKey.setDesc("\u5373api key\u3002\n\u8BF7\u53C2\u8003\u5BF9\u5E94\u670D\u52A1\u5546\u7684\u6587\u6863\u8BF4\u660E");
    if (!(this.settings.I18N_NIT_API == "OPENAI"))
      i18nNITOpenAIKey.setClass("i18n--hidden");
    i18nNITOpenAIKey.addText(
      (cb) => cb.setValue(this.settings.I18N_NIT_OPENAI_KEY).setPlaceholder("KEY").onChange((value) => {
        this.settings.I18N_NIT_OPENAI_KEY = value;
        this.i18n.saveSettings();
      })
    );
    const i18nNITOpenAIModel = new import_obsidian12.Setting(this.containerEl);
    i18nNITOpenAIModel.setName("\u6A21\u578B");
    i18nNITOpenAIModel.setDesc("\u5373model\u3002\n\u586B\u5199\u4F60\u9700\u8981\u4F7F\u7528\u7684\u6A21\u578B\uFF0C\u6CE8\u610F\u6B64\u5904\u6A21\u578B\u540D\u79F0\u4E3Aapi\u5BF9\u5E94\u7684\u6A21\u578B\u540D\n\uFF08\u90E8\u5206\u670D\u52A1\u5546\u7684\u65E5\u5E38\u540D\u79F0\u4E0Eapi\u540D\u79F0\u4E0D\u4E00\u6837\uFF09\uFF0C\u8BF7\u67E5\u8BE2\u5BF9\u5E94\u670D\u52A1\u5546\u7684\u6587\u6863\u3002");
    if (!(this.settings.I18N_NIT_API == "OPENAI"))
      i18nNITOpenAIModel.setClass("i18n--hidden");
    i18nNITOpenAIModel.addText(
      (cb) => cb.setValue(this.settings.I18N_NIT_OPENAI_MODEL).setPlaceholder("Model").onChange((value) => {
        this.settings.I18N_NIT_OPENAI_MODEL = value;
        this.i18n.saveSettings();
      })
    );
    const i18nAIOpenAITips = new import_obsidian12.Setting(this.containerEl);
    if (!(this.settings.I18N_NIT_API == "OPENAI"))
      i18nAIOpenAITips.setClass("i18n--hidden");
    i18nAIOpenAITips.setName(t("SETTING_NIT_OPENAI_TIP_NAME"));
    i18nAIOpenAITips.setDesc("\u5373prompt\uFF0C\u7528\u4E8E\u6307\u5BFCAI\u5982\u4F55\u7FFB\u8BD1\uFF0C\u672C\u63D2\u4EF6\u63D0\u4F9B\u9ED8\u8BA4\u63D0\u793A\u8BCD\uFF0C\u5982\u6709\u9700\u8981\u53EF\u81EA\u884C\u8C03\u6574\u3002");
    i18nAIOpenAITips.addTextArea(
      (cb) => cb.setValue(this.settings.I18N_NIT_OPENAI_TIPS).setPlaceholder(t("SETTING_NIT_OPENAI_TIP_PLACEHOLDER")).onChange((value) => {
        this.settings.I18N_NIT_OPENAI_TIPS = value;
        this.i18n.saveSettings();
      })
    );
  }
};

// src/settings/ui/i18n-edit-mode.ts
var import_obsidian13 = require("obsidian");
var I18nEditMode = class extends BaseSetting {
  main() {
    const i18nEditMode = new import_obsidian13.Setting(this.containerEl);
    i18nEditMode.setName(t("SETTING_EDITOR_NAME"));
    i18nEditMode.setDesc(t("SETTING_EDITOR_DESC"));
    i18nEditMode.addToggle(
      (cb) => cb.setValue(this.settings.I18N_EDIT_MODE).onChange(() => {
        this.settings.I18N_EDIT_MODE = !this.settings.I18N_EDIT_MODE;
        this.i18n.saveSettings();
        this.settingTab.basisDisplay();
      }).toggleEl.addClass("i18n-checkbox")
    );
  }
};

// src/settings/ui/i18n-re.ts
var import_obsidian14 = require("obsidian");
var I18nRE = class extends BaseSetting {
  main() {
    const i18nIgnore = new import_obsidian14.Setting(this.containerEl);
    i18nIgnore.setName("\u4E34\u65F6\u6B63\u5219");
    i18nIgnore.setDesc("\u662F\u5426\u5F00\u542F\u4E34\u65F6\u6B63\u5219\u8868\u8FBE\u5F0F");
    i18nIgnore.addToggle(
      (cb) => cb.setValue(this.settings.I18N_RE_TEMP_MODE).onChange(async () => {
        this.settings.I18N_RE_TEMP_MODE = !this.settings.I18N_RE_TEMP_MODE;
        this.i18n.saveSettings();
      }).toggleEl.addClass("i18n-checkbox")
    );
    const i18nREMode = new import_obsidian14.Setting(this.containerEl);
    i18nREMode.setName(t("SETTING_RE_MODE_NAME"));
    i18nREMode.setDesc(t("SETTING_RE_MODE_DESC"));
    i18nREMode.addText(
      (cb) => cb.setValue(this.settings.I18N_RE_MODE).setDisabled(true)
    );
    const i18nREFlags = new import_obsidian14.Setting(this.containerEl);
    i18nREFlags.setName(t("SETTING_RE_FLAGS_NAME"));
    i18nREFlags.setDesc(t("SETTING_RE_FLAGS_DESC"));
    i18nREFlags.addText(
      (cb) => cb.setValue(this.settings.I18N_RE_FLAGS).setPlaceholder(t("SETTING_RE_FLAGS_PLACEHOLDER")).onChange((value) => {
        this.settings.I18N_RE_FLAGS = value;
        this.i18n.saveSettings();
      })
    );
    const i18nRELength = new import_obsidian14.Setting(this.containerEl);
    i18nRELength.setName(t("SETTING_RE_LENGTH_NAME"));
    i18nRELength.setDesc(t("SETTING_RE_LENGTH_DESC"));
    i18nRELength.addSlider(
      (cb) => cb.setDynamicTooltip().setLimits(0, 3e3, 100).setValue(this.settings.I18N_RE_LENGTH).onChange((value) => {
        this.settings.I18N_RE_LENGTH = value;
        this.i18n.saveSettings();
      })
    );
    let modeString = "";
    const i18nREModes = new import_obsidian14.Setting(this.containerEl);
    i18nREModes.setName(t("SETTING_RE_EDIT_MODE_NAME"));
    i18nREModes.setDesc(t("SETTING_RE_EDIT_MODE_DESC"));
    i18nREModes.addText(
      (cb) => cb.setPlaceholder(t("SETTING_RE_EDIT_MODE_PLACEHOLDER")).onChange((value) => {
        modeString = value;
      })
    );
    i18nREModes.addButton(
      (cb) => cb.setButtonText(t("SETTING_RE_EDIT_INSERT_BUTTON_TEXT")).onClick(() => {
        if (modeString != "" && !this.settings.I18N_RE_MODES.includes(modeString)) {
          this.settings.I18N_RE_MODES.push(modeString);
          if (!this.settings.I18N_RE_DATAS.hasOwnProperty(modeString)) {
            this.settings.I18N_RE_DATAS[modeString] = [];
          }
          this.i18n.saveSettings();
          this.settingTab.reDisplay();
        } else {
          NoticeError(t("SETTING_PUBLIC_RE"), t("SETTING_RE_EDIT_INSERT_BUTTON_CONTENT_A"));
        }
      }).setClass("i18n-button").setClass("i18n-button--primary")
    );
    i18nREModes.addButton(
      (cb) => cb.setButtonText(this.settings.I18N_RE_MODE_DISPLAY ? t("SETTING_PUBLIC_HIDE") : t("SETTING_PUBLIC_SHOW")).onClick(() => {
        this.settings.I18N_RE_MODE_DISPLAY = !this.settings.I18N_RE_MODE_DISPLAY;
        this.i18n.saveSettings();
        this.settingTab.reDisplay();
      }).setClass("i18n-button").setClass("i18n-button--primary")
    );
    if (this.settings.I18N_RE_MODE_DISPLAY) {
      for (let i = 0; i < this.settings.I18N_RE_MODES.length; i++) {
        const i18nREModeItem = new import_obsidian14.Setting(this.containerEl);
        i18nREModeItem.setName(this.settings.I18N_RE_MODES[i]);
        if (this.settings.I18N_RE_MODE != this.settings.I18N_RE_MODES[i]) {
          i18nREModeItem.addButton(
            (cb) => cb.setIcon("check").onClick(() => {
              this.settings.I18N_RE_MODE = this.settings.I18N_RE_MODES[i];
              this.i18n.saveSettings();
              this.settingTab.reDisplay();
            })
          );
        }
        i18nREModeItem.addButton(
          (cb) => cb.setIcon("trash").onClick(() => {
            if (this.settings.I18N_RE_MODES.length > 1) {
              delete this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODES[i]];
              const a = this.settings.I18N_RE_MODES[i];
              const b = this.settings.I18N_RE_MODE;
              console.log(a == b);
              if (this.settings.I18N_RE_MODES[i] == this.settings.I18N_RE_MODE) {
                this.settings.I18N_RE_MODE = this.settings.I18N_RE_MODES[0];
              }
              this.settings.I18N_RE_MODES.splice(i, 1);
              NoticeOperationResult(t("SETTING_PUBLIC_RE"), true);
            } else {
              NoticeOperationResult(t("SETTING_PUBLIC_RE"), false, t("SETTING_RE_EDIT_DELETE_BUTTON_CONTENT_A"));
            }
            this.i18n.saveSettings();
            this.settingTab.reDisplay();
          })
        );
      }
    }
    let regexpString = "";
    const i18nREDatas = new import_obsidian14.Setting(this.containerEl);
    i18nREDatas.setName(t("SETTING_RE_EDIT_ITEM_NAME"));
    i18nREDatas.setDesc(t("SETTING_RE_EDIT_ITEM_DESC"));
    i18nREDatas.addText(
      (cb) => cb.setPlaceholder(t("SETTING_RE_EDIT_ITEM_PLACEHOLDER")).onChange((value) => {
        regexpString = value;
      })
    );
    i18nREDatas.addButton(
      (cb) => cb.setButtonText(t("SETTING_RE_EDIT_ITEM_INSERT_BUTTON_TEXT")).onClick(() => {
        if (regexpString != "") {
          this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODE].push(regexpString);
          this.i18n.saveSettings();
          this.settingTab.reDisplay();
        }
      }).setClass("i18n-button").setClass("i18n-button--primary")
    );
    i18nREDatas.addButton(
      (cb) => cb.setButtonText(this.settings.I18N_RE_DATAS_DISPLAY ? t("SETTING_PUBLIC_HIDE") : t("SETTING_PUBLIC_SHOW")).onClick(() => {
        this.settings.I18N_RE_DATAS_DISPLAY = !this.settings.I18N_RE_DATAS_DISPLAY;
        this.i18n.saveSettings();
        this.settingTab.reDisplay();
      }).setClass("i18n-button").setClass("i18n-button--primary")
    );
    if (this.settings.I18N_RE_DATAS_DISPLAY) {
      for (let i = 0; i < this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODE].length; i++) {
        const i18nREDatasItem = new import_obsidian14.Setting(this.containerEl);
        i18nREDatasItem.setName(this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODE][i]);
        i18nREDatasItem.addButton(
          (cb) => cb.setIcon("trash").onClick(() => {
            this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODE].splice(i, 1);
            this.i18n.saveSettings();
            this.settingTab.reDisplay();
          })
        );
      }
    }
  }
};

// src/settings/ui/i18n-color.ts
var import_obsidian15 = require("obsidian");
var I18nColor = class extends BaseSetting {
  main() {
    const i18nLanguage = new import_obsidian15.Setting(this.containerEl);
    i18nLanguage.setName("\u4E3B\u9898");
    i18nLanguage.setDesc("\u4E3A Obsidian I18N \u9009\u62E9\u4E00\u4E2A\u4E3B\u9898\u8272\u3002\u4E3B\u9898\u8272\u5C06\u5F71\u54CD\u9009\u4E2D\u3001\u6309\u94AE\u7B49\u5143\u7D20\u7684\u989C\u8272\u3002");
    i18nLanguage.addColorPicker(
      (cb) => cb.setValue(this.settings.I18N_COLOR).onChange((value) => {
        document.documentElement.style.setProperty("--i18n-color-primary", value);
        this.settings.I18N_COLOR = value;
        this.i18n.saveSettings();
      })
    );
  }
};

// src/settings/ui/i18n-share.ts
var import_obsidian17 = require("obsidian");

// src/modal/i18n-admin-modal.ts
var import_obsidian16 = require("obsidian");
var AdminModal = class extends import_obsidian16.Modal {
  constructor(app, i18n) {
    super(app);
    this.api = i18n.api;
    this.i18n = i18n;
  }
  async showHead() {
    const modalEl = this.contentEl.parentElement;
    modalEl.addClass("i18n-share-history__container");
    modalEl.removeChild(modalEl.getElementsByClassName("modal-close-button")[0]);
    this.titleEl.addClass("i18n-share-history__title-box");
    const titleSetting = new import_obsidian16.Setting(this.titleEl);
    titleSetting.setClass("i18n-share-history__title");
    titleSetting.setName("I18N\u5BA1\u6838");
    const getButton = new import_obsidian16.ButtonComponent(titleSetting.controlEl);
    getButton.setButtonText("\u83B7\u53D6");
    getButton.onClick(async () => {
      this.i18n.issuesList = await this.i18n.api.giteeGetAllIssue();
      this.reloadShowData();
    });
    const exitButton = new import_obsidian16.ButtonComponent(titleSetting.controlEl);
    exitButton.setButtonText("\u9000\u51FA");
    exitButton.onClick(() => {
      this.close();
    });
  }
  async showMain() {
    console.log(this.i18n.issuesList);
    for (const issues of this.i18n.issuesList.data) {
      if (issues.title.includes("[\u63D0\u4EA4\u8BD1\u6587]")) {
        const itemEl = new import_obsidian16.Setting(this.contentEl);
        itemEl.setClass("i18n__item");
        itemEl.nameEl.addClass("i18n__item-title");
        itemEl.nameEl.innerHTML = `<span class="i18n__item-state i18n__item-state--red">\u63D0\u4EA4\u8BD1\u6587</span><span class="i18n__item-title"> ${issues.title.replace("[\u63D0\u4EA4\u8BD1\u6587] ", "")}</span>`;
        new import_obsidian16.ButtonComponent(itemEl.controlEl).setClass("i18n_modal_item_button").setButtonText("\u5BA1\u6838").onClick(() => {
          this.i18n.issuesObj = issues;
          this.i18n.activateAdminView();
        });
      }
    }
  }
  async reloadShowData() {
    let scrollTop = 0;
    const modalElement = this.contentEl;
    scrollTop = modalElement.scrollTop;
    modalElement.empty();
    await this.showMain();
    modalElement.scrollTo(0, scrollTop);
  }
  async onOpen() {
    await this.showHead();
    await this.showMain();
  }
  async onClose() {
    this.contentEl.empty();
  }
};

// src/settings/ui/i18n-share.ts
var I18nShare = class extends BaseSetting {
  main() {
    const i18nShareSetting = new import_obsidian17.Setting(this.containerEl);
    i18nShareSetting.setName(t("SETTING_CLOUD_COLLABORATION_NAME"));
    i18nShareSetting.setDesc(t("SETTING_CLOUD_COLLABORATION_DESC"));
    i18nShareSetting.addButton((cb) => {
      cb.setButtonText(this.settings.I18N_SUBMIT_MODE ? "\u5173\u95ED" : "\u5F00\u542F");
      cb.onClick(async () => {
        this.settings.I18N_SUBMIT_MODE = !this.settings.I18N_SUBMIT_MODE;
        this.i18n.saveSettings();
        this.settingTab.shareDisplay();
      });
      cb.setClass("i18n-button");
      this.settings.I18N_SUBMIT_MODE ? cb.setClass("i18n-button--danger") : cb.setClass("i18n-button--primary");
    });
    const i18nShareUrlSetting = new import_obsidian17.Setting(this.containerEl);
    i18nShareUrlSetting.setName(t("SETTING_CLOUD_COLLABORATION_TOKEN_NAME"));
    i18nShareUrlSetting.setDesc(t("SETTING_CLOUD_COLLABORATION_TOKEN_DESC"));
    i18nShareUrlSetting.addText(
      (cb) => cb.setValue(this.settings.I18N_SUBMIT_URL).setPlaceholder(t("SETTING_CLOUD_COLLABORATION_TOKEN_PLACEHOLDER")).onChange((value) => {
        this.settings.I18N_SUBMIT_URL = value;
        this.i18n.saveSettings();
      })
    );
    const i18nShareAdminTokenSetting = new import_obsidian17.Setting(this.containerEl);
    i18nShareAdminTokenSetting.setName("\u5BA1\u6838\u6A21\u5F0F(\u975E\u5BA1\u6838\u5458\u8BF7\u52FF\u5F00\u542F)");
    i18nShareAdminTokenSetting.setDesc("\u5BA1\u6838\u63D0\u4EA4\u7684\u8BD1\u6587");
    i18nShareAdminTokenSetting.addText(
      (cb) => cb.setValue(this.settings.I18N_ADMIN_TOKEN).setPlaceholder("\u7BA1\u7406\u5458token").onChange((value) => {
        this.settings.I18N_ADMIN_TOKEN = value;
        this.i18n.saveSettings();
      })
    );
    i18nShareAdminTokenSetting.addToggle(
      (cb) => cb.setValue(this.settings.I18N_ADMIN_MODE).onChange(() => {
        this.settings.I18N_ADMIN_MODE = !this.settings.I18N_ADMIN_MODE;
        this.i18n.saveSettings();
        if (this.settings.I18N_ADMIN_MODE)
          this.i18n.i18nReviewEl = this.i18n.addRibbonIcon("i18n-review", "I18N\u5BA1\u6838", (evt) => {
            new AdminModal(this.app, this.i18n).open();
          });
        if (!this.settings.I18N_ADMIN_MODE)
          this.i18n.i18nReviewEl.remove();
      }).toggleEl.addClass("i18n-checkbox")
    );
  }
};

// src/settings/ui/index.ts
var I18nSettingTab = class extends import_obsidian18.PluginSettingTab {
  constructor(app, i18n) {
    super(app, i18n);
    this.i18n = i18n;
    this.app = app;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("i18n-setting__container");
    const tabsEl = this.containerEl.createEl("div");
    tabsEl.addClass("i18n-setting__tabs");
    this.contentEl = this.containerEl.createEl("div");
    this.contentEl.addClass("i18n-setting__content");
    const tabItems = [
      { text: "\u57FA\u7840\u8BBE\u7F6E", content: () => this.basisDisplay() },
      { text: "\u672C\u5730\u6A21\u5F0F", content: () => this.ldtDisplay() },
      { text: "\u4E91\u7AEF\u6A21\u5F0F", content: () => this.ndtDisplay() },
      { text: "\u673A\u5668\u7FFB\u8BD1", content: () => this.nitDisplay() },
      { text: "\u6C89\u6D78\u7FFB\u8BD1", content: () => this.imtDisplay() },
      { text: "\u5171\u5EFA\u4E91\u7AEF", content: () => this.shareDisplay() },
      { text: "\u6B63\u5219\u914D\u7F6E", content: () => this.reDisplay() }
      // I18nModIT
    ];
    const tabItemsEls = [];
    tabItems.forEach((item, index) => {
      const itemEl = tabsEl.createEl("div");
      itemEl.addClass("i18n-setting__tabs-item");
      itemEl.textContent = item.text;
      tabItemsEls.push(itemEl);
      if (index === 0) {
        itemEl.addClass("i18n-setting__tabs-item_is-active");
        item.content();
      }
      itemEl.addEventListener("click", () => {
        tabItemsEls.forEach((tabEl) => {
          tabEl.removeClass("i18n-setting__tabs-item_is-active");
        });
        itemEl.addClass("i18n-setting__tabs-item_is-active");
        item.content();
      });
    });
  }
  basisDisplay() {
    this.contentEl.empty();
    new I18nLanguage(this).display();
    new I18nColor(this).display();
    new I18nAuthor(this).display();
    new I18nOpenSettings(this).display();
    new I18nEditMode(this).display();
  }
  ldtDisplay() {
    this.contentEl.empty();
    new I18nModLDT(this).display();
  }
  ndtDisplay() {
    this.contentEl.empty();
    new I18nModNDT(this).display();
  }
  nitDisplay() {
    this.contentEl.empty();
    new I18nModeNIT(this).display();
    new I18nNitBaiDu(this).display();
    new I18nNITOpenAI(this).display();
  }
  imtDisplay() {
    this.contentEl.empty();
    new I18nModIMT(this).display();
  }
  shareDisplay() {
    this.contentEl.empty();
    new I18nShare(this).display();
  }
  reDisplay() {
    this.contentEl.empty();
    new I18nRE(this).display();
  }
};

// src/modal/i18n-modal.ts
var path2 = __toESM(require("path"));
var fs3 = __toESM(require_lib());
var import_child_process = require("child_process");
var import_obsidian21 = require("obsidian");

// src/modal/i18n-wizard-modal.ts
var import_obsidian19 = require("obsidian");

// src/url.ts
var Url = class {
};
Url.I18N_ICON = "https://gitee.com/zero--two/obsidian-i18n-translation/raw/master/Obsidian.png";
Url.QQ_GROUP = "https://qm.qq.com/cgi-bin/qm/qr?k=kHTS0iC1FC5igTXbdbKzff6_tc54mOF5&jump_from=webapi&authKey=AoSkriW+nDeDzBPqBl9jcpbAYkPXN2QRbrMh0hFbvMrGbqZyRAbJwaD6JKbOy4Nx";
Url.VIDEO_TUTORIAL = " https://www.bilibili.com/video/BV1VcxJeNExx/";
Url.DOCUMENTATION_TUTORIAL = "https://gitee.com/zero--two/obsidian-i18n-translation";
Url.TASK = "https://gitee.com/zero--two/obsidian-i18n-translation/issues?assignee_id=&author_id=&branch=&collaborator_ids=&issue_search=&label_ids=266056763&label_text=&milestone_id=&priority=&private_issue=&program_id=&project_id=zero--two%2Fobsidian-i18n-translation&project_type=&scope=&single_label_id=&single_label_text=&sort=&state=open&target_project=";
Url.SDK_URL = "https://download.immersivetranslate.com/immersive-translate-sdk-latest.js";

// src/modal/i18n-wizard-modal.ts
var WizardModal = class extends import_obsidian19.Modal {
  constructor(app, i18n) {
    super(app);
    this.i18n = i18n;
  }
  async Main() {
    const { contentEl } = this;
    const modalEl = this.contentEl.parentElement;
    modalEl.addClass("i18n-wizard__container");
    this.contentEl.addClass("i18n-wizard__box");
    this.img = this.contentEl.doc.createElement("img");
    this.img.addClass("i18n-wizard__img");
    this.img.src = Url.I18N_ICON;
    this.contentEl.appendChild(this.img);
    this.title = this.contentEl.doc.createElement("p");
    this.title.addClass("i18n-wizard__title");
    this.title.innerHTML = "Obsidian-I18N";
    this.contentEl.appendChild(this.title);
    this.version = this.contentEl.doc.createElement("p");
    this.version.addClass("i18n-wizard__version");
    this.version.innerHTML = `\u7248\u672C ${this.i18n.manifest.version}`;
    this.contentEl.appendChild(this.version);
    const videoTutorial = new import_obsidian19.Setting(contentEl);
    videoTutorial.setName(t("WIZARD_VIDEO_TUTORIAL_TITLE_NAME"));
    videoTutorial.setDesc(t("WIZARD_VIDEO_TUTORIAL_TITLE_DESC"));
    const videoTutorialButton = new import_obsidian19.ButtonComponent(videoTutorial.controlEl);
    videoTutorialButton.setButtonText(t("WIZARD_VIDEO_TUTORIAL_BUTTON_TEXT"));
    videoTutorialButton.setCta();
    videoTutorialButton.setTooltip("");
    videoTutorialButton.onClick(() => {
      window.open(Url.VIDEO_TUTORIAL);
    });
    const documentationTutorial = new import_obsidian19.Setting(contentEl);
    documentationTutorial.setName(t("WIZARD_DOCUMENTATION_TUTORIAL_TITLE_NAME"));
    documentationTutorial.setDesc(t("WIZARD_DOCUMENTATION_TUTORIAL_TITLE_DESC"));
    const documentationTutorialButton = new import_obsidian19.ButtonComponent(documentationTutorial.controlEl);
    documentationTutorialButton.setButtonText(t("WIZARD_DOCUMENTATION_TUTORIAL_BUTTON_TEXT"));
    documentationTutorialButton.setTooltip("");
    documentationTutorialButton.onClick(() => {
      window.open(Url.DOCUMENTATION_TUTORIAL);
    });
    const qq = new import_obsidian19.Setting(contentEl);
    qq.setName(t("WIZARD_QQ_TITLE_NAME"));
    qq.setDesc(t("WIZARD_QQ_TITLE_DESC"));
    const qqButton = new import_obsidian19.ButtonComponent(qq.controlEl);
    qqButton.setButtonText(t("WIZARD_QQ_TEXT"));
    qqButton.setTooltip("");
    qqButton.onClick(() => {
      window.open(Url.QQ_GROUP);
    });
  }
  async onOpen() {
    await this.Main();
  }
  async onClose() {
    this.contentEl.empty();
  }
};

// src/modal/i18n-name-translation-modal.ts
var path = __toESM(require("path"));
var fs2 = __toESM(require_lib());
var import_obsidian20 = require("obsidian");
var NameTranslationModal = class extends import_obsidian20.Modal {
  constructor(app, i18n) {
    super(app);
    this.i18n = i18n;
    this.i18n.originalPluginsManifests.forEach((manifest) => {
      if (manifest.name && !(manifest.name in this.i18n.nameTranslationJSON) && manifest.id != "i18n") {
        this.i18n.nameTranslationJSON[manifest.name] = "";
      }
    });
    fs2.writeJSONSync(path.join(path.normalize(this.app.vault.adapter.getBasePath()), path.join(this.i18n.manifest.dir, "name.json")), this.i18n.nameTranslationJSON, { spaces: 4 });
  }
  async showHead() {
    this.contentEl.addClass("i18n__item-box");
    const modalEl = this.contentEl.parentElement;
    modalEl.addClass("i18n-name__container");
    modalEl.removeChild(modalEl.getElementsByClassName("modal-close-button")[0]);
    this.titleEl.addClass("i18n-share-history__title-box");
    const titleSetting = new import_obsidian20.Setting(this.titleEl);
    titleSetting.setClass("i18n-share-history__title");
    titleSetting.setName("\u63D2\u4EF6\u5217\u8868");
    const exitButton = new import_obsidian20.ButtonComponent(titleSetting.controlEl);
    exitButton.setClass("i18n-button");
    exitButton.setClass("i18n-button--primary");
    exitButton.setButtonText("\u9000\u51FA");
    exitButton.onClick(() => {
      this.close();
    });
  }
  async showMain() {
    for (const key in this.i18n.nameTranslationJSON) {
      const itemEl = new import_obsidian20.Setting(this.contentEl);
      itemEl.setClass("i18n__item");
      itemEl.nameEl.addClass("i18n__item-title");
      itemEl.infoEl.remove();
      const keyInput = new import_obsidian20.TextComponent(itemEl.controlEl);
      keyInput.inputEl.addClass("i18n-name__input-auto");
      keyInput.setValue(key);
      keyInput.setDisabled(true);
      const valueInput = new import_obsidian20.TextComponent(itemEl.controlEl);
      valueInput.inputEl.addClass("i18n-name__input-auto");
      valueInput.setValue(this.i18n.nameTranslationJSON[key]);
      valueInput.onChange((value) => {
        this.i18n.nameTranslationJSON[key] = value;
        fs2.writeJSONSync(path.join(this.app.vault.adapter.getBasePath(), path.join(this.i18n.manifest.dir, "name.json")), this.i18n.nameTranslationJSON, { spaces: 4 });
        this.i18n.reloadPluginsName();
      });
    }
  }
  async reloadShowData() {
    let scrollTop = 0;
    const modalElement = this.contentEl;
    scrollTop = modalElement.scrollTop;
    modalElement.empty();
    await this.showMain();
    modalElement.scrollTo(0, scrollTop);
  }
  async onOpen() {
    await this.showHead();
    await this.showMain();
  }
  async onClose() {
    this.contentEl.empty();
  }
};

// src/modal/i18n-modal.ts
var I18NModal = class extends import_obsidian21.Modal {
  // ============================================================
  //                       构造函数
  // ============================================================
  constructor(app, i18n) {
    super(app);
    // [本地][变量] 全部插件列表
    this.plugins = [];
    // [本地][变量] 展示插件列表
    this.showPlugins = [];
    this.developerMode = false;
    this.i18n = i18n;
    this.basePath = path2.normalize(this.app.vault.adapter.getBasePath());
    this.settings = i18n.settings;
    this.settingPlugins = this.app.setting;
    this.regexps = [...this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODE], ...this.i18n.settings.I18N_RE_TEMP.split("|")].filter((item) => {
      return item !== "";
    });
  }
  // ============================================================
  //                        展示操作
  // ============================================================
  async showHead() {
    const modalEl = this.contentEl.parentElement;
    modalEl.addClass("i18n__container");
    modalEl.removeChild(modalEl.getElementsByClassName("modal-close-button")[0]);
    this.titleEl.addClass("i18n__title");
    this.contentEl.addClass("i18n__item-box");
    this.detailsEl = document.createElement("div");
    this.detailsEl.addClass("i18n__item-details");
    modalEl.appendChild(this.detailsEl);
    const helpTitle = new import_obsidian21.Setting(this.titleEl).setClass("i18n__help").setName(t("I18N_HELP_TITLE_NAME"));
    new import_obsidian21.ButtonComponent(helpTitle.controlEl).setIcon("i18n_qq").setTooltip(t("I18N_HELP_TITLE_QQ_BUTTON_TIP")).setClass("i18n-button").onClick(() => {
      window.open(Url.QQ_GROUP);
    });
    if (this.settings.I18N_MODE_LDT && this.settings.I18N_NAME_TRANSLATION) {
      new import_obsidian21.ButtonComponent(helpTitle.controlEl).setClass("i18n-button").setClass("i18n-button--primary").setIcon("name-setting").setTooltip("\u63D2\u4EF6\u5217\u8868").onClick(() => {
        this.close();
        new NameTranslationModal(this.app, this.i18n).open();
      });
    }
    new import_obsidian21.ButtonComponent(helpTitle.controlEl).setIcon("settings").setTooltip(t("I18N_HELP_TITLE_SETTING_BUTTON_TIP")).setClass("i18n-button").onClick(() => {
      this.settingPlugins.open();
      this.settingPlugins.openTabById(this.i18n.manifest.id);
      this.close();
    });
    new import_obsidian21.ButtonComponent(helpTitle.controlEl).setIcon("circle-help").setTooltip(t("I18N_HELP_TITLE_HELP_BUTTON_TIP")).setClass("i18n-button").onClick(() => {
      new WizardModal(this.app, this.i18n).open();
    });
    if (this.developerMode) {
      new import_obsidian21.ButtonComponent(helpTitle.controlEl).setIcon("refresh-ccw").setTooltip("\u5237\u65B0\u63D2\u4EF6").setClass("i18n-button").onClick(async () => {
        this.close();
        await this.reloadPlugin(this.i18n.manifest.id);
      });
    }
    const searchTitle = new import_obsidian21.Setting(this.titleEl);
    searchTitle.setClass("i18n__search");
    searchTitle.setName(t("I18N_SEARCH_TITLE_NAME"));
    searchTitle.addDropdown((cb) => cb.addOptions(I18N_SORT).setValue(this.settings.I18N_SORT).onChange((value) => {
      this.settings.I18N_SORT = value;
      this.i18n.saveSettings();
      this.reloadShowData();
    }));
    searchTitle.addDropdown((cb) => cb.addOptions(I18N_TYPE).setValue(this.settings.I18N_TYPE).onChange((value) => {
      this.settings.I18N_TYPE = value;
      this.i18n.saveSettings();
      this.reloadShowData();
    }));
    searchTitle.addSearch((cb) => cb.setValue(this.settings.I18N_SEARCH_TEXT).onChange((value) => {
      this.settings.I18N_SEARCH_TEXT = value;
      this.i18n.saveSettings();
      this.reloadShowData();
    }));
    if (this.i18n.settings.I18N_RE_TEMP_MODE) {
      new import_obsidian21.Setting(this.titleEl).setClass("i18n__search").addText((cb) => cb.setValue(this.settings.I18N_RE_TEMP).setPlaceholder("\u4E34\u65F6\u6B63\u5219\u8868\u8FBE\u5F0F(\u4F7F\u7528|\u5206\u5272)").onChange((value) => {
        this.settings.I18N_RE_TEMP = value;
        this.i18n.saveSettings();
        this.regexps = [...this.settings.I18N_RE_DATAS[this.settings.I18N_RE_MODE], ...this.i18n.settings.I18N_RE_TEMP.split("|")].filter((item) => {
          return item !== "";
        });
      }).inputEl.addClass("i18n__re-input")).infoEl.remove();
    }
  }
  // ============================================================
  //                        展示数据
  // ============================================================
  async showData() {
    this.plugins = Object.values(this.app.plugins.manifests);
    this.plugins = this.plugins.filter((item) => item.id !== this.i18n.manifest.id);
    this.enabledPlugins = this.app.plugins.enabledPlugins;
    if (this.settings.I18N_SEARCH_TEXT == "") {
      this.showPlugins = this.plugins;
    } else {
      this.showPlugins = this.plugins.filter((item) => item.name.toLowerCase().indexOf(this.settings.I18N_SEARCH_TEXT.toLowerCase()) != -1);
    }
    const idsToRemove = [];
    switch (this.settings.I18N_TYPE) {
      case "0":
        break;
      case "1":
        for (const plugin of this.showPlugins) {
          if (fs3.pathExistsSync(path2.join(this.basePath, plugin.dir, "lang", `${this.settings.I18N_LANGUAGE}.json`)))
            idsToRemove.push(plugin.id);
        }
        this.showPlugins = this.showPlugins.filter((plugin) => !idsToRemove.includes(plugin.id));
        break;
      case "2":
        for (const plugin of this.showPlugins) {
          const pluginDir = path2.join(this.basePath, plugin.dir);
          const stateDoc = path2.join(pluginDir, "lang", "state.json");
          const isStateDoc = fs3.pathExistsSync(stateDoc);
          if (fs3.pathExistsSync(path2.join(pluginDir, "lang")) && isStateDoc) {
            if (fs3.readJsonSync(stateDoc).state != false) {
              idsToRemove.push(plugin.id);
            }
          } else {
            idsToRemove.push(plugin.id);
          }
        }
        this.showPlugins = this.showPlugins.filter((plugin) => !idsToRemove.includes(plugin.id));
        break;
      case "3":
        for (const plugin of this.showPlugins) {
          const pluginDir = path2.join(this.basePath, plugin.dir);
          const stateDoc = path2.join(pluginDir, "lang", "state.json");
          const isStateDoc = fs3.pathExistsSync(stateDoc);
          if (fs3.pathExistsSync(path2.join(pluginDir, "lang")) && isStateDoc) {
            if (fs3.readJsonSync(stateDoc).state != true) {
              idsToRemove.push(plugin.id);
            }
          } else {
            idsToRemove.push(plugin.id);
          }
        }
        this.showPlugins = this.showPlugins.filter((plugin) => !idsToRemove.includes(plugin.id));
        break;
    }
    switch (this.settings.I18N_SORT) {
      case "0":
        this.showPlugins.sort((item1, item2) => {
          return item1.name.localeCompare(item2.name);
        });
        break;
      case "1":
        this.showPlugins.sort((item1, item2) => {
          return item2.name.localeCompare(item1.name);
        });
        break;
    }
    for (const plugin of this.showPlugins) {
      const pluginDir = path2.join(this.basePath, plugin.dir);
      const langDir = path2.join(pluginDir, "lang");
      const langDoc = path2.join(pluginDir, "lang", `${this.settings.I18N_LANGUAGE}.json`);
      const stateDoc = path2.join(pluginDir, "lang", "state.json");
      const isLangDir = fs3.pathExistsSync(langDir);
      const isLangDoc = fs3.pathExistsSync(langDoc);
      const manifestDoc = path2.join(pluginDir, "manifest.json");
      const mainDoc = path2.join(pluginDir, "main.js");
      const duplicateDoc = path2.join(pluginDir, "duplicate.js");
      const stateObj = new State(stateDoc);
      if (isLangDir && !stateObj.isStateDoc)
        stateObj.insert();
      if (stateObj.isStateDoc && stateObj.getState() && plugin.version != stateObj.getPluginVersion())
        try {
          fs3.removeSync(duplicateDoc);
          stateObj.reset();
          NoticePrimary(t("I18N_UPDATE_HEAD"), plugin.name);
        } catch (e) {
          NoticeError(t("I18N_UPDATE_HEAD"), e);
        }
      let localTranslationJson;
      let cloudTranslationJson;
      let translationFormatMark = true;
      let updateMark = false;
      let downloadVersion;
      if (isLangDoc) {
        try {
          localTranslationJson = fs3.readJsonSync(langDoc);
          translationFormatMark = isValidTranslationFormat(localTranslationJson);
        } catch (e) {
          translationFormatMark = false;
        }
      }
      if (localTranslationJson && !("translationVersion" in localTranslationJson.manifest)) {
        console.log(stateObj.stateObj);
        if (stateObj.getState()) {
          fs3.unlinkSync(mainDoc);
          fs3.renameSync(duplicateDoc, mainDoc);
          const translationJson = fs3.readJsonSync(langDoc);
          const manifestJSON = fs3.readJsonSync(manifestDoc);
          manifestJSON.description = translationJson.description.original;
          fs3.writeJsonSync(manifestDoc, manifestJSON, { spaces: 4 });
          stateObj.reset();
          stateObj.setType("extract");
          stateObj.setState(false);
          stateObj.setTranslationVersion(0);
        }
        localTranslationJson = {
          manifest: {
            translationVersion: new Date("1949-10-01T15:00:00+08:00").getTime(),
            // @ts-ignore
            pluginVersion: localTranslationJson.manifest.pluginVersion
          },
          description: localTranslationJson.description,
          dict: localTranslationJson.dict
        };
        fs3.writeJsonSync(langDoc, localTranslationJson, { spaces: 4 });
        translationFormatMark = true;
        NoticeOperationResult("\u683C\u5F0F\u8F6C\u6362", true, plugin.name);
      }
      if (this.i18n.translationDirectoryMark) {
        cloudTranslationJson = this.i18n.translationDirectory.find((manifest) => manifest.id === plugin.id);
      }
      if (this.i18n.translationDirectoryMark && cloudTranslationJson && translationFormatMark) {
        downloadVersion = (plugin.version in cloudTranslationJson.translations ? true : false) ? plugin.version : Object.keys(cloudTranslationJson.translations).slice(-1)[0];
        if (localTranslationJson) {
          updateMark = stateObj.getType() === "download" && localTranslationJson.manifest.translationVersion < cloudTranslationJson.translations[downloadVersion];
        }
      }
      const itemEl = new import_obsidian21.Setting(this.contentEl);
      itemEl.setClass("i18n__item");
      itemEl.nameEl.addClass("i18n__item-title");
      const desc = { mark: 1, label: { color: "", text: "" }, text: "" };
      if (stateObj.isStateDoc) {
        if (localTranslationJson && translationFormatMark) {
          if (compareVersions(plugin.version, localTranslationJson.manifest.pluginVersion) === 1) {
            desc.label.color = "orange";
            desc.label.text = t("I18N_ITEM_LABEL_D_NAME");
          } else {
            if (stateObj.getState()) {
              desc.label.color = "green";
              desc.label.text = t("I18N_ITEM_LABEL_B_NAME");
            } else {
              desc.label.color = "red";
              desc.label.text = t("I18N_ITEM_LABEL_C_NAME");
            }
          }
          desc.text = `\u66F4\u65B0\u65E5\u671F: ${formatTimestamp(Number(localTranslationJson == null ? void 0 : localTranslationJson.manifest.translationVersion))} ${t("I18N_ITEM_LABEL_BCD_DESC_VERSION")}:[${localTranslationJson == null ? void 0 : localTranslationJson.manifest.pluginVersion}]`;
        } else {
          desc.label.color = "red";
          desc.label.text = t("I18N_ITEM_LABEL_E_NAME");
          desc.text = t("I18N_ITEM_LABEL_E_DESC");
        }
      } else {
        desc.label.color = "grey";
        desc.label.text = t("I18N_ITEM_LABEL_A_NAME");
        desc.text = t("I18N_ITEM_LABEL_A_DESC");
      }
      if (this.i18n.ignoreMark && this.i18n.ignorePlugins.includes(plugin.id)) {
        desc.label.color = "blue";
        desc.label.text = t("I18N_ITEM_LABEL_F_NAME");
        desc.text = t("I18N_ITEM_LABEL_F_DESC");
      }
      itemEl.nameEl.innerHTML = `
            <span class="i18n__item-state i18n__item-state--${desc.label.color}">${desc.label.text}</span>
            <span class="i18n__item-title b">${plugin.name}</span> 
            <span class="i18n__item-version" style="color:--simple-blue-2;">(${plugin.version})</span> 
            `;
      itemEl.settingEl.onmouseover = (e) => {
        this.detailsEl.innerHTML = desc.text;
      };
      itemEl.settingEl.onmouseout = (e) => {
        this.detailsEl.innerHTML = t("I18N_ITEM_LABEL_G_DESC");
      };
      if (this.settings.I18N_OPEN_SETTINGS && this.enabledPlugins.has(plugin.id)) {
        const openPluginSetting = new import_obsidian21.ExtraButtonComponent(itemEl.controlEl).setIcon("settings").setTooltip(t("I18N_ITEM_OPEN_SETTING_BUTTON_TIP")).onClick(() => {
          openPluginSetting.setDisabled(true);
          this.settingPlugins.open();
          this.settingPlugins.openTabById(plugin.id);
          this.close();
        });
      }
      const openPluginDirButton = new import_obsidian21.ExtraButtonComponent(itemEl.controlEl).setIcon("folder-open").setTooltip(t("I18N_ITEM_OPEN_DIR_BUTTON_TIP")).onClick(() => {
        openPluginDirButton.setDisabled(true);
        if (navigator.userAgent.match(/Win/i)) {
          const command = `start "" "${pluginDir}"`;
          (0, import_child_process.exec)(command, (error) => {
            if (error) {
              NoticeOperationResult(t("I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD"), false, error);
            } else {
              NoticeOperationResult(t("I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD"), true);
            }
          });
        }
        if (navigator.userAgent.match(/Mac/i)) {
          const command = `open ${mainDoc}`;
          (0, import_child_process.exec)(command, (error) => {
            if (error) {
              NoticeOperationResult(t("I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD"), false, error);
            } else {
              NoticeOperationResult(t("I18N_ITEM_OPEN_DIR_BUTTON_NOTICE_HEAD"), true);
            }
          });
        }
        openPluginDirButton.setDisabled(false);
      });
      if (isLangDir) {
        const deletePluginDirButton = new import_obsidian21.ExtraButtonComponent(itemEl.controlEl).setIcon("trash").setTooltip(t("I18N_ITEM_DELETE_DIR_BUTTON_TIP")).onClick(() => {
          deletePluginDirButton.setDisabled(true);
          try {
            if (stateObj.stateObj.state) {
              fs3.removeSync(mainDoc);
              fs3.renameSync(duplicateDoc, mainDoc);
              const translationJson = fs3.readJsonSync(langDoc);
              if (translationJson.hasOwnProperty("description")) {
                const manifestJSON = fs3.readJsonSync(manifestDoc);
                manifestJSON.description = translationJson.description.original;
                fs3.writeJsonSync(manifestDoc, manifestJSON, { spaces: 4 });
              }
            }
            fs3.removeSync(langDir);
            this.reloadPlugin(plugin.id);
            NoticeOperationResult(t("I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD"), true);
          } catch (error) {
            NoticeOperationResult(t("I18N_ITEM_DELETE_DIR_BUTTON_NOTICE_HEAD"), false, error);
          }
          this.reloadShowData();
        });
      }
      if (translationFormatMark && isLangDoc && this.settings.I18N_EDIT_MODE) {
        new import_obsidian21.ExtraButtonComponent(itemEl.controlEl).setIcon("pencil").setTooltip(t("I18N_ITEM_EDIT_TRANSLATION_BUTTON_TIP")).onClick(() => {
          this.i18n.editorTranslationDoc = langDoc;
          this.i18n.activateEditView();
        });
      }
      if (this.settings.I18N_SUBMIT_MODE && translationFormatMark && isLangDoc && (this.i18n.tempSubmitUrl != void 0 || this.i18n.settings.I18N_SUBMIT_URL != "")) {
        const submitTranslationButton = new import_obsidian21.ExtraButtonComponent(itemEl.controlEl);
        submitTranslationButton.setIcon("cloud-upload");
        submitTranslationButton.setTooltip(t("I18N_ITEM_SUBMIT_TRANSLATION_BUTTON_TIP"));
        submitTranslationButton.onClick(() => {
          this.i18n.shareTranslationDoc = langDoc;
          this.i18n.sharePluginObj = plugin;
          this.i18n.activateShareView();
        });
      }
      if (this.settings.I18N_MODE_LDT && !isLangDoc) {
        itemEl.controlEl.createEl("button", { text: t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT"), cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
          el.addEventListener("click", () => {
            try {
              const mainStr = fs3.readFileSync(mainDoc).toString();
              const manifestJSON = fs3.readJsonSync(manifestDoc);
              const translationJson = generateTranslation(plugin.version, manifestJSON, mainStr, this.settings.I18N_RE_LENGTH, this.regexps, this.settings.I18N_RE_FLAGS);
              fs3.ensureDirSync(langDir);
              fs3.writeJsonSync(langDoc, translationJson, { spaces: 4 });
              stateObj.insert();
              stateObj.setType("extract");
              NoticeOperationResult(t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD"), true, t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_CONTENT_A"));
            } catch (error) {
              NoticeOperationResult(t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD"), false, `${error}`);
            }
            this.reloadShowData();
          });
        });
      }
      if (this.settings.I18N_MODE_LDT && this.settings.I18N_INCREMENTAL_EXTRACTION && isLangDoc && translationFormatMark) {
        itemEl.controlEl.createEl("button", { text: t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_TEXT"), cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
          el.addEventListener("click", () => {
            if (stateObj.isStateDoc && !stateObj.getState()) {
              try {
                const originalTranslationJson = fs3.readJsonSync(langDoc);
                const modifiedTranslationJson = generateTranslation(plugin.version, fs3.readJsonSync(manifestDoc), fs3.readFileSync(mainDoc).toString(), this.settings.I18N_RE_LENGTH, this.regexps, this.settings.I18N_RE_FLAGS);
                modifiedTranslationJson.manifest = originalTranslationJson.manifest;
                modifiedTranslationJson.description = originalTranslationJson.description;
                modifiedTranslationJson.dict = { ...modifiedTranslationJson.dict, ...originalTranslationJson.dict };
                fs3.ensureDirSync(langDir);
                fs3.writeJsonSync(langDoc, modifiedTranslationJson, { spaces: 4 });
                NoticeOperationResult(t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD"), true, `\u63D0\u53D6\u8BD1\u6587${Object.keys(modifiedTranslationJson.dict).length - Object.keys(originalTranslationJson.dict).length}\u6761`);
              } catch (error) {
                NoticeOperationResult(t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD"), false, `${error}`);
              }
            } else {
              NoticeOperationResult(t("I18N_ITEM_EXTRACT_TRANSLATION_BUTTON_NOTICE_HEAD"), false, "\u8BF7\u8FD8\u539F\u63D2\u4EF6\u540E\u518D\u8FDB\u884C\u63D0\u53D6");
            }
          });
        });
      }
      if (this.settings.I18N_MODE_NDT && this.i18n.translationDirectory && translationFormatMark && cloudTranslationJson != void 0) {
        if (!isLangDoc) {
          itemEl.controlEl.createEl("button", { text: t("I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_TEXT"), cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
            el.addEventListener("click", async () => {
              try {
                fs3.ensureDirSync(langDir);
                const res = await this.i18n.api.giteeGetTranslation(plugin.id, downloadVersion);
                if (res.state) {
                  fs3.writeJsonSync(langDoc, res.data, { spaces: 4 });
                  stateObj.insert();
                  stateObj.setType("download");
                  NoticeOperationResult(t("I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD"), true);
                } else {
                  NoticeOperationResult(t("I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD"), false);
                }
              } catch (error) {
                NoticeOperationResult(t("I18N_ITEM_DOWNLOAD_TRANSLATION_BUTTON_NOTICE_HEAD"), false, error);
              }
              await this.reloadShowData();
            });
          });
        }
        if (isLangDoc && updateMark) {
          itemEl.controlEl.createEl("button", { text: t("I18N_ITEM_UPDATE_TRANSLATION_BUTTON_TEXT"), cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
            el.addEventListener("click", async () => {
              try {
                const res = await this.i18n.api.giteeGetTranslation(plugin.id, downloadVersion);
                if (res.state) {
                  fs3.writeJsonSync(langDoc, res.data, { spaces: 4 });
                  stateObj.insert();
                  stateObj.setType("download");
                  NoticeOperationResult(t("I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD"), true);
                } else {
                  NoticeOperationResult(t("I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD"), false);
                }
              } catch (error) {
                NoticeOperationResult(t("I18N_ITEM_UPDATE_TRANSLATION_BUTTON_NOTICE_HEAD"), false, error);
              }
              await this.reloadShowData();
            });
          });
        }
      }
      if (this.settings.I18N_MODE_NIT && !isLangDoc) {
        itemEl.controlEl.createEl("button", { text: API_TYPES[this.settings.I18N_NIT_API], cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
          el.addEventListener("click", async () => {
            try {
              const mainStr = fs3.readFileSync(mainDoc).toString();
              const manifestJSON = fs3.readJsonSync(manifestDoc);
              const translationJson = generateTranslation(plugin.version, manifestJSON, mainStr, this.settings.I18N_RE_LENGTH, this.regexps, this.settings.I18N_RE_FLAGS);
              const regex = /(['"`])(.*)(\1)/;
              let temp = 0;
              if (this.settings.I18N_NIT_API == "BAIDU") {
                const response = await this.i18n.api.baiduAPI(translationJson.description.original);
                translationJson.description.translation = response.state ? response.data : translationJson.description.original;
                await sleep(this.settings.I18N_NIT_API_INTERVAL);
                for (const key in translationJson.dict) {
                  NoticeInfo(t("I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD"), `${temp += 1}/${Object.keys(translationJson.dict).length}`, this.settings.I18N_NIT_API_INTERVAL);
                  const tempArray = key.match(regex);
                  if (tempArray != null) {
                    const response2 = await this.i18n.api.baiduAPI(tempArray[2]);
                    translationJson.dict[key] = response2.state ? key.replace(tempArray[2], response2.data) : key;
                    await sleep(this.settings.I18N_NIT_API_INTERVAL);
                  }
                }
              }
              if (this.settings.I18N_NIT_API == "OPENAI") {
                const response = await this.i18n.api.openAI(plugin.name, translationJson.description.original);
                if ("content" in response) {
                  translationJson.description.translation = response.content;
                } else {
                  translationJson.description.translation = translationJson.description.original;
                }
                await sleep(this.settings.I18N_NIT_API_INTERVAL);
                for (const key in translationJson.dict) {
                  NoticeInfo(t("I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD"), `${temp += 1}/${Object.keys(translationJson.dict).length}`, this.settings.I18N_NIT_API_INTERVAL);
                  const tempArray = key.match(regex);
                  if (tempArray != null) {
                    const response2 = await this.i18n.api.openAI(plugin.name, tempArray[2]);
                    if ("content" in response2) {
                      translationJson.dict[key] = key.replace(tempArray[2], response2.content);
                    } else {
                      translationJson.dict[key] = key;
                    }
                    await sleep(this.settings.I18N_NIT_API_INTERVAL);
                  }
                }
              }
              fs3.ensureDirSync(langDir);
              fs3.writeJsonSync(langDoc, translationJson, { spaces: 4 });
              stateObj.insert();
              stateObj.setType("extract");
            } catch (error) {
              NoticeOperationResult(t("I18N_ITEM_MACHINE_TRANSLATION_BUTTON_NOTICE_HEAD"), false, error);
            }
          });
        });
      }
      if (isLangDoc && stateObj.isStateDoc && translationFormatMark) {
        if (stateObj.getState() == false) {
          itemEl.controlEl.createEl("button", { text: t("I18N_ITEM_TRANSLATION_BUTTON_TEXT"), cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
            el.addEventListener("click", () => {
              try {
                const translationJson = fs3.readJsonSync(langDoc);
                if (translationJson && Object.keys(translationJson.dict).every((key) => translationJson.dict[key] === key)) {
                  NoticeOperationResult(t("I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD"), false, "\u8BD1\u6587\u672A\u7FFB\u8BD1\uFF0C\u8BF7\u5148\u7FFB\u8BD1\u8BD1\u6587");
                  return;
                }
                fs3.copySync(mainDoc, duplicateDoc);
                let mainString = fs3.readFileSync(mainDoc).toString();
                mainString = this.translationMain(translationJson, mainString);
                fs3.writeFileSync(mainDoc, mainString);
                const manifestJSON = fs3.readJsonSync(manifestDoc);
                manifestJSON.description = translationJson.description.translation;
                fs3.writeJsonSync(manifestDoc, manifestJSON, { spaces: 4 });
                stateObj.setState(true);
                stateObj.setPluginVersion(plugin.version);
                stateObj.setTranslationVersion(translationJson.manifest.translationVersion);
                if (this.enabledPlugins.has(plugin.id)) {
                  this.reloadPlugin(plugin.id);
                }
              } catch (error) {
                NoticeOperationResult(t("I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD"), false, error);
              }
              this.reloadShowData();
            });
          });
        }
        if (stateObj.getState() == true) {
          itemEl.controlEl.createEl("button", { text: t("I18N_ITEM_RESTORE_BUTTON_TEXT"), cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
            el.addEventListener("click", () => {
              try {
                fs3.unlinkSync(mainDoc);
                fs3.renameSync(duplicateDoc, mainDoc);
                const translationJson = fs3.readJsonSync(langDoc);
                const manifestJSON = fs3.readJsonSync(manifestDoc);
                manifestJSON.description = translationJson.description.original;
                fs3.writeJsonSync(manifestDoc, manifestJSON, { spaces: 4 });
                stateObj.reset();
                if (this.enabledPlugins.has(plugin.id))
                  this.reloadPlugin(plugin.id);
                NoticeOperationResult(t("I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD"), true);
              } catch (error) {
                NoticeOperationResult(t("I18N_ITEM_RESTORE_BUTTON_NOTICE_HEAD"), false, error);
              }
              this.reloadShowData();
            });
          });
        }
      }
      if (this.developerMode) {
        itemEl.controlEl.createEl("button", { text: "\u6D4B\u8BD5", cls: ["i18n-button", "i18n-button--primary"] }, (el) => {
          el.addEventListener("click", async () => {
          });
        });
      }
    }
  }
  // window.location.reload();
  // [重载数据显示]
  async reloadShowData() {
    let scrollTop = 0;
    const modalElement = this.contentEl;
    scrollTop = modalElement.scrollTop;
    modalElement.empty();
    await this.showData();
    modalElement.scrollTo(0, scrollTop);
  }
  // [开启]
  async onOpen() {
    await this.showHead();
    await this.showData();
  }
  // [关闭]
  async onClose() {
    this.contentEl.empty();
  }
  async reloadPlugin(id) {
    if (this.enabledPlugins.has(id)) {
      await this.app.plugins.disablePlugin(id);
      await this.app.plugins.enablePlugin(id);
    }
  }
  translationMain(translationJson, mainString) {
    for (const key in translationJson.dict) {
      mainString = mainString.replaceAll(key, translationJson.dict[key]);
    }
    NoticeOperationResult(t("I18N_ITEM_TRANSLATION_BUTTON_NOTICE_HEAD"), true, t("I18N_ITEM_TRANSLATION_BUTTON_NOTICE_CONTENT_A"));
    return mainString;
  }
};

// node_modules/.store/uuid@10.0.0/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
var i;
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/.store/uuid@10.0.0/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/.store/uuid@10.0.0/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/.store/uuid@10.0.0/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/icon.ts
var import_obsidian22 = require("obsidian");
var Icons = () => {
  (0, import_obsidian22.addIcon)("cloud-upload", `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-cloud-upload"><path d="M12 13v8"/><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="m8 17 4-4 4 4"/></svg>`);
  (0, import_obsidian22.addIcon)("circle-help", `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-help"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>`);
  (0, import_obsidian22.addIcon)("i18n_translate", `<svg t="1726147647142" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="5625" width="100" height="100"><path d="M213.333333 640v85.333333a85.333333 85.333333 0 0 0 78.933334 85.077334L298.666667 810.666667h128v85.333333H298.666667a170.666667 170.666667 0 0 1-170.666667-170.666667v-85.333333h85.333333z m554.666667-213.333333l187.733333 469.333333h-91.946666l-51.242667-128h-174.506667l-51.157333 128h-91.904L682.666667 426.666667h85.333333z m-42.666667 123.093333L672.128 682.666667h106.325333L725.333333 549.76zM341.333333 85.333333v85.333334h170.666667v298.666666H341.333333v128H256v-128H85.333333V170.666667h170.666667V85.333333h85.333333z m384 42.666667a170.666667 170.666667 0 0 1 170.666667 170.666667v85.333333h-85.333333V298.666667a85.333333 85.333333 0 0 0-85.333334-85.333334h-128V128h128zM256 256H170.666667v128h85.333333V256z m170.666667 0H341.333333v128h85.333334V256z" p-id="5626" fill="currentColor"></path></svg>`);
  (0, import_obsidian22.addIcon)("i18n_qq_1", `<svg t="1726285705266" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4293" width="100" height="100"><path d="M824.8 613.2c-16-51.4-34.4-94.6-62.7-165.3C766.5 262.2 689.3 112 511.5 112 331.7 112 256.2 265.2 261 447.9c-28.4 70.8-46.7 113.7-62.7 165.3-34 109.5-23 154.8-14.6 155.8 18 2.2 70.1-82.4 70.1-82.4 0 49 25.2 112.9 79.8 159-26.4 8.1-85.7 29.9-71.6 53.8 11.4 19.3 196.2 12.3 249.5 6.3 53.3 6 238.1 13 249.5-6.3 14.1-23.8-45.3-45.7-71.6-53.8 54.6-46.2 79.8-110.1 79.8-159 0 0 52.1 84.6 70.1 82.4 8.5-1.1 19.5-46.4-14.5-155.8z" p-id="4294" fill="currentColor"></path></svg>`);
  (0, import_obsidian22.addIcon)("i18n_qq", `<svg t="1727053933542" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1762" width="100" height="100"><path d="M538 902l-52 0c-12.667 0-21 2.333-25 7-12.667 12.667-30 22.167-52 28.5s-47.333 9.5-76 9.5c-36.667 0-71-6.333-103-19-4-2-7.833-4.167-11.5-6.5s-6.833-4.5-9.5-6.5-5.167-4.333-7.5-7-4.167-5.167-5.5-7.5-2.333-5-3-8-1-6.167-1-9.5c0-9.333 3.5-17.5 10.5-24.5S221 844.667 237 838c9.333-2.667 15.833-6 19.5-10s5.5-9 5.5-15c0-17.333-2-28-6-32-3.333-4-6.667-9-10-15l-12-16c-3.333-6-6.667-10.667-10-14-6.667-12.667-17.333-19-32-19-4 0-7.5 0.5-10.5 1.5s-6.833 2.833-11.5 5.5-8 4.667-10 6c-12.667 12-21.333 18.333-26 19-7.333 0-11.333-15.333-12-46l0-5c0-21.333 4-57.667 12-109 13.333-38.667 34.667-73 64-103 8.667-8 13-18.667 13-32l0-12c0-19.333 6.333-38.667 19-58 3.333-2.667 5.333-5.5 6-8.5s1-6.5 1-10.5l0-7c0-15.333 1-30.167 3-44.5s5.167-28.167 9.5-41.5 9.833-26.333 16.5-39 14.5-25.167 23.5-37.5 19.167-24.167 30.5-35.5c49.333-55.333 113.333-83 192-83 12.667 0 25 0.667 37 2s23.833 3.5 35.5 6.5 23 6.833 34 11.5 21.667 10 32 16 20.5 13 30.5 21 19.667 16.667 29 26c18 20 33 40 45 60s21.5 41.833 28.5 65.5S794 333.333 794 358l0 7c0 8.667 2 15 6 19 12.667 19.333 19 38.667 19 58l0 12c0 17.333 4.333 28 13 32 30 30 51.333 64.333 64 103 14 43.333 18.333 79.667 13 109 0 15.333-1.5 26.833-4.5 34.5s-7.833 13.167-14.5 16.5c-4.667 0-13.333-6.333-26-19-8.667-8.667-19.333-13-32-13l-12 0c-1.333 0-2.667 0.333-4 1s-2.833 1.167-4.5 1.5-3.167 1.167-4.5 2.5l-4 2-3.5 3.5c0 0-1 1.333-3 4s-2.833 4.167-2.5 4.5c-4.667 12.667-15.333 27.667-32 45-10 10-12.333 20.667-7 32 0 6 5.333 13.333 16 22l3 3c29.333 13.333 44.333 28.333 45 45 0 9.333-3 17.5-9 24.5s-15.667 13.833-29 20.5c-12.667 6-28 10.667-46 14s-37 5-57 5c-53.333 0-96-12.667-128-38 4.667 0 3.667-1.333-3-4L538 902zM685 1024c64 0 115-12.667 153-38 20.667-14 36.5-29.333 47.5-46s16.5-35.667 16.5-57c0-23.333-6.333-44.667-19-64l9 0c2 0 4.833-0.5 8.5-1.5s6.5-2.5 8.5-4.5c36-12 57.333-44 64-96 6-44.667-0.333-96-19-154-2.667-8.667-5.833-17.333-9.5-26s-7.667-17-12-25-9.167-16-14.5-24-10.833-15.667-16.5-23-11.833-15-18.5-23c0-28-6.333-58-19-90 0-32-3.667-62.5-11-91.5s-18.5-56.833-33.5-83.5-34.167-51.667-57.5-75c-10-10-20.333-19.167-31-27.5s-21.5-16-32.5-23-22.333-13.333-34-19S640.833 22 628.5 18 603.667 10.667 591 8s-25.5-4.667-38.5-6S526 0 512 0c-32 0-62.5 3.667-91.5 11S363.667 29.5 337 44.5s-51.667 34.167-75 57.5c-68 76-102 159.333-102 250-12.667 25.333-19 55.333-19 90l0 6c-9.333 7.333-17.833 15.833-25.5 25.5s-14.333 19.667-20 30-10.333 20.167-14 29.5S74 552.333 70 563c-18.667 58-25 109.333-19 154 3.333 24.667 10.667 45.167 22 61.5s25.333 27.833 42 34.5c2 0 6.333 1 13 3s11 3 13 3c-12.667 19.333-19 40.667-19 64 0 44 21.333 78.333 64 103 9.333 6 19.5 11.5 30.5 16.5s22.833 9 35.5 12 25.667 5.333 39 7c13.333 1.667 27.333 2.5 42 2.5 70.667 0 124-15 160-45l32 0C567 1009 620.333 1024 685 1024z" fill="currentColor" p-id="1763"></path></svg>`);
  (0, import_obsidian22.addIcon)("square-check-big", `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-check-big"><path d="M21 10.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.5"/><path d="m9 11 3 3L22 4"/></svg>`);
  (0, import_obsidian22.addIcon)("name-setting", `<svg t="1728458503829" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="5311" width="100" height="100"><path d="M85.357714 797.988571h307.2v121.929143h-307.2V797.988571z m0-313.636571h394.971429v121.856h-394.971429V484.352z m0-313.709714h877.714286V292.571429h-877.714286V170.642286zM806.473143 468.114286l10.24 52.516571c23.113143 7.606857 44.105143 20.187429 61.659428 36.425143l49.737143-17.261714 42.934857 76.068571-39.350857 35.328a179.931429 179.931429 0 0 1 0 72.704l39.350857 35.328-42.934857 76.068572-49.737143-17.188572a170.422857 170.422857 0 0 1-61.659428 36.425143l-10.24 52.443429H720.457143l-10.313143-52.516572a170.934857 170.934857 0 0 1-61.659429-36.425143l-49.737142 17.261715-42.934858-76.068572 39.350858-35.328a179.931429 179.931429 0 0 1 0-72.704L555.885714 615.862857l43.008-76.068571 49.664 17.188571a170.422857 170.422857 0 0 1 61.659429-36.425143l10.24-52.443428h86.016z m-43.008 175.542857a43.446857 43.446857 0 0 0-42.934857 43.885714c0 24.210286 19.236571 43.885714 42.934857 43.885714a43.446857 43.446857 0 0 0 43.008-43.885714c0-24.210286-19.236571-43.885714-43.008-43.885714z" fill="currentColor" p-id="5312"></path></svg>`);
  (0, import_obsidian22.addIcon)("task", `<svg t="1728534890459" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4292" width="100" height="100"><path d="M663.608889 469.959111a22.186667 22.186667 0 0 0-5.176889 0.512 11.150222 11.150222 0 0 0-3.584-0.512H399.189333a10.126222 10.126222 0 0 0-2.218666 0.227556 27.136 27.136 0 0 0-21.390223 7.281777 28.103111 28.103111 0 0 0-8.931555 21.105778 28.387556 28.387556 0 0 0 8.931555 21.105778 27.591111 27.591111 0 0 0 21.390223 7.338667c0.739556 0.113778 1.422222 0.227556 2.218666 0.227555h255.715556a10.979556 10.979556 0 0 0 3.584-0.568889 22.186667 22.186667 0 0 0 5.176889 0.512 27.989333 27.989333 0 0 0 27.192889-28.615111 28.046222 28.046222 0 0 0-27.249778-28.615111z m103.253333 133.290667a27.761778 27.761778 0 0 0-5.233778 0.568889 12.344889 12.344889 0 0 0-3.527111-0.568889h-358.968889c-0.739556 0-1.422222 0.113778-2.218666 0.227555a27.192889 27.192889 0 0 0-21.390222 7.338667 28.387556 28.387556 0 0 0-8.931556 21.105778 28.273778 28.273778 0 0 0 8.931556 21.105778 26.794667 26.794667 0 0 0 21.390222 7.338666c0.739556 0.113778 1.422222 0.227556 2.218666 0.227556h359.025778a13.084444 13.084444 0 0 0 3.584-0.568889 27.591111 27.591111 0 0 0 32.256-28.103111 27.875556 27.875556 0 0 0-27.136-28.672z m0 133.404444a27.648 27.648 0 0 0-5.233778 0.512 12.288 12.288 0 0 0-3.527111-0.512h-358.968889a15.132444 15.132444 0 0 0-2.218666 0.170667 27.591111 27.591111 0 0 0-21.390222 7.338667 28.387556 28.387556 0 0 0-8.931556 21.105777 27.989333 27.989333 0 0 0 30.321778 28.387556 9.500444 9.500444 0 0 0 2.218666 0.227555h359.025778a12.913778 12.913778 0 0 0 3.584-0.455111 27.648 27.648 0 0 0 32.256-28.16 27.875556 27.875556 0 0 0-27.136-28.615111z m197.916445 223.459556V63.715556S966.314667 0 900.266667 0H119.182222C56.035556 0 54.613333 63.715556 54.613333 63.715556v896.512c0-0.113778-0.170667 63.715556 64.568889 63.715555h184.149334l1.820444 0.056889 1.934222-0.056889h593.180445c67.299556 0 64.512-63.886222 64.512-63.829333z m-712.305778 3.128889H140.572444v0.113777c-28.273778 0-30.606222-29.525333-30.606222-29.525333V86.528c0-28.16 30.663111-29.297778 30.663111-29.297778h111.786667l0.056889 906.012445z m628.622222 3.470222H306.744889V57.287111h286.037333v278.072889l85.560889-88.405333 86.357333 88.405333V57.287111h114.346667c32.028444 0 31.459556 29.354667 31.459556 29.354667v850.716444s0.512 29.354667-29.411556 29.354667z" fill="currentColor" p-id="4293"></path></svg>`);
  (0, import_obsidian22.addIcon)("a-large-small", `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-a-large-small"><path d="M21 14h-5"/><path d="M16 16v-3.5a2.5 2.5 0 0 1 5 0V16"/><path d="M4.5 13h6"/><path d="m3 16 4.5-9 4.5 9"/></svg>`);
  (0, import_obsidian22.addIcon)("i18n-review", `<svg t="1729240794816" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8958" width="100" height="100"><path d="M951.872 595.28 564.08 983.072C551.952 995.2 532.288 995.2 520.144 983.072 517.728 980.64 516.144 977.76 514.688 974.848L328.064 788.208C316.176 776.336 316.176 757.072 328.064 745.2 339.936 733.328 359.2 733.328 371.072 745.2L542.576 916.704 907.936 551.344C920.064 539.216 939.744 539.216 951.872 551.344 964 563.472 964 583.152 951.872 595.28ZM617.296 671.056C599.808 676.928 580.48 668.608 574.112 652.448L498.736 480.176 203.344 480.176 127.968 652.448C121.6 668.608 102.272 676.928 84.784 671.056 67.312 665.168 58.304 647.312 64.656 631.168L318.112 51.904C323.248 38.88 336.816 31.104 351.04 31.6 365.264 31.104 378.832 38.88 383.968 51.904L637.424 631.168C643.776 647.312 634.768 665.168 617.296 671.056ZM351.04 142.624 231.344 416.176 470.736 416.176 351.04 142.624Z" fill="currentColor"  p-id="8959"></path></svg>`);
};
var icon_default = Icons;

// src/views/editor-view.ts
var fs4 = __toESM(require_lib());
var import_obsidian23 = require("obsidian");
var import_child_process2 = require("child_process");
var path3 = __toESM(require("path"));

// node_modules/.store/diff@7.0.0/node_modules/diff/lib/index.mjs
function Diff() {
}
Diff.prototype = {
  diff: function diff(oldString, newString) {
    var _options$timeout;
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var callback = options.callback;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    var self = this;
    function done(value) {
      value = self.postProcess(value, options);
      if (callback) {
        setTimeout(function() {
          callback(value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }
    oldString = this.castInput(oldString, options);
    newString = this.castInput(newString, options);
    oldString = this.removeEmpty(this.tokenize(oldString, options));
    newString = this.removeEmpty(this.tokenize(newString, options));
    var newLen = newString.length, oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;
    if (options.maxEditLength != null) {
      maxEditLength = Math.min(maxEditLength, options.maxEditLength);
    }
    var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;
    var abortAfterTimestamp = Date.now() + maxExecutionTime;
    var bestPath = [{
      oldPos: -1,
      lastComponent: void 0
    }];
    var newPos = this.extractCommon(bestPath[0], newString, oldString, 0, options);
    if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
      return done(buildValues(self, bestPath[0].lastComponent, newString, oldString, self.useLongestToken));
    }
    var minDiagonalToConsider = -Infinity, maxDiagonalToConsider = Infinity;
    function execEditLength() {
      for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
        var basePath = void 0;
        var removePath = bestPath[diagonalPath - 1], addPath = bestPath[diagonalPath + 1];
        if (removePath) {
          bestPath[diagonalPath - 1] = void 0;
        }
        var canAdd = false;
        if (addPath) {
          var addPathNewPos = addPath.oldPos - diagonalPath;
          canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
        }
        var canRemove = removePath && removePath.oldPos + 1 < oldLen;
        if (!canAdd && !canRemove) {
          bestPath[diagonalPath] = void 0;
          continue;
        }
        if (!canRemove || canAdd && removePath.oldPos < addPath.oldPos) {
          basePath = self.addToPath(addPath, true, false, 0, options);
        } else {
          basePath = self.addToPath(removePath, false, true, 1, options);
        }
        newPos = self.extractCommon(basePath, newString, oldString, diagonalPath, options);
        if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
          return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));
        } else {
          bestPath[diagonalPath] = basePath;
          if (basePath.oldPos + 1 >= oldLen) {
            maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
          }
          if (newPos + 1 >= newLen) {
            minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
          }
        }
      }
      editLength++;
    }
    if (callback) {
      (function exec3() {
        setTimeout(function() {
          if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
            return callback();
          }
          if (!execEditLength()) {
            exec3();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
        var ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  addToPath: function addToPath(path5, added, removed, oldPosInc, options) {
    var last = path5.lastComponent;
    if (last && !options.oneChangePerToken && last.added === added && last.removed === removed) {
      return {
        oldPos: path5.oldPos + oldPosInc,
        lastComponent: {
          count: last.count + 1,
          added,
          removed,
          previousComponent: last.previousComponent
        }
      };
    } else {
      return {
        oldPos: path5.oldPos + oldPosInc,
        lastComponent: {
          count: 1,
          added,
          removed,
          previousComponent: last
        }
      };
    }
  },
  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath, options) {
    var newLen = newString.length, oldLen = oldString.length, oldPos = basePath.oldPos, newPos = oldPos - diagonalPath, commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(oldString[oldPos + 1], newString[newPos + 1], options)) {
      newPos++;
      oldPos++;
      commonCount++;
      if (options.oneChangePerToken) {
        basePath.lastComponent = {
          count: 1,
          previousComponent: basePath.lastComponent,
          added: false,
          removed: false
        };
      }
    }
    if (commonCount && !options.oneChangePerToken) {
      basePath.lastComponent = {
        count: commonCount,
        previousComponent: basePath.lastComponent,
        added: false,
        removed: false
      };
    }
    basePath.oldPos = oldPos;
    return newPos;
  },
  equals: function equals(left, right, options) {
    if (options.comparator) {
      return options.comparator(left, right);
    } else {
      return left === right || options.ignoreCase && left.toLowerCase() === right.toLowerCase();
    }
  },
  removeEmpty: function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  castInput: function castInput(value) {
    return value;
  },
  tokenize: function tokenize(value) {
    return Array.from(value);
  },
  join: function join3(chars) {
    return chars.join("");
  },
  postProcess: function postProcess(changeObjects) {
    return changeObjects;
  }
};
function buildValues(diff2, lastComponent, newString, oldString, useLongestToken) {
  var components = [];
  var nextComponent;
  while (lastComponent) {
    components.push(lastComponent);
    nextComponent = lastComponent.previousComponent;
    delete lastComponent.previousComponent;
    lastComponent = nextComponent;
  }
  components.reverse();
  var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function(value2, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value2.length ? oldValue : value2;
        });
        component.value = diff2.join(value);
      } else {
        component.value = diff2.join(newString.slice(newPos, newPos + component.count));
      }
      newPos += component.count;
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff2.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count;
    }
  }
  return components;
}
var characterDiff = new Diff();
function longestCommonPrefix(str1, str2) {
  var i;
  for (i = 0; i < str1.length && i < str2.length; i++) {
    if (str1[i] != str2[i]) {
      return str1.slice(0, i);
    }
  }
  return str1.slice(0, i);
}
function longestCommonSuffix(str1, str2) {
  var i;
  if (!str1 || !str2 || str1[str1.length - 1] != str2[str2.length - 1]) {
    return "";
  }
  for (i = 0; i < str1.length && i < str2.length; i++) {
    if (str1[str1.length - (i + 1)] != str2[str2.length - (i + 1)]) {
      return str1.slice(-i);
    }
  }
  return str1.slice(-i);
}
function replacePrefix(string, oldPrefix, newPrefix) {
  if (string.slice(0, oldPrefix.length) != oldPrefix) {
    throw Error("string ".concat(JSON.stringify(string), " doesn't start with prefix ").concat(JSON.stringify(oldPrefix), "; this is a bug"));
  }
  return newPrefix + string.slice(oldPrefix.length);
}
function replaceSuffix(string, oldSuffix, newSuffix) {
  if (!oldSuffix) {
    return string + newSuffix;
  }
  if (string.slice(-oldSuffix.length) != oldSuffix) {
    throw Error("string ".concat(JSON.stringify(string), " doesn't end with suffix ").concat(JSON.stringify(oldSuffix), "; this is a bug"));
  }
  return string.slice(0, -oldSuffix.length) + newSuffix;
}
function removePrefix(string, oldPrefix) {
  return replacePrefix(string, oldPrefix, "");
}
function removeSuffix(string, oldSuffix) {
  return replaceSuffix(string, oldSuffix, "");
}
function maximumOverlap(string1, string2) {
  return string2.slice(0, overlapCount(string1, string2));
}
function overlapCount(a, b) {
  var startA = 0;
  if (a.length > b.length) {
    startA = a.length - b.length;
  }
  var endB = b.length;
  if (a.length < b.length) {
    endB = a.length;
  }
  var map = Array(endB);
  var k = 0;
  map[0] = 0;
  for (var j = 1; j < endB; j++) {
    if (b[j] == b[k]) {
      map[j] = map[k];
    } else {
      map[j] = k;
    }
    while (k > 0 && b[j] != b[k]) {
      k = map[k];
    }
    if (b[j] == b[k]) {
      k++;
    }
  }
  k = 0;
  for (var i = startA; i < a.length; i++) {
    while (k > 0 && a[i] != b[k]) {
      k = map[k];
    }
    if (a[i] == b[k]) {
      k++;
    }
  }
  return k;
}
var extendedWordChars = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}";
var tokenizeIncludingWhitespace = new RegExp("[".concat(extendedWordChars, "]+|\\s+|[^").concat(extendedWordChars, "]"), "ug");
var wordDiff = new Diff();
wordDiff.equals = function(left, right, options) {
  if (options.ignoreCase) {
    left = left.toLowerCase();
    right = right.toLowerCase();
  }
  return left.trim() === right.trim();
};
wordDiff.tokenize = function(value) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var parts;
  if (options.intlSegmenter) {
    if (options.intlSegmenter.resolvedOptions().granularity != "word") {
      throw new Error('The segmenter passed must have a granularity of "word"');
    }
    parts = Array.from(options.intlSegmenter.segment(value), function(segment) {
      return segment.segment;
    });
  } else {
    parts = value.match(tokenizeIncludingWhitespace) || [];
  }
  var tokens = [];
  var prevPart = null;
  parts.forEach(function(part) {
    if (/\s/.test(part)) {
      if (prevPart == null) {
        tokens.push(part);
      } else {
        tokens.push(tokens.pop() + part);
      }
    } else if (/\s/.test(prevPart)) {
      if (tokens[tokens.length - 1] == prevPart) {
        tokens.push(tokens.pop() + part);
      } else {
        tokens.push(prevPart + part);
      }
    } else {
      tokens.push(part);
    }
    prevPart = part;
  });
  return tokens;
};
wordDiff.join = function(tokens) {
  return tokens.map(function(token, i) {
    if (i == 0) {
      return token;
    } else {
      return token.replace(/^\s+/, "");
    }
  }).join("");
};
wordDiff.postProcess = function(changes, options) {
  if (!changes || options.oneChangePerToken) {
    return changes;
  }
  var lastKeep = null;
  var insertion = null;
  var deletion = null;
  changes.forEach(function(change) {
    if (change.added) {
      insertion = change;
    } else if (change.removed) {
      deletion = change;
    } else {
      if (insertion || deletion) {
        dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, change);
      }
      lastKeep = change;
      insertion = null;
      deletion = null;
    }
  });
  if (insertion || deletion) {
    dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, null);
  }
  return changes;
};
function diffWords(oldStr, newStr, options) {
  if ((options === null || options === void 0 ? void 0 : options.ignoreWhitespace) != null && !options.ignoreWhitespace) {
    return diffWordsWithSpace(oldStr, newStr, options);
  }
  return wordDiff.diff(oldStr, newStr, options);
}
function dedupeWhitespaceInChangeObjects(startKeep, deletion, insertion, endKeep) {
  if (deletion && insertion) {
    var oldWsPrefix = deletion.value.match(/^\s*/)[0];
    var oldWsSuffix = deletion.value.match(/\s*$/)[0];
    var newWsPrefix = insertion.value.match(/^\s*/)[0];
    var newWsSuffix = insertion.value.match(/\s*$/)[0];
    if (startKeep) {
      var commonWsPrefix = longestCommonPrefix(oldWsPrefix, newWsPrefix);
      startKeep.value = replaceSuffix(startKeep.value, newWsPrefix, commonWsPrefix);
      deletion.value = removePrefix(deletion.value, commonWsPrefix);
      insertion.value = removePrefix(insertion.value, commonWsPrefix);
    }
    if (endKeep) {
      var commonWsSuffix = longestCommonSuffix(oldWsSuffix, newWsSuffix);
      endKeep.value = replacePrefix(endKeep.value, newWsSuffix, commonWsSuffix);
      deletion.value = removeSuffix(deletion.value, commonWsSuffix);
      insertion.value = removeSuffix(insertion.value, commonWsSuffix);
    }
  } else if (insertion) {
    if (startKeep) {
      insertion.value = insertion.value.replace(/^\s*/, "");
    }
    if (endKeep) {
      endKeep.value = endKeep.value.replace(/^\s*/, "");
    }
  } else if (startKeep && endKeep) {
    var newWsFull = endKeep.value.match(/^\s*/)[0], delWsStart = deletion.value.match(/^\s*/)[0], delWsEnd = deletion.value.match(/\s*$/)[0];
    var newWsStart = longestCommonPrefix(newWsFull, delWsStart);
    deletion.value = removePrefix(deletion.value, newWsStart);
    var newWsEnd = longestCommonSuffix(removePrefix(newWsFull, newWsStart), delWsEnd);
    deletion.value = removeSuffix(deletion.value, newWsEnd);
    endKeep.value = replacePrefix(endKeep.value, newWsFull, newWsEnd);
    startKeep.value = replaceSuffix(startKeep.value, newWsFull, newWsFull.slice(0, newWsFull.length - newWsEnd.length));
  } else if (endKeep) {
    var endKeepWsPrefix = endKeep.value.match(/^\s*/)[0];
    var deletionWsSuffix = deletion.value.match(/\s*$/)[0];
    var overlap = maximumOverlap(deletionWsSuffix, endKeepWsPrefix);
    deletion.value = removeSuffix(deletion.value, overlap);
  } else if (startKeep) {
    var startKeepWsSuffix = startKeep.value.match(/\s*$/)[0];
    var deletionWsPrefix = deletion.value.match(/^\s*/)[0];
    var _overlap = maximumOverlap(startKeepWsSuffix, deletionWsPrefix);
    deletion.value = removePrefix(deletion.value, _overlap);
  }
}
var wordWithSpaceDiff = new Diff();
wordWithSpaceDiff.tokenize = function(value) {
  var regex = new RegExp("(\\r?\\n)|[".concat(extendedWordChars, "]+|[^\\S\\n\\r]+|[^").concat(extendedWordChars, "]"), "ug");
  return value.match(regex) || [];
};
function diffWordsWithSpace(oldStr, newStr, options) {
  return wordWithSpaceDiff.diff(oldStr, newStr, options);
}
var lineDiff = new Diff();
lineDiff.tokenize = function(value, options) {
  if (options.stripTrailingCr) {
    value = value.replace(/\r\n/g, "\n");
  }
  var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }
  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line = linesAndNewlines[i];
    if (i % 2 && !options.newlineIsToken) {
      retLines[retLines.length - 1] += line;
    } else {
      retLines.push(line);
    }
  }
  return retLines;
};
lineDiff.equals = function(left, right, options) {
  if (options.ignoreWhitespace) {
    if (!options.newlineIsToken || !left.includes("\n")) {
      left = left.trim();
    }
    if (!options.newlineIsToken || !right.includes("\n")) {
      right = right.trim();
    }
  } else if (options.ignoreNewlineAtEof && !options.newlineIsToken) {
    if (left.endsWith("\n")) {
      left = left.slice(0, -1);
    }
    if (right.endsWith("\n")) {
      right = right.slice(0, -1);
    }
  }
  return Diff.prototype.equals.call(this, left, right, options);
};
var sentenceDiff = new Diff();
sentenceDiff.tokenize = function(value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var cssDiff = new Diff();
cssDiff.tokenize = function(value) {
  return value.split(/([{}:;,]|\s+)/);
};
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
var jsonDiff = new Diff();
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = lineDiff.tokenize;
jsonDiff.castInput = function(value, options) {
  var undefinedReplacement = options.undefinedReplacement, _options$stringifyRep = options.stringifyReplacer, stringifyReplacer = _options$stringifyRep === void 0 ? function(k, v) {
    return typeof v === "undefined" ? undefinedReplacement : v;
  } : _options$stringifyRep;
  return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
};
jsonDiff.equals = function(left, right, options) {
  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"), options);
};
function canonicalize(obj, stack, replacementStack, replacer, key) {
  stack = stack || [];
  replacementStack = replacementStack || [];
  if (replacer) {
    obj = replacer(key, obj);
  }
  var i;
  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }
  var canonicalizedObj;
  if ("[object Array]" === Object.prototype.toString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }
  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }
  if (_typeof(obj) === "object" && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    var sortedKeys = [], _key;
    for (_key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, _key)) {
        sortedKeys.push(_key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      _key = sortedKeys[i];
      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}
var arrayDiff = new Diff();
arrayDiff.tokenize = function(value) {
  return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function(value) {
  return value;
};

// src/views/editor-view.ts
var EDIT_VIEW_TYPE = "i18n-edit-view";
var EditorView = class extends import_obsidian23.ItemView {
  constructor(leaf, i18n) {
    super(leaf);
    this.notices = [];
    this.translationDict = [];
    this.i18n = i18n;
    this.contentEl.style.setProperty("--i18n-color-primary", this.i18n.settings.I18N_COLOR);
    this.translationDoc = this.i18n.editorTranslationDoc;
  }
  onload() {
    var _a;
    if (this.translationDoc != "")
      this.translationJson = fs4.readJsonSync(this.translationDoc);
    const editEl = this.contentEl;
    editEl.addClass("i18n-edit__container");
    const manifestEl = editEl.createEl("div");
    manifestEl.addClass("i18n-edit__manifest");
    const pluginVersionLabelEl = manifestEl.createEl("span");
    pluginVersionLabelEl.textContent = t("EDITOR_TITLE_PLUGIN_VERSION");
    pluginVersionLabelEl.addClass("i18n-edit__label-wrap");
    const pluginVersionEl = manifestEl.createEl("input");
    pluginVersionEl.addClass("i18n-edit__plugin-version-input");
    const descriptionLabelEl = manifestEl.createEl("span");
    descriptionLabelEl.textContent = t("EDITOR_TITLE_DESCRIPTION");
    descriptionLabelEl.addClass("i18n-edit__label-wrap");
    const descriptionInputEl = manifestEl.createEl("input");
    descriptionInputEl.addClass("i18n-edit__description-input");
    if (this.i18n.settings.I18N_MODE_NIT && this.i18n.settings.I18N_NIT_API == "BAIDU" && this.translationJson != void 0) {
      const translationDescriptionButton = new import_obsidian23.ButtonComponent(manifestEl);
      translationDescriptionButton.setClass("i18n-button");
      translationDescriptionButton.setClass("i18n-button--primary");
      translationDescriptionButton.setClass("i18n-edit__save-button");
      translationDescriptionButton.setButtonText("\u767E\u5EA6");
      translationDescriptionButton.onClick(async () => {
        try {
          const response = await this.i18n.api.baiduAPI(descriptionInputEl.value);
          if (response.state)
            descriptionInputEl.value = response.data;
          this.translationJson.description.translation = response.data;
        } catch (error) {
          console.log(error);
        }
      });
    }
    const dictEl = editEl.createEl("div");
    dictEl.addClass("i18n-edit__dict");
    const searchEl = editEl.createEl("div");
    searchEl.addClass("i18n-edit__search");
    const operateEl = editEl.createEl("div");
    operateEl.addClass("i18n-edit__operate");
    if (this.translationJson != void 0) {
      pluginVersionEl.value = this.translationJson.manifest.pluginVersion;
      pluginVersionEl.addEventListener("input", () => {
        this.translationJson.manifest.pluginVersion = pluginVersionEl.value;
      });
      descriptionInputEl.value = this.translationJson.description.translation;
      descriptionInputEl.addEventListener("input", () => {
        this.translationJson.description.translation = descriptionInputEl.value;
      });
      const saveTranslationButton = new import_obsidian23.ButtonComponent(manifestEl);
      saveTranslationButton.setClass("i18n-button");
      saveTranslationButton.setClass("i18n-button--success");
      saveTranslationButton.setClass("i18n-edit__save-button");
      saveTranslationButton.setClass("i18n-edit__operate-button");
      saveTranslationButton.setButtonText(t("EDITOR_SAVE_TRANSLATION_BUTTON_TEXT"));
      saveTranslationButton.onClick(async () => {
        try {
          this.translationJson.manifest.translationVersion = Date.now();
          const dict = {};
          this.translationDict.forEach((item) => {
            dict[item.key] = item.value;
          });
          this.translationJson.dict = dict;
          console.log(this.translationJson);
          fs4.writeJsonSync(this.translationDoc, this.translationJson, { spaces: 4 });
          this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), true, "", 1e3));
        } catch (error) {
          this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), false, error));
        }
      });
      const tableEl = dictEl.createEl("table");
      tableEl.addClass("i18n-edit__table");
      for (const key in this.translationJson.dict) {
        if (this.translationJson.dict.hasOwnProperty(key)) {
          const rowEl = tableEl.createEl("tr");
          rowEl.addClass("i18n-edit__table-row");
          const dictItem = { key, value: this.translationJson.dict[key], el: rowEl };
          this.translationDict.push(dictItem);
          const keyCellEl = rowEl.createEl("td");
          keyCellEl.addClass("i18n-edit__table-key");
          const valueCellEl = rowEl.createEl("td");
          valueCellEl.addClass("i18n-edit__table-value");
          valueCellEl.setAttribute("contenteditable", "true");
          valueCellEl.addEventListener("input", () => {
            if (valueCellEl.textContent)
              dictItem.value = valueCellEl.textContent;
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
          });
          valueCellEl.addEventListener("blur", () => {
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
            valueCellEl.innerHTML = res.s2;
          });
          const operateEl2 = rowEl.createEl("td");
          operateEl2.addClass("i18n-edit__table-operate");
          operateEl2.createEl("button", { text: "\u8FD8\u539F", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              dictItem.value = dictItem.key;
              keyCellEl.textContent = dictItem.key;
              valueCellEl.textContent = dictItem.key;
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_RESTORE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          operateEl2.createEl("button", { text: "\u5220\u9664", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              rowEl.remove();
              this.translationDict = this.translationDict.filter((item) => item.key !== dictItem.key);
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          const diff2 = this.diff(dictItem.key, dictItem.value);
          keyCellEl.innerHTML = diff2.s1;
          valueCellEl.innerHTML = diff2.s2;
        }
      }
      let matchingItems;
      let selectSearchCount = 0;
      let isSearch = false;
      let Aa = false;
      const searchInput = new import_obsidian23.SearchComponent(searchEl);
      searchInput.onChange((value) => {
        matchingItems = Aa ? this.translationDict.filter((item) => item.key.includes(value) || item.value.includes(value)) : this.translationDict.filter((item) => item.key.toLowerCase().includes(value.toLowerCase()) || item.value.toLowerCase().includes(value.toLowerCase()));
        if (matchingItems.length > 0 && value !== "") {
          isSearch = true;
          searchCountButton.setButtonText(`${selectSearchCount + 1}/${matchingItems.length}`);
          selectSearchCount = 0;
          matchingItems[selectSearchCount].el.scrollIntoView({ behavior: "auto", block: "center" });
          matchingItems[selectSearchCount].el.classList.remove("animate");
          void matchingItems[selectSearchCount].el.offsetWidth;
          matchingItems[selectSearchCount].el.classList.add("animate");
        } else {
          isSearch = false;
          searchCountButton.setButtonText(`0/0`);
        }
      });
      searchInput.setClass("i18n-edit__search-box");
      searchInput.inputEl.addClass("i18n-edit__search-input");
      const AaButton = new import_obsidian23.ButtonComponent(searchEl);
      AaButton.setClass("i18n-button");
      AaButton.setClass("i18n-button--primary");
      AaButton.setClass("i18n-edit__search-button");
      AaButton.setIcon("a-large-small");
      AaButton.onClick(() => {
        if (Aa) {
          Aa = false;
          AaButton.buttonEl.removeClass("i18n-button--success");
          AaButton.setClass("i18n-button--primary");
        } else {
          Aa = true;
          AaButton.buttonEl.removeClass("i18n-button--primary");
          AaButton.setClass("i18n-button--success");
        }
      });
      const searchUpButton = new import_obsidian23.ButtonComponent(searchEl);
      searchUpButton.setClass("i18n-button");
      searchUpButton.setClass("i18n-button--primary");
      searchUpButton.setClass("i18n-edit__search-button");
      searchUpButton.setIcon("arrow-up");
      searchUpButton.onClick(() => {
        if (isSearch) {
          if (selectSearchCount > 0) {
            selectSearchCount -= 1;
          } else if (selectSearchCount == 0) {
            selectSearchCount = matchingItems.length - 1;
          }
          searchCountButton.setButtonText(`${selectSearchCount + 1}/${matchingItems.length}`);
          matchingItems[selectSearchCount].el.scrollIntoView({ behavior: "auto", block: "center" });
          matchingItems[selectSearchCount].el.classList.remove("animate");
          void matchingItems[selectSearchCount].el.offsetWidth;
          matchingItems[selectSearchCount].el.classList.add("animate");
        }
      });
      const searchDownButton = new import_obsidian23.ButtonComponent(searchEl);
      searchDownButton.setClass("i18n-button");
      searchDownButton.setClass("i18n-button--primary");
      searchDownButton.setClass("i18n-edit__search-button");
      searchDownButton.setIcon("arrow-down");
      searchDownButton.onClick(() => {
        if (isSearch) {
          if (selectSearchCount < matchingItems.length - 1) {
            selectSearchCount += 1;
          } else if (selectSearchCount == matchingItems.length - 1) {
            selectSearchCount = 0;
          }
          searchCountButton.setButtonText(`${selectSearchCount + 1}/${matchingItems.length}`);
          matchingItems[selectSearchCount].el.scrollIntoView({ behavior: "auto", block: "center" });
          matchingItems[selectSearchCount].el.classList.remove("animate");
          void matchingItems[selectSearchCount].el.offsetWidth;
          matchingItems[selectSearchCount].el.classList.add("animate");
        }
      });
      const searchCountButton = new import_obsidian23.ButtonComponent(searchEl);
      searchCountButton.setClass("i18n-button");
      searchCountButton.setClass("i18n-button--primary");
      searchCountButton.setClass("i18n-edit__search-button");
      searchCountButton.setButtonText("0/0");
      const mainButton = new import_obsidian23.ButtonComponent(searchEl);
      mainButton.setClass("i18n-button");
      mainButton.setClass("i18n-button--primary");
      mainButton.setClass("i18n-edit__operate-button");
      mainButton.setButtonText("\u63D2\u4EF6");
      mainButton.setTooltip("\u6253\u5F00main.js\u6587\u4EF6");
      mainButton.onClick(async () => {
        if (navigator.userAgent.match(/Win/i)) {
          const command = `start "" "${path3.join(this.translationDoc.split("\\").slice(0, -2).join("\\"), "main.js")}"`;
          (0, import_child_process2.exec)(command, (error) => {
            if (error) {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), false, error));
            } else {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), true, "", 1e3));
            }
          });
        }
        if (navigator.userAgent.match(/Mac/i)) {
          const command = `open ${path3.join(this.translationDoc.split("\\").slice(0, -2).join("\\"), "main.js")}`;
          (0, import_child_process2.exec)(command, (error) => {
            if (error) {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), false, error));
            } else {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), true, "", 1e3));
            }
          });
        }
      });
      const langButton = new import_obsidian23.ButtonComponent(searchEl);
      langButton.setClass("i18n-button");
      langButton.setClass("i18n-button--primary");
      langButton.setClass("i18n-edit__operate-button");
      langButton.setButtonText("\u8BD1\u6587");
      langButton.setTooltip("\u6253\u5F00\u8BD1\u6587\u6587\u4EF6");
      langButton.onClick(async () => {
        if (navigator.userAgent.match(/Win/i)) {
          const command = `start "" "${this.translationDoc}"`;
          (0, import_child_process2.exec)(command, (error) => {
            if (error) {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), false, error));
            } else {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), true, "", 1e3));
            }
          });
        }
        if (navigator.userAgent.match(/Mac/i)) {
          const command = `open ${this.translationDoc}`;
          (0, import_child_process2.exec)(command, (error) => {
            if (error) {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), false, error));
            } else {
              this.notices.push(NoticeOperationResult(t("EDITOR_PUBLIC_HEAD"), true, "", 1e3));
            }
          });
        }
      });
      const insertItemInput = new import_obsidian23.SearchComponent(operateEl);
      (_a = insertItemInput.inputEl.parentElement) == null ? void 0 : _a.addClass("i18n-edit__operate-input");
      insertItemInput.onChange((value) => {
      });
      const insertItemButton = new import_obsidian23.ButtonComponent(operateEl);
      insertItemButton.setClass("i18n-button");
      insertItemButton.setClass("i18n-button--primary");
      insertItemButton.setClass("i18n-edit__operate-button");
      insertItemButton.setButtonText(t("EDITOR_INSERT_ITEM_BUTTON_TEXT"));
      insertItemButton.onClick(() => {
        const key = insertItemInput.inputEl.value;
        insertItemInput.inputEl.value = "";
        if (this.translationDict.find((d) => d.key === key) === void 0) {
          const rowEl = tableEl.createEl("tr");
          rowEl.addClass("i18n-edit__table-row");
          const dictItem = { key, value: key, el: rowEl };
          this.translationDict.push(dictItem);
          const keyCellEl = rowEl.createEl("td");
          keyCellEl.addClass("i18n-edit__table-key");
          const valueCellEl = rowEl.createEl("td");
          valueCellEl.addClass("i18n-edit__table-value");
          valueCellEl.setAttribute("contenteditable", "true");
          valueCellEl.addEventListener("input", () => {
            if (valueCellEl.textContent)
              dictItem.value = valueCellEl.textContent;
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
          });
          valueCellEl.addEventListener("blur", () => {
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
            valueCellEl.innerHTML = res.s2;
          });
          const operateEl2 = rowEl.createEl("td");
          operateEl2.addClass("i18n-edit__table-operate");
          operateEl2.createEl("button", { text: "\u8FD8\u539F", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              dictItem.value = dictItem.key;
              keyCellEl.textContent = dictItem.key;
              valueCellEl.textContent = dictItem.key;
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_RESTORE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          operateEl2.createEl("button", { text: "\u5220\u9664", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              rowEl.remove();
              this.translationDict = this.translationDict.filter((item) => item.key !== dictItem.key);
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          const diff2 = this.diff(dictItem.key, dictItem.value);
          keyCellEl.innerHTML = diff2.s1;
          valueCellEl.innerHTML = diff2.s2;
          rowEl.scrollIntoView({ behavior: "auto", block: "center" });
          this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
        } else {
          this.notices.push(NoticeError(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B")));
        }
      });
    }
  }
  async onunload() {
    for (const notice of this.notices) {
      notice.noticeEl.remove();
    }
    this.translationDoc = "";
  }
  diff(s1, s2) {
    const differences = diffWords(s1, s2);
    let keyHighlightedHTML = "";
    let valueHighlightedHTML = "";
    differences.forEach((part) => {
      if (part.added) {
        valueHighlightedHTML += `<span class='color__text--green'>${part.value}</span>`;
      } else if (part.removed) {
        keyHighlightedHTML += `<span class='color__text--red'>${part.value}</span>`;
      } else {
        keyHighlightedHTML += part.value;
        valueHighlightedHTML += part.value;
      }
    });
    return { s1: keyHighlightedHTML, s2: valueHighlightedHTML };
  }
  async onOpen() {
  }
  async onClose() {
    this.contentEl.empty();
  }
  focus() {
    this.focus();
    this.onClose();
  }
  // 用于返回当前视图的唯一标识。
  getViewType() {
    return EDIT_VIEW_TYPE;
  }
  // 用于返回一个更加人性化的视图名称
  getDisplayText() {
    return t("EDITOR_PUBLIC_HEAD");
  }
  // 用于返回一个更加人性化的视图图标
  getIcon() {
    return "i18n_translate";
  }
};

// src/modal/i18n-agreement-modal.ts
var import_obsidian24 = require("obsidian");
var AgreementModal = class extends import_obsidian24.Modal {
  constructor(app, i18n) {
    super(app);
    this.areement_1 = false;
    this.areement_2 = false;
    this.i18n = i18n;
  }
  async Main() {
    const modalEl = this.contentEl.parentElement;
    modalEl.addClass("i18n-areement__container");
    const titleEl = this.titleEl;
    titleEl.innerHTML = "\u4F7F\u7528\u534F\u8BAE(\u8BF7\u4ED4\u7EC6\u9605\u8BFB)";
    const contentEl = this.contentEl;
    contentEl.innerHTML = `
        <p class='i18n-agreement__text'>1. \u63D2\u4EF6\u7FFB\u8BD1\u8FC7\u7A0B\u6D89\u53CA\u76F4\u63A5\u4FEE\u6539\u539F\u63D2\u4EF6\u7684\u6E90\u4EE3\u7801\u3002\u5C3D\u7BA1i18n\u5DE5\u5177\u4F1A\u4E8B\u5148\u5907\u4EFD\u539F\u59CB\u6587\u4EF6\uFF0C\u4F46\u64CD\u4F5C\u4ECD\u5B58\u5728\u4E00\u5B9A\u98CE\u9669\u3002</p>
        <p class='i18n-agreement__text'>2. \u5F3A\u70C8\u5EFA\u8BAE\u5728\u9996\u6B21\u5C1D\u8BD5\u7FFB\u8BD1\u63D2\u4EF6\u4E4B\u524D\uFF0C\u5148\u5907\u4EFD\u60A8\u7684\u63D2\u4EF6\u76EE\u5F55\u3002\u901A\u5E38\uFF0C\u63D2\u4EF6\u76EE\u5F55\u4F4D\u4E8E .obsidian/plugins \u6587\u4EF6\u5939\u5185\u3002\u5907\u4EFD\u53EF\u4EE5\u786E\u4FDD\u60A8\u7684\u6570\u636E\u5B89\u5168\u3002</p>
        <p class='i18n-agreement__text'>3. \u5728\u8FDB\u884C\u7FFB\u8BD1\u65F6\uFF0C\u8BF7\u8010\u5FC3\u7B49\u5F85\u3002\u76F4\u5230\u7FFB\u8BD1\u6210\u529F\u6216\u660E\u786E\u5F97\u77E5\u5931\u8D25\u7ED3\u679C\u540E\uFF0C\u518D\u7EE7\u7EED\u60A8\u7684\u540E\u7EED\u64CD\u4F5C\u3002</p>
        <p class='i18n-agreement__text'>4. \u82E5\u5728\u4F7F\u7528\u672C\u63D2\u4EF6\u8FDB\u884C\u7FFB\u8BD1\u540E\uFF0C\u53D1\u73B0\u539F\u63D2\u4EF6\u7684\u67D0\u4E9B\u529F\u80FD\u53D7\u5230\u5F71\u54CD\u800C\u5931\u6548\uFF0C\u8BF7\u5378\u8F7D\u91CD\u65B0\u5B89\u88C5\u539F\u63D2\u4EF6\uFF0C\u968F\u540E\u518D\u6B21\u68C0\u9A8C\u529F\u80FD\u662F\u5426\u6062\u590D\u6B63\u5E38\u3002\u82E5\u95EE\u9898\u4F9D\u65E7\u5B58\u5728\uFF0C\u518D\u53BB\u539F\u63D2\u4EF6\u4F5C\u8005\u9879\u76EE\u5730\u5740\u63D0\u4EA4issues\uFF0C\u907F\u514D\u56E0\u672C\u63D2\u4EF6\u5BFC\u81F4\u539F\u63D2\u4EF6\u5931\u6548\uFF0C\u53BB\u6253\u6270\u539F\u4F5C\u8005\u3002(\u91CD\u8981\uFF01\u91CD\u8981\uFF01\u91CD\u8981\uFF01)</p>
        `;
    const areement_1 = new import_obsidian24.Setting(contentEl);
    areement_1.setClass("i18n-agreement__item");
    areement_1.setName("\u6211\u5DF2\u77E5\u6653\u98CE\u9669");
    areement_1.addButton(
      (cb) => cb.setClass("i18n-agreement__check-button").setIcon(this.areement_1 ? "square-check-big" : "square").onClick(() => {
        this.areement_1 = !this.areement_1;
        cb.setIcon(this.areement_1 ? "square-check-big" : "square");
      })
    );
    const areement_2 = new import_obsidian24.Setting(contentEl);
    areement_2.setClass("i18n-agreement__item");
    areement_2.setName("\u5982\u679C\u9047\u5230\u7FFB\u8BD1\u540E\u63D2\u4EF6\u5931\u6548\uFF0C\u70B9\u51FB\u8FD8\u539F\u5373\u53EF\u6062\u590D\u6B63\u5E38");
    areement_2.addButton(
      (cb) => cb.setClass("i18n-agreement__check-button").setIcon(this.areement_2 ? "square-check-big" : "square").onClick(() => {
        this.areement_2 = !this.areement_2;
        cb.setIcon(this.areement_2 ? "square-check-big" : "square");
      })
    );
    const agreement = new import_obsidian24.Setting(contentEl);
    agreement.setClass("i18n-agreement__operate");
    const agreeButton = new import_obsidian24.ButtonComponent(agreement.controlEl);
    agreeButton.setButtonText("\u540C\u610F");
    agreeButton.setCta();
    agreeButton.onClick(async () => {
      if (this.areement_1 === true && this.areement_2 === true) {
        NoticeOperationResult("I18N\u534F\u8BAE", true);
        this.i18n.settings.I18N_AGREEMENT = true;
        this.i18n.saveSettings();
        await this.app.plugins.disablePlugin("i18n");
        await this.app.plugins.enablePlugin("i18n");
        this.close();
      } else {
        NoticeOperationResult("I18N\u534F\u8BAE", false, "\u8BF7\u52FE\u9009\u4F7F\u7528\u534F\u8BAE");
      }
    });
    const consentButton = new import_obsidian24.ButtonComponent(agreement.controlEl);
    consentButton.setButtonText("\u4E0D\u540C\u610F");
    consentButton.onClick(async () => {
      await this.app.plugins.disablePlugin("i18n");
      this.close();
    });
  }
  async onOpen() {
    await this.Main();
  }
  async onClose() {
    this.contentEl.empty();
  }
};

// src/command.ts
var Commands = (app, i18n) => {
  i18n.addCommand({
    id: "i18n-translate",
    name: "\u6253\u5F00\u7FFB\u8BD1\u9762\u677F",
    callback: () => {
      new I18NModal(app, i18n).open();
    }
  });
  i18n.addCommand({
    id: "i18n-help",
    name: "\u6253\u5F00\u5E2E\u52A9\u9762\u677F",
    callback: () => {
      new WizardModal(app, i18n).open();
    }
  });
};
var command_default = Commands;

// src/views/share-view.ts
var fs5 = __toESM(require_lib());
var import_obsidian25 = require("obsidian");
var SHARE_VIEW_TYPE = "i18n-share-view";
var ShareView = class extends import_obsidian25.ItemView {
  constructor(leaf, i18n) {
    super(leaf);
    this.notices = [];
    this.localTranslationJson = void 0;
    // 已翻译行数
    this.count = 0;
    // 是否通过验证
    this.verify = true;
    // 是否为更新提交
    this.updateMark = false;
    this.i18n = i18n;
    this.contentEl.style.setProperty("--i18n-color-primary", this.i18n.settings.I18N_COLOR);
    this.PluginObj = this.i18n.sharePluginObj;
    this.translationDoc = this.i18n.shareTranslationDoc;
  }
  async onload() {
    if (this.translationDoc != "") {
      this.localTranslationJson = fs5.readJsonSync(this.translationDoc);
      const directory = (await this.i18n.api.giteeGetDirectory()).data;
      this.cloudTranslationJson = directory.find((plugin) => plugin.id === this.PluginObj.id);
      if (this.cloudTranslationJson && this.localTranslationJson && this.localTranslationJson.manifest.pluginVersion in this.cloudTranslationJson.translations)
        this.updateMark = true;
    }
    if (this.localTranslationJson && !this.updateMark) {
      const editEl = this.contentEl;
      editEl.addClass("i18n-share__container");
      const manifestEl = editEl.createEl("div", { cls: "i18n-share__manifest" });
      manifestEl.createEl("span", { text: t("EDITOR_TITLE_PLUGIN_VERSION"), cls: "i18n-share__label-wrap" });
      manifestEl.createEl("input", { value: this.localTranslationJson.manifest.pluginVersion, cls: ["i18n-share__label-version-input", "i18n-share__events"] });
      manifestEl.createEl("span", { text: t("EDITOR_TITLE_DESCRIPTION"), cls: "i18n-share__label-wrap" });
      manifestEl.createEl("input", { value: this.localTranslationJson.description.translation, cls: ["i18n-share__description-input", "i18n-share__events"] });
      manifestEl.createEl("button", { text: "\u63D0\u4EA4\u8BD1\u6587", cls: ["i18n-button", "i18n-button--success", "i18n-button-left"] }, async (el) => {
        el.addEventListener("click", async () => {
          if (this.verify) {
            const number = await this.i18n.api.submite(`[\u63D0\u4EA4\u8BD1\u6587] ${this.PluginObj.id}`, deflate(JSON.stringify(this.localTranslationJson)), "\u63D0\u4EA4\u8BD1\u6587");
            if (number != null)
              window.open(`https://gitee.com/zero--two/obsidian-i18n-translation/issues/${number}`);
            NoticeOperationResult("\u63D0\u4EA4\u8BD1\u6587", true);
          } else {
            NoticeOperationResult("\u63D0\u4EA4\u8BD1\u6587", false, "\u8BF7\u68C0\u67E5\u540E\u91CD\u8BD5");
          }
        });
      });
      const untranslatedList = [];
      const dictEl = editEl.createEl("div");
      dictEl.addClass("i18n-share__dict");
      const tableEl = dictEl.createEl("table");
      tableEl.addClass("i18n-share__table");
      for (const key in this.localTranslationJson.dict) {
        if (this.localTranslationJson.dict.hasOwnProperty(key)) {
          if (key === this.localTranslationJson.dict[key])
            untranslatedList.push(this.count);
          const rowEl = tableEl.createEl("tr", { cls: "i18n-share__table-row" });
          rowEl.createEl("td", { text: this.count.toString(), cls: "i18n-share__table-count" });
          this.count += 1;
          const keyCellEl = rowEl.createEl("td", { cls: "i18n-share__table-key" });
          const valueCellEl = rowEl.createEl("td", { cls: "i18n-share__table-value" });
          const differences = diffWords(key, this.localTranslationJson.dict[key]);
          let keyHighlightedHTML = "";
          let valueHighlightedHTML = "";
          differences.forEach((part) => {
            if (part.added) {
              valueHighlightedHTML += `<span class='color__text--green'>${part.value}</span>`;
            } else if (part.removed) {
              keyHighlightedHTML += `<span class='color__text--red'>${part.value}</span>`;
            } else {
              keyHighlightedHTML += part.value;
              valueHighlightedHTML += part.value;
            }
          });
          keyCellEl.innerHTML = keyHighlightedHTML;
          valueCellEl.innerHTML = valueHighlightedHTML;
        }
      }
      if (this.localTranslationJson.description.original === this.localTranslationJson.description.translation) {
        editEl.createEl("div", { text: `[\u63D0\u793A] \u63CF\u8FF0\u672A\u7FFB\u8BD1`, cls: "i18n-share__tip-warning" });
      }
      if (untranslatedList.length > 0)
        editEl.createEl("div", { text: `[\u63D0\u793A] ${untranslatedList.join(",")} \u884C\u672A\u7FFB\u8BD1`, cls: "i18n-share__tip-warning" });
      if (!this.localTranslationJson) {
        editEl.createEl("div", { text: `[\u63D0\u793A] JSON\u683C\u5F0F\u6709\u8BEF\uFF0C\u8BF7\u68C0\u67E5\u540E\u91CD\u8BD5`, cls: "i18n-share__tip-danger" });
        this.verify = false;
      }
      if (untranslatedList.length * 2 >= Object.keys(this.localTranslationJson.dict).length) {
        editEl.createEl("div", { text: "[\u63D0\u793A] \u8BD1\u6587\u5185\u5BB9\u672A\u8D85\u8FC750%", cls: "i18n-share__tip-danger" });
        this.verify = false;
      }
    }
    if (this.localTranslationJson && this.updateMark) {
      const tempCloudTranslationJson = await this.i18n.api.giteeGetTranslation(this.PluginObj.id, this.localTranslationJson.manifest.pluginVersion);
      const editEl = this.contentEl;
      editEl.addClass("i18n-share-update__container");
      const operateEl = editEl.createEl("div", { cls: "i18n-share-update__operate" });
      operateEl.createEl("button", { text: "\u66F4\u65B0\u8BD1\u6587", cls: ["i18n-button", "i18n-button--success", "i18n-button-left"] }, async (el) => {
        el.addEventListener("click", async () => {
          NoticeOperationResult("\u66F4\u65B0\u8BD1\u6587", false, "\u6682\u672A\u5F00\u653E");
        });
      });
      const contrastEl = editEl.createEl("div");
      contrastEl.addClass("i18n-share-update__contrast");
      const cloudTranslationEl = contrastEl.createEl("div");
      cloudTranslationEl.addClass("i18n-share-update__cloud-translation");
      const localTranslationEl = contrastEl.createEl("div");
      localTranslationEl.addClass("i18n-share-update__local-translation");
      cloudTranslationEl.addEventListener("scroll", () => {
        localTranslationEl.scrollTop = cloudTranslationEl.scrollTop;
      });
      localTranslationEl.addEventListener("scroll", () => {
        cloudTranslationEl.scrollTop = localTranslationEl.scrollTop;
      });
      if (this.localTranslationJson != void 0 && tempCloudTranslationJson != void 0) {
        const localTranslationList = JSON.stringify(this.localTranslationJson, null, 4).split("\n");
        const cloudTranslationList = JSON.stringify(tempCloudTranslationJson.data, null, 4).split("\n");
        cloudTranslationList.forEach((line, index) => {
          const lineEl = cloudTranslationEl.createEl("pre");
          if (!localTranslationList.includes(line))
            lineEl.addClass("i18n-share-update__highlight-a");
          lineEl.addClass("i18n-share-update__pre");
          lineEl.innerHTML = line;
        });
        localTranslationList.forEach((line, index) => {
          const lineEl = localTranslationEl.createEl("pre");
          if (!cloudTranslationList.includes(line))
            lineEl.addClass("i18n-share-update__highlight-b");
          lineEl.addClass("i18n-share-update__pre");
          lineEl.innerHTML = line;
        });
      }
      if (JSON.stringify(this.localTranslationJson) === JSON.stringify(tempCloudTranslationJson.data)) {
        editEl.createEl("div", { text: `[\u63D0\u793A] \u5185\u5BB9\u540C\u4E91\u7AEF\u4E00\u81F4`, cls: "i18n-share__tip-danger" });
        this.verify = false;
      }
      if (this.localTranslationJson.manifest.translationVersion <= tempCloudTranslationJson.data.manifest.translationVersion) {
        editEl.createEl("div", { text: `[\u63D0\u793A] \u66F4\u65B0\u65F6\u95F4\u5C0F\u4E8E\u4E91\u7AEF`, cls: "i18n-share__tip-danger" });
        this.verify = false;
      }
    }
  }
  async onunload() {
    for (const notice of this.notices) {
      notice.noticeEl.remove();
    }
  }
  async onOpen() {
  }
  async onClose() {
    this.contentEl.empty();
  }
  focus() {
    this.focus();
    this.onClose();
  }
  getViewType() {
    return SHARE_VIEW_TYPE;
  }
  getDisplayText() {
    return "\u5171\u5EFA\u4E91\u7AEF";
  }
  getIcon() {
    return "i18n_translate";
  }
};

// src/views/admin-view.ts
var import_obsidian26 = require("obsidian");
var ADMIN_VIEW_TYPE = "i18n-admin-view";
var AdminView = class extends import_obsidian26.ItemView {
  constructor(leaf, i18n) {
    super(leaf);
    this.notices = [];
    this.translationDict = [];
    this.i18n = i18n;
    this.contentEl.style.setProperty("--i18n-color-primary", this.i18n.settings.I18N_COLOR);
  }
  async onload() {
    var _a;
    this.translationJson = JSON.parse(inflate(this.i18n.issuesObj.body));
    const editEl = this.contentEl;
    editEl.addClass("i18n-edit__container");
    const manifestEl = editEl.createEl("div");
    manifestEl.addClass("i18n-edit__manifest");
    const pluginVersionLabelEl = manifestEl.createEl("span");
    pluginVersionLabelEl.textContent = t("EDITOR_TITLE_PLUGIN_VERSION");
    pluginVersionLabelEl.addClass("i18n-edit__label-wrap");
    const pluginVersionEl = manifestEl.createEl("input");
    pluginVersionEl.addClass("i18n-edit__plugin-version-input");
    const descriptionLabelEl = manifestEl.createEl("span");
    descriptionLabelEl.textContent = t("EDITOR_TITLE_DESCRIPTION");
    descriptionLabelEl.addClass("i18n-edit__label-wrap");
    const descriptionInputEl = manifestEl.createEl("input");
    descriptionInputEl.addClass("i18n-edit__description-input");
    const dictEl = editEl.createEl("div");
    dictEl.addClass("i18n-edit__dict");
    const searchEl = editEl.createEl("div");
    searchEl.addClass("i18n-edit__search");
    const operateEl = editEl.createEl("div");
    operateEl.addClass("i18n-edit__operate");
    if (this.translationJson != void 0) {
      pluginVersionEl.value = this.translationJson.manifest.pluginVersion;
      pluginVersionEl.addEventListener("input", () => {
        this.translationJson.manifest.pluginVersion = pluginVersionEl.value;
      });
      descriptionInputEl.value = this.translationJson.description.translation;
      descriptionInputEl.addEventListener("input", () => {
        this.translationJson.description.translation = descriptionInputEl.value;
      });
      const rejectButton = new import_obsidian26.ButtonComponent(manifestEl);
      rejectButton.setClass("i18n-button");
      rejectButton.setClass("i18n-button--success");
      rejectButton.setClass("i18n-edit__save-button");
      rejectButton.setClass("i18n-edit__operate-button");
      rejectButton.setButtonText("\u9A73\u56DE");
      rejectButton.onClick(async () => {
        try {
          await this.i18n.api.giteePatchIssue(this.i18n.issuesObj.number, "closed");
          this.notices.push(NoticeOperationResult("\u5BA1\u6838", true, "", 1e3));
        } catch (error) {
          this.notices.push(NoticeOperationResult("\u5BA1\u6838", false, error));
        }
      });
      const approveButton = new import_obsidian26.ButtonComponent(manifestEl);
      approveButton.setClass("i18n-button");
      approveButton.setClass("i18n-button--success");
      approveButton.setClass("i18n-edit__save-button");
      approveButton.setClass("i18n-edit__operate-button");
      approveButton.setButtonText("\u6279\u51C6");
      approveButton.onClick(async () => {
        try {
          this.translationJson.dict = this.translationDict.reduce((acc, item) => {
            acc[item.key] = item.value;
            return acc;
          }, {});
          const title = this.i18n.issuesObj.title.replace("[\u63D0\u4EA4\u8BD1\u6587] ", "");
          const path5 = `translation/dict/${title}/${this.i18n.settings.I18N_LANGUAGE}/${this.translationJson.manifest.pluginVersion}.json`;
          const content = Buffer.from(JSON.stringify(this.translationJson, null, 4)).toString("base64");
          const directoryPath = `translation/directory/${this.i18n.settings.I18N_LANGUAGE}.json`;
          const directorySha = await this.i18n.api.giteeGetSha(`translation/directory/${this.i18n.settings.I18N_LANGUAGE}.json`);
          const directoryContent = await this.i18n.api.giteeGetDirectory();
          const t2 = directoryContent.data.find((obj) => obj.id === title);
          const v1 = this.translationJson.manifest.pluginVersion;
          const v2 = this.translationJson.manifest.translationVersion;
          if (t2) {
            t2.translations[v1] = v2;
          } else {
            let a2 = { id: title, translations: {} };
            a2.translations[v1] = v2;
            directoryContent.data.push(a2);
          }
          console.log(directoryContent.data);
          const a = Buffer.from(JSON.stringify(directoryContent.data, null, 4)).toString("base64");
          console.log(a);
          await this.i18n.api.giteeCreateTranslation(path5, content, `\u63D0\u4EA4\u8BD1\u6587 ${title}`);
          await this.i18n.api.giteePatchIssue(this.i18n.issuesObj.number, "closed");
          await this.i18n.api.giteePutTranslation(directoryPath, a, directorySha.data.sha, `\u76EE\u5F55 ${title}`);
          this.notices.push(NoticeOperationResult("\u5BA1\u6838", true, "", 1e3));
        } catch (error) {
          this.notices.push(NoticeOperationResult("\u5BA1\u6838", false, error));
        }
      });
      const tableEl = dictEl.createEl("table");
      tableEl.addClass("i18n-edit__table");
      for (const key in this.translationJson.dict) {
        if (this.translationJson.dict.hasOwnProperty(key)) {
          const rowEl = tableEl.createEl("tr");
          rowEl.addClass("i18n-edit__table-row");
          const dictItem = { key, value: this.translationJson.dict[key], el: rowEl };
          this.translationDict.push(dictItem);
          const keyCellEl = rowEl.createEl("td");
          keyCellEl.addClass("i18n-edit__table-key");
          const valueCellEl = rowEl.createEl("td");
          valueCellEl.addClass("i18n-edit__table-value");
          valueCellEl.setAttribute("contenteditable", "true");
          valueCellEl.addEventListener("input", () => {
            if (valueCellEl.textContent)
              dictItem.value = valueCellEl.textContent;
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
          });
          valueCellEl.addEventListener("blur", () => {
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
            valueCellEl.innerHTML = res.s2;
          });
          const operateEl2 = rowEl.createEl("td");
          operateEl2.addClass("i18n-edit__table-operate");
          operateEl2.createEl("button", { text: "\u8FD8\u539F", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              dictItem.value = dictItem.key;
              keyCellEl.textContent = dictItem.key;
              valueCellEl.textContent = dictItem.key;
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_RESTORE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          operateEl2.createEl("button", { text: "\u5220\u9664", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              rowEl.remove();
              this.translationDict = this.translationDict.filter((item) => item.key !== dictItem.key);
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          const diff2 = this.diff(dictItem.key, dictItem.value);
          keyCellEl.innerHTML = diff2.s1;
          valueCellEl.innerHTML = diff2.s2;
        }
      }
      let matchingItems;
      let selectSearchCount = 0;
      let isSearch = false;
      let Aa = false;
      const searchInput = new import_obsidian26.SearchComponent(searchEl).onChange((value) => {
        matchingItems = Aa ? this.translationDict.filter((item) => item.key.includes(value) || item.value.includes(value)) : this.translationDict.filter((item) => item.key.toLowerCase().includes(value.toLowerCase()) || item.value.toLowerCase().includes(value.toLowerCase()));
        if (matchingItems.length > 0 && value !== "") {
          isSearch = true;
          searchCountButton.setButtonText(`${selectSearchCount + 1}/${matchingItems.length}`);
          selectSearchCount = 0;
          matchingItems[selectSearchCount].el.scrollIntoView({ behavior: "auto", block: "center" });
          matchingItems[selectSearchCount].el.classList.remove("animate");
          void matchingItems[selectSearchCount].el.offsetWidth;
          matchingItems[selectSearchCount].el.classList.add("animate");
        } else {
          isSearch = false;
          searchCountButton.setButtonText(`0/0`);
        }
      });
      searchInput.setClass("i18n-edit__search-box");
      searchInput.inputEl.addClass("i18n-edit__search-input");
      const AaButton = new import_obsidian26.ButtonComponent(searchEl).setClass("i18n-button").setClass("i18n-button--primary").setClass("i18n-edit__search-button").setIcon("a-large-small").onClick(() => {
        if (Aa) {
          Aa = false;
          AaButton.buttonEl.removeClass("i18n-button--success");
          AaButton.setClass("i18n-button--primary");
        } else {
          Aa = true;
          AaButton.buttonEl.removeClass("i18n-button--primary");
          AaButton.setClass("i18n-button--success");
        }
      });
      new import_obsidian26.ButtonComponent(searchEl).setClass("i18n-button").setClass("i18n-button--primary").setClass("i18n-edit__search-button").setIcon("arrow-up").onClick(() => {
        if (isSearch) {
          if (selectSearchCount > 0) {
            selectSearchCount -= 1;
          } else if (selectSearchCount == 0) {
            selectSearchCount = matchingItems.length - 1;
          }
          searchCountButton.setButtonText(`${selectSearchCount + 1}/${matchingItems.length}`);
          matchingItems[selectSearchCount].el.scrollIntoView({ behavior: "auto", block: "center" });
          matchingItems[selectSearchCount].el.classList.remove("animate");
          void matchingItems[selectSearchCount].el.offsetWidth;
          matchingItems[selectSearchCount].el.classList.add("animate");
        }
      });
      new import_obsidian26.ButtonComponent(searchEl).setClass("i18n-button").setClass("i18n-button--primary").setClass("i18n-edit__search-button").setIcon("arrow-down").onClick(() => {
        if (isSearch) {
          if (selectSearchCount < matchingItems.length - 1) {
            selectSearchCount += 1;
          } else if (selectSearchCount == matchingItems.length - 1) {
            selectSearchCount = 0;
          }
          searchCountButton.setButtonText(`${selectSearchCount + 1}/${matchingItems.length}`);
          matchingItems[selectSearchCount].el.scrollIntoView({ behavior: "auto", block: "center" });
          matchingItems[selectSearchCount].el.classList.remove("animate");
          void matchingItems[selectSearchCount].el.offsetWidth;
          matchingItems[selectSearchCount].el.classList.add("animate");
        }
      });
      const searchCountButton = new import_obsidian26.ButtonComponent(searchEl).setClass("i18n-button").setClass("i18n-button--primary").setClass("i18n-edit__search-button").setButtonText("0/0");
      const insertItemInput = new import_obsidian26.SearchComponent(operateEl);
      (_a = insertItemInput.inputEl.parentElement) == null ? void 0 : _a.addClass("i18n-edit__operate-input");
      new import_obsidian26.ButtonComponent(operateEl).setClass("i18n-button").setClass("i18n-button--primary").setClass("i18n-edit__operate-button").setButtonText(t("EDITOR_INSERT_ITEM_BUTTON_TEXT")).onClick(() => {
        const key = insertItemInput.inputEl.value;
        insertItemInput.inputEl.value = "";
        if (this.translationDict.find((d) => d.key === key) === void 0) {
          const rowEl = tableEl.createEl("tr");
          rowEl.addClass("i18n-edit__table-row");
          const dictItem = { key, value: key, el: rowEl };
          this.translationDict.push(dictItem);
          const keyCellEl = rowEl.createEl("td");
          keyCellEl.addClass("i18n-edit__table-key");
          const valueCellEl = rowEl.createEl("td");
          valueCellEl.addClass("i18n-edit__table-value");
          valueCellEl.setAttribute("contenteditable", "true");
          valueCellEl.addEventListener("input", () => {
            if (valueCellEl.textContent)
              dictItem.value = valueCellEl.textContent;
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
          });
          valueCellEl.addEventListener("blur", () => {
            const res = this.diff(dictItem.key, dictItem.value);
            keyCellEl.innerHTML = res.s1;
            valueCellEl.innerHTML = res.s2;
          });
          const operateEl2 = rowEl.createEl("td");
          operateEl2.addClass("i18n-edit__table-operate");
          operateEl2.createEl("button", { text: "\u8FD8\u539F", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              dictItem.value = dictItem.key;
              keyCellEl.textContent = dictItem.key;
              valueCellEl.textContent = dictItem.key;
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_RESTORE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          operateEl2.createEl("button", { text: "\u5220\u9664", cls: ["i18n-edit__operate-operate-button"] }, async (el) => {
            el.addEventListener("click", async () => {
              rowEl.remove();
              this.translationDict = this.translationDict.filter((item) => item.key !== dictItem.key);
              this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_DELETE_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
            });
          });
          const diff2 = this.diff(dictItem.key, dictItem.value);
          keyCellEl.innerHTML = diff2.s1;
          valueCellEl.innerHTML = diff2.s2;
          rowEl.scrollIntoView({ behavior: "auto", block: "center" });
          this.notices.push(NoticeSuccess(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_A"), 1e3));
        } else {
          this.notices.push(NoticeError(t("EDITOR_PUBLIC_HEAD"), t("EDITOR_INSERT_ITEM_BUTTON_NOTICE_CONTENT_B")));
        }
      });
    }
  }
  async onunload() {
    for (const notice of this.notices) {
      notice.noticeEl.remove();
    }
  }
  async showData() {
  }
  diff(s1, s2) {
    const differences = diffWords(s1, s2);
    let keyHighlightedHTML = "";
    let valueHighlightedHTML = "";
    differences.forEach((part) => {
      if (part.added) {
        valueHighlightedHTML += `<span class='color__text--green'>${part.value}</span>`;
      } else if (part.removed) {
        keyHighlightedHTML += `<span class='color__text--red'>${part.value}</span>`;
      } else {
        keyHighlightedHTML += part.value;
        valueHighlightedHTML += part.value;
      }
    });
    return { s1: keyHighlightedHTML, s2: valueHighlightedHTML };
  }
  async onOpen() {
  }
  async onClose() {
    this.contentEl.empty();
  }
  focus() {
    this.focus();
    this.onClose();
  }
  getViewType() {
    return ADMIN_VIEW_TYPE;
  }
  getDisplayText() {
    return "\u5BA1\u6838\u9762\u677F";
  }
  getIcon() {
    return "i18n_translate";
  }
};

// src/main.ts
var I18N = class extends import_obsidian27.Plugin {
  constructor() {
    super(...arguments);
    // [变量] 标记汉化标记
    this.ignoreMark = true;
    // [变量][编辑器] 选中译文地址
    this.editorTranslationDoc = "";
    // [变量][编辑器] 选中本地译文地址
    this.selectLocalContrastTranslation = "";
  }
  // 当Obsidian启动时默认调用
  async onload() {
    icon_default();
    await this.loadSettings();
    document.documentElement.style.setProperty("--i18n-color-primary", this.settings.I18N_COLOR);
    if (this.settings.I18N_AGREEMENT) {
      console.log(`%c ${this.manifest.name} %c v${this.manifest.version} `, `padding: 2px; border-radius: 2px 0 0 2px; color: #fff; background: #5B5B5B;`, `padding: 2px; border-radius: 0 2px 2px 0; color: #fff; background: #409EFF;`);
      this.api = new API(this);
      this.firstRun();
      this.checkUpdates();
      if (this.settings.I18N_SUBMIT_TIME !== new Date().getDate()) {
        this.settings.I18N_SUBMIT_TIME = new Date().getDate();
        this.settings.I18N_SUBMIT_HISTORY = [];
        await this.saveSettings();
      }
      const temp = await this.api.submitUrl();
      if (temp != void 0)
        this.tempSubmitUrl = atob(temp);
      await this.ignoreCache();
      await this.directoryCache();
      if (this.settings.I18N_MODE_LDT && this.settings.I18N_AUTOMATIC_UPDATE)
        await this.i18nAutomaticUpdate(this.app);
      if (this.settings.I18N_MODE_IMT)
        this.activateIMT();
      this.addRibbonIcon("i18n_translate", t("I18N_NAME"), (evt) => {
        new I18NModal(this.app, this).open();
      });
      if (this.settings.I18N_ADMIN_MODE)
        this.i18nReviewEl = this.addRibbonIcon("i18n-review", "I18N\u5BA1\u6838", (evt) => {
          new AdminModal(this.app, this).open();
        });
      this.registerView(ADMIN_VIEW_TYPE, (leaf) => new AdminView(leaf, this));
      this.registerView(EDIT_VIEW_TYPE, (leaf) => new EditorView(leaf, this));
      this.registerView(SHARE_VIEW_TYPE, (leaf) => new ShareView(leaf, this));
      command_default(this.app, this);
      if (this.settings.I18N_MODE_LDT && this.settings.I18N_NAME_TRANSLATION) {
        this.trenslatorPluginsName();
      }
      this.addSettingTab(new I18nSettingTab(this.app, this));
    } else {
      new AgreementModal(this.app, this).open();
    }
  }
  // 命周期函数在插件被禁用时触发。
  async onunload() {
    this.detachEditView();
    this.restorePluginsName();
    if (this.settings.I18N_MODE_IMT)
      await this.enableIMT();
  }
  onUserEnable() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async firstRun() {
    if (this.settings.I18N_WIZARD) {
      new WizardModal(this.app, this).open();
      this.settings.I18N_UUID = v4_default();
      this.settings.I18N_WIZARD = false;
      this.saveSettings();
    }
  }
  async checkUpdates() {
    this.api.version(this.manifest.version);
  }
  async ignoreCache() {
    if (!this.settings.I18N_MODE_NDT || !this.settings.I18N_IGNORE) {
      this.ignoreMark = false;
      return;
    }
    const res = await this.api.getMark();
    if (!res.state) {
      this.ignoreMark = false;
      NoticeOperationResult(t("SETTING_NDT_PUBLIC_IGNORE_HEAD"), false, t("SETTING_NDT_IGNORE_NOTICE_B"));
      return;
    }
    try {
      this.ignorePlugins = res.data;
      this.ignoreMark = true;
      NoticeOperationResult(t("SETTING_NDT_PUBLIC_IGNORE_HEAD"), true);
    } catch (error) {
      this.ignoreMark = false;
      NoticeOperationResult(t("SETTING_NDT_PUBLIC_IGNORE_HEAD"), false, error);
    }
  }
  async directoryCache() {
    if (!this.settings.I18N_MODE_NDT) {
      this.translationDirectoryMark = false;
      return;
    }
    const res = await this.api.giteeGetDirectory();
    if (!res.state) {
      this.translationDirectoryMark = false;
      NoticeOperationResult(t("SETTING_NDT_PUBLIC_MODE_HEAD"), false, t("SETTING_NDT_MODE_NOTICE_B"));
      return;
    }
    try {
      this.translationDirectory = res.data;
      this.translationDirectoryMark = true;
      NoticeOperationResult(t("SETTING_NDT_PUBLIC_MODE_HEAD"), true);
    } catch (error) {
      this.translationDirectoryMark = false;
      NoticeOperationResult(t("SETTING_NDT_PUBLIC_MODE_HEAD"), false, error);
    }
  }
  async i18nAutomaticUpdate(app) {
    var _a;
    if (this.settings.I18N_MODE_LDT && this.settings.I18N_AUTOMATIC_UPDATE) {
      let plugins = [];
      NoticeSuccess(t("SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD"), t("SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_A"));
      plugins = Object.values(app.plugins.manifests).filter((item) => item.id !== "i18n");
      let updateitem = 0;
      for (const plugin of plugins) {
        const pluginDir = path4.join(path4.normalize(app.vault.adapter.getBasePath()), (_a = plugin.dir) != null ? _a : "");
        const stateObj = fs6.pathExistsSync(path4.join(pluginDir, "lang", "state.json")) ? new State(path4.join(pluginDir, "lang", "state.json")) : void 0;
        if (stateObj != void 0 && stateObj.getState() && plugin.version != stateObj.getPluginVersion()) {
          try {
            updateitem = updateitem + 1;
            fs6.removeSync(path4.join(pluginDir, "duplicate.js"));
            stateObj.reset();
            fs6.copySync(path4.join(pluginDir, "main.js"), path4.join(pluginDir, "duplicate.js"));
            const translationJson = fs6.readJsonSync(path4.join(pluginDir, "lang", `${this.settings.I18N_LANGUAGE}.json`));
            let mainString = fs6.readFileSync(path4.join(pluginDir, "main.js")).toString();
            for (const key in translationJson.dict)
              mainString = mainString.replaceAll(key, translationJson.dict[key]);
            fs6.writeFileSync(path4.join(pluginDir, "main.js"), mainString);
            const manifestJSON = fs6.readJsonSync(path4.join(pluginDir, "manifest.json"));
            manifestJSON.description = translationJson.description.translation;
            fs6.writeJsonSync(path4.join(pluginDir, "manifest.json"), manifestJSON, { spaces: 4 });
            stateObj.setState(true);
            stateObj.setPluginVersion(plugin.version);
            stateObj.setTranslationVersion(translationJson.manifest.translationVersion);
            await this.app.plugins.disablePlugin(plugin.id);
            await this.app.plugins.enablePlugin(plugin.id);
          } catch (error) {
            NoticeError(t("SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD"), error);
          }
        }
      }
      updateitem == 0 ? NoticeSuccess(t("SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD"), t("SETTING_LDT_AUTOMATIC_UPDATE_NOTICE_B")) : NoticeSuccess(t("SETTING_LDT_PUBLIC_AUTOMATIC_UPDATE_HEAD"), `\u66F4\u65B0${updateitem}\u4E2A\u63D2\u4EF6`);
    }
  }
  trenslatorPluginsName() {
    const thisnDir = path4.join(path4.normalize(this.app.vault.adapter.getBasePath()), path4.join(this.manifest.dir, "name.json"));
    this.nameTranslationJSON = fs6.pathExistsSync(thisnDir) ? fs6.readJsonSync(thisnDir) : {};
    const translationPluginsManifests = Object.values(this.app.plugins.manifests);
    this.originalPluginsManifests = JSON.parse(JSON.stringify(translationPluginsManifests));
    translationPluginsManifests.forEach((plugin) => {
      if (this.nameTranslationJSON.hasOwnProperty(plugin.name) && this.nameTranslationJSON[plugin.name] !== "") {
        plugin.name = `${plugin.name} ${this.settings.I18N_NAME_TRANSLATION_PREFIX}${this.nameTranslationJSON[plugin.name]}${this.settings.I18N_NAME_TRANSLATION_SUFFIX}`;
      }
    });
  }
  restorePluginsName() {
    if (this.originalPluginsManifests !== void 0) {
      const originalPluginsById = new Map(this.originalPluginsManifests.map((oplugin) => [oplugin.id, oplugin]));
      const pluginManifests = Object.values(this.app.plugins.manifests);
      pluginManifests.forEach((plugin) => {
        const originalPlugin = originalPluginsById.get(plugin.id);
        if (originalPlugin)
          plugin.name = originalPlugin.name;
      });
    }
  }
  reloadPluginsName() {
    this.restorePluginsName();
    this.trenslatorPluginsName();
  }
  async activateEditView() {
    const { workspace } = this.app;
    this.detachEditView();
    let leaf = null;
    const leaves = workspace.getLeavesOfType(EDIT_VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf("window");
      if (leaf != null)
        await leaf.setViewState({ type: EDIT_VIEW_TYPE, active: true });
    }
    if (leaf != null)
      workspace.revealLeaf(leaf);
  }
  detachEditView() {
    this.app.workspace.detachLeavesOfType(EDIT_VIEW_TYPE);
  }
  async activateAdminView() {
    const { workspace } = this.app;
    this.detachEditView();
    let leaf = null;
    const leaves = workspace.getLeavesOfType(ADMIN_VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf("window");
      if (leaf != null)
        await leaf.setViewState({ type: ADMIN_VIEW_TYPE, active: true });
    }
    if (leaf != null)
      workspace.revealLeaf(leaf);
  }
  detachAdminView() {
    this.app.workspace.detachLeavesOfType(ADMIN_VIEW_TYPE);
  }
  async activateShareView() {
    const { workspace } = this.app;
    this.detachEditView();
    let leaf = null;
    const leaves = workspace.getLeavesOfType(SHARE_VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf("window");
      if (leaf != null)
        await leaf.setViewState({ type: SHARE_VIEW_TYPE, active: true });
    }
    if (leaf != null)
      workspace.revealLeaf(leaf);
  }
  detachShareView() {
    this.app.workspace.detachLeavesOfType(SHARE_VIEW_TYPE);
  }
  activateIMT() {
    if (!window.immersiveTranslateConfig) {
      window.immersiveTranslateConfig = { "pageRule": this.settings.I18N_IMT_CONFIG };
      console.log(window.immersiveTranslateConfig);
      const script = document.createElement("script");
      script.classList.add("imt-script");
      script.async = true;
      script.src = Url.SDK_URL;
      script.onload = () => {
        setTimeout(() => {
          var _a;
          const shadowRoot = (_a = document.querySelector("#immersive-translate-popup")) == null ? void 0 : _a.shadowRoot;
          if (shadowRoot) {
            const closeBtn = shadowRoot.querySelector(".imt-fb-container>div");
            if (closeBtn) {
              closeBtn.style.display = "none";
            }
            const setBtn = shadowRoot.querySelector(".popup-container>footer");
            if (setBtn) {
              setBtn.style.display = "none";
            }
          }
        }, 1e3);
      };
      document.body.append(script);
    }
  }
  async enableIMT() {
    var _a, _b;
    const imtPopup = document.querySelector("#immersive-translate-popup");
    const html = document.querySelector("html");
    const state = (_a = html == null ? void 0 : html.getAttribute) == null ? void 0 : _a.call(html, "imt-state");
    state === "dual" && restoreTranslate();
    const imtScript = document.querySelector(".imt-script");
    const styleList = [...document.querySelectorAll('[data-id*="immersive-translate"]')];
    const removeList = [];
    [imtPopup, imtScript, styleList].filter((v) => !!v).forEach((v) => Array.isArray(v) ? v.forEach((s) => s && removeList.push(s)) : v && removeList.push(v));
    removeList.forEach((v) => {
      var _a2;
      return (_a2 = v == null ? void 0 : v.remove) == null ? void 0 : _a2.call(v);
    });
    (_b = document.querySelectorAll(`[data-immersive-translate-walked]`)) == null ? void 0 : _b.forEach((v) => v.removeAttribute("data-immersive-translate-walked"));
    html == null ? void 0 : html.removeAttribute("imt-state");
    html == null ? void 0 : html.removeAttribute("imt-trans-position");
    await clearStorage();
  }
};

// main.ts
var main_default = I18N;
//# sourceMappingURL=data:application/json;base64,
