import{_ as a,c as e,a as s,o as n}from"./app-rzor12pK.js";const r={};function i(o,t){return n(),e("div",null,t[0]||(t[0]=[s(`<p>在开始之前，我们需要重新认识和理解一些术语，因为你在工作中用到的行可能话并不准确。</p><ul><li><strong>明文</strong> ：加密或哈希之前的数据，通常指文本，但不总是，因为它可以是照片或其他文件。</li><li><strong>编码</strong>：这不是一种加密形式，只是一种数据表形式，如base64或十六进制，编码是立即可逆的。</li><li><strong>Hash</strong>：哈希是哈希函数的输出，哈希也可以用作动词<code>to hash</code> 意思是产生某些数据的哈希值。<strong>（hash有的音译为<code>哈希</code> 有的意译为<code>散列</code>都是一个东西）</strong>。</li><li><strong>暴力破解</strong>：（Brute force）通过尝试每个不同的密码或每个不同的秘钥来猜测密码（有的人喜欢叫“暴力猜解”）。</li><li><strong>密码分析</strong>：通过找到底层数学的弱点来攻击密码学。</li></ul><details class="hint-container details"><summary>base64 是加密（encryption）还是编码（encoding）？</summary><p><strong>答案：</strong> <code>encoding</code></p></details><h2 id="hash-函数是什么" tabindex="-1"><a class="header-anchor" href="#hash-函数是什么"><span>hash 函数是什么？</span></a></h2><p>哈希函数(hash function)与加密完全不同。没有键，这意味着不可能（或非常困难）从输出返回到输入（不可逆）。</p><p>hash function 接受一些任意大小的输入数据，并创建该数据的摘要。输出是固定大小。很难预测任何输入的输出是什么，反之亦然。好的hash算法计算起来（相对）快，反转（从输出确定输入）起来慢。输入数据中的任何微小变化（即使一个单位）都将导致输出的巨大变化。</p><p>has function 的输出通常是原始字节，然后对其进行编码。常见的编码是64进制或16进制，解码这些不会给你任何有用的东西。</p><h2 id="为什么要关心" tabindex="-1"><a class="header-anchor" href="#为什么要关心"><span>为什么要关心？</span></a></h2><p>hash在网络安全中经常使用。当你登录TryHackMe时，它使用hash来验证你的密码。当你登录到你的电脑，也使用hash来验证你的密码。您与hash之间的交换比你想象的要多，主要是在密码的上下文中。</p><h2 id="什么事hash冲突" tabindex="-1"><a class="header-anchor" href="#什么事hash冲突"><span>什么事hash冲突？</span></a></h2><p>hash 冲突是两个不同的输入给出相同的输出。hash function 旨在尽可能避免这种情况，特别是能够设计（故意创建）冲突。</p><p>由于鸽子洞效应，冲突是不可避免的。鸽子洞效应是，hash function 的输出值数量是固定的，但输入值的数量是任意的。由于输入比输出多，因此某些输入必须给出相同的输出。如果你有128只鸽子和96个鸽子洞，一些鸽子将不得不分享相同的洞。</p><p><strong><code>MD5</code> 和 <code>SHA1</code> 已遭受攻击</strong>，由于工程上的哈希碰撞而在技术上变得不安全。然而，目前还没有一种攻击能同时在这两种算法中产生碰撞，所以如果你使用 MD5 哈希值和 SHA1 哈希值进行比较，你会发现它们是不同的。MD5 碰撞示例可从 <a href="https://www.mscs.dal.ca/~selinger/md5collision/" target="_blank" rel="noopener noreferrer">https://www.mscs.dal.ca/~selinger/md5collision/</a> 获取，SHA1 碰撞的详细信息可从 <a href="https://shattered.io/" target="_blank" rel="noopener noreferrer">https://shattered.io/</a> 获取。由于这些原因，你不应该信任这两种算法来对密码或数据进行哈希处理。</p><h2 id="回答以下问题" tabindex="-1"><a class="header-anchor" href="#回答以下问题"><span>回答以下问题</span></a></h2><details class="hint-container details"><summary>MD5哈希函数的输出大小（以字节 <em>bytes</em> 为单位）是多少？</summary><p><strong>答案</strong>：<code>16</code></p></details><details class="hint-container details"><summary>你能避免哈希冲突吗？(Yea/Nay)</summary><p><strong>答案：</strong> <code>Nay</code></p></details><details class="hint-container details"><summary>如果你有一个8位的哈希输出，有多少可能的哈希？</summary><p><strong>答案</strong>：<code>256</code></p></details><details class="hint-container details"><summary>参考</summary><div class="language-cardlink line-numbers-mode" data-highlighter="shiki" data-ext="cardlink" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>url: https://nakamoto.com/hash-functions/#:~:text=This%20should%20be%20obvious%20when,for%2028%20possible%20values.</span></span>
<span class="line"><span>title: &quot;Hash Functions&quot;</span></span>
<span class="line"><span>description: &quot;The most important building block for any cryptocurrency is the hash function.&quot;</span></span>
<span class="line"><span>host: nakamoto.com</span></span>
<span class="line"><span>favicon: https://nakamoto.com/content/images/size/w256h256/2020/01/bitcoin-flag-transparent--1-.png</span></span>
<span class="line"><span>image: https://nakamoto.com/content/images/size/w1200/2020/01/hash-functions.png</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="使用hashing" tabindex="-1"><a class="header-anchor" href="#使用hashing"><span>使用hashing</span></a></h2><h4 id="hash-用于防止密码泄露" tabindex="-1"><a class="header-anchor" href="#hash-用于防止密码泄露"><span>hash 用于防止密码泄露</span></a></h4><p>如果密码明文存储或者使用简单的加密进行存储，一但泄露，很容易被破解。如果数据库中不存放密码，只存放hash值，就会避免密码泄露。</p><h4 id="彩虹表" tabindex="-1"><a class="header-anchor" href="#彩虹表"><span>彩虹表</span></a></h4><p>由于在hash函数中，如果输入相同的字符串，hash值总是相同，因此人们可以制作一个<strong>彩虹表</strong>，用于hash函数的反向查询，从而<strong>打破</strong>hash。以下是一个<strong>彩虹表</strong>的例子：</p><table><thead><tr><th style="text-align:center;">Hash</th><th style="text-align:center;">Password</th></tr></thead><tbody><tr><td style="text-align:center;">02c75fb22c75b23dc963c7eb91a062cc</td><td style="text-align:center;">zxcvbnm</td></tr><tr><td style="text-align:center;">b0baee9d279d34fa1dfd71aadb908c3f</td><td style="text-align:center;">11111</td></tr><tr><td style="text-align:center;">c44a471bd78cc6c2fea32b9fe028d30a</td><td style="text-align:center;">asdfghjkl</td></tr><tr><td style="text-align:center;">d0199f51d2728db6011945145a1b607a</td><td style="text-align:center;">basketball</td></tr><tr><td style="text-align:center;">dcddb75469b4b4875094e14561e573d8</td><td style="text-align:center;">000000</td></tr><tr><td style="text-align:center;">e10adc3949ba59abbe56e057f20f883e</td><td style="text-align:center;">123456</td></tr><tr><td style="text-align:center;">e19d5cd5af0378da05f63f891c7467af</td><td style="text-align:center;">abcd1234</td></tr><tr><td style="text-align:center;">e99a18c428cb38d5f260853678922e03</td><td style="text-align:center;">abc123</td></tr><tr><td style="text-align:center;">fcea920f7412b5da7be0cf42b8c93759</td><td style="text-align:center;">1234567</td></tr></tbody></table><h4 id="防止彩虹表" tabindex="-1"><a class="header-anchor" href="#防止彩虹表"><span>防止彩虹表</span></a></h4><p>为了防止<strong>彩虹表（rainbow tables）</strong>，人们想到了在hash中加<strong>盐(salt)</strong> 的方法，盐随机生成并存储在数据库中，每个用户都是唯一的。<strong>盐(salt)</strong> 被添加到hash值的开头或者结尾。 这意着用户即使使用相同的密码，任然会生成不同的hash值。</p><ul><li><strong>盐(salt)</strong> 用于防止彩虹表</li><li>每个用户的<strong>盐(salt)</strong> 是随机生成，值唯一</li><li><strong>盐(salt)</strong> 被添加到hash值的开头或结尾</li></ul><blockquote><p>[!TIP] think 从理论上讲，如果为所有用户使用相同的盐，但这意味着重复的密码仍然具有相同的哈希值，并且彩虹表仍然可以使用该盐创建特定的密码。</p></blockquote><h3 id="回答以下问题-1" tabindex="-1"><a class="header-anchor" href="#回答以下问题-1"><span>回答以下问题</span></a></h3><details class="hint-container details"><summary>使用彩虹表手动破解 hash <code>d0199f51d2728db6011945145a1b607a</code></summary><p><strong>答案:</strong> <code>basketball</code></p><p><em>提示： 可利用此房间给出的彩虹表的例子，进行查询</em></p></details><details class="hint-container details"><summary>使用在线工具破解哈希 <code>5b31f93c09ad1d065c0491b764d04933</code></summary><p><strong>答案:</strong> <code>tryhackme</code><em>提示：我们可以使用此<a href="https://crackstation.net" target="_blank" rel="noopener noreferrer">网站(需翻墙)</a>或者<a href="https://hashes.com/zh/decrypt/hash" target="_blank" rel="noopener noreferrer">此网站</a>进行线上破解</em></p></details><details class="hint-container details"><summary>你应该加密密码吗？ Yea/Nay</summary><p><strong>答案:</strong> <code>Nay</code></p><p><em>提示：在此房间中，认为密码加密不是那么安全，最好对密码进行hash。</em></p></details>`,32)]))}const l=a(r,[["render",i]]),h=JSON.parse('{"path":"/penetration/rjzda7s8/","title":"Hash与加密","lang":"zh-CN","frontmatter":{"title":"Hash与加密","createTime":"2024/11/16 19:34:46","permalink":"/penetration/rjzda7s8/"},"headers":[],"readingTime":{"minutes":4.77,"words":1431},"git":{"updatedTime":1744727076000,"contributors":[{"name":"suxiuf","username":"suxiuf","email":"suxiufengcool@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/suxiuf?v=4","url":"https://github.com/suxiuf"},{"name":"suxiufeng","username":"suxiufeng","email":"suxiufengcool@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/suxiufeng?v=4","url":"https://github.com/suxiufeng"},{"name":"kali","username":"kali","email":"kali@kali","commits":1,"avatar":"https://avatars.githubusercontent.com/kali?v=4","url":"https://github.com/kali"}]},"filePathRelative":"notes/penetration/1.tryhackme/Hash与加密.md"}');export{l as comp,h as data};
