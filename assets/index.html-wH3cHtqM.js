import{_ as s,c as a,a as e,o as t}from"./app-rzor12pK.js";const l="/assets/file-20241022094913-BZwwqkGa.png",n={};function h(p,i){return t(),a("div",null,i[0]||(i[0]=[e('<ul><li><strong>a无状态防火墙</strong> 第一个 Linux 防火墙是数据包过滤防火墙，即无状态防火墙。无状态防火墙可以检查 IP 和 TCP/UDP 标头中的某些字段以决定数据包，但不维护有关正在进行的 TCP 连接的信息。因此，数据包可以操纵一些 TCP 标志，使其看起来好像是正在进行的连接的一部分，并规避某些限制。</li><li><strong>有状态防火墙</strong> 当前的 Linux 防火墙是有状态防火墙;它们跟踪正在进行的连接，并根据 IP 和 TCP/UDP 标头中的特定字段以及数据包是否是正在进行的连接的一部分来限制数据包。</li></ul><h2 id="linux防火墙过滤字段" tabindex="-1"><a class="header-anchor" href="#linux防火墙过滤字段"><span>Linux防火墙过滤字段</span></a></h2><ul><li>进入防火墙规则的 IP 标头字段包括： <ol><li>源 IP 地址</li><li>目标 IP 地址</li></ol></li><li>防火墙规则主要关注的 TCP/UDP 标头字段包括： 3. 源 TCP/UDP 端口 4. 目标 TCP/UDP 端口</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p>值得注意的是，Linux防火墙不可能根据进程来允许和拒绝数据包，而是根据端口号来允许和拒绝数据包。如果您希望 Web 浏览器访问 Web，则必须允许相应的端口，例如端口 80 和 443。此限制与 MS Windows 的内置防火墙不同，后者可以限制和允许每个应用程序的流量。</p></div><p>在 Linux 系统上，可以使用 <a href="https://github.com/SELinuxProject" target="_blank" rel="noopener noreferrer">SELinux</a> 或 <a href="https://www.apparmor.net/" target="_blank" rel="noopener noreferrer">AppArmor</a> 等解决方案对进程及其网络访问进行更精细的控制。例如，我们可以只允许 <code>/usr/bin/apache2</code> 二进制文件使用端口 80 和 443，同时阻止任何其他二进制文件在底层系统上这样做。这两种工具都根据特定进程或二进制文件实施访问控制策略，从而提供了一种更全面的方法来保护 Linux 系统。</p><h2 id="网络过滤器" tabindex="-1"><a class="header-anchor" href="#网络过滤器"><span>网络过滤器</span></a></h2><p><code>netfilter</code> 是linux防火墙的核心，其为LInux 内核 2.4.x 及更高版本提供数据包过滤。<code>netfilter</code> 需要与前端程序进行配合，比如<code>iptables</code>或<code>nftables</code> 来管理网络。</p><p>在下面示例中，我们使用不同的前端对netfileter进行交互，以允许网络中的任何ssh_Clent 都可以连接到ssh_Server. <img src="'+l+`" alt=""></p><h3 id="iptables" tabindex="-1"><a class="header-anchor" href="#iptables"><span>iptables</span></a></h3><p>在开始前，我们要记住以下几个链：</p><ul><li>Input (输入)：此链使用于传入防火墙的数据包</li><li>Output（输出）：此链适应于从防火墙传出的数据包</li><li>Forward（向前）：此链适用于通过系统路由的数据包</li></ul><p>假设我们希望能够远程访问系统上的SSH服务器。为何让SSH服务器能够与外部网络通信，我们要做两件事：</p><ul><li>接受传入到TCP端口22的数据包。</li><li>接受来自TCP端口22的传出数据包。</li></ul><p>让我们将上述两个需求转换为<code>iptables</code>命令:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iptables</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> INPUT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tcp</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --dport</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 22</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ACCEPT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iptables</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> OUTPUT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tcp</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --sport</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 22</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ACCEPT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>-A INPUT</code> 附加到 INPUT 链，即发往系统的数据包。</p></li><li><p><code>-p tcp --dport 22</code> 适用于目标端口 22 的 TCP 协议。</p></li><li><p><code>-A OUTPUT</code> 附加到 OUTPUT 链，即离开系统的数据包。</p></li><li><p><code>-p tcp --sport 22</code> 适用于源端口 22 的 TCP 协议。</p></li><li><p><code>-j ACCEPT</code> 指定目标规则 ACCEPT(允许通过)。 假设您只想允许流量流向本地 SSH 服务器并阻止其他所有内容。在这种情况下，您需要再添加两个规则来设置防火墙的默认行为：</p></li><li><p><code>iptables -A INPUT -j DROP</code> 来阻止之前规则中不允许的所有传入流量。</p></li><li><p><code>iptables -A OUTPUT -j DROP</code> 来阻止之前规则中不允许的所有传出流量。 简而言之，需要按以下顺序应用以下规则：</p></li></ul><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iptables</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> INPUT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tcp</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --dport</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 22</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ACCEPT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iptables</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> OUTPUT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tcp</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --sport</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 22</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ACCEPT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iptables</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> INPUT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> DROP</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iptables</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> OUTPUT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> DROP</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p></div>`,18)]))}const k=s(n,[["render",h]]),d=JSON.parse('{"path":"/Security_Engineer/2mgrlb54/","title":"Linux防火墙","lang":"zh-CN","frontmatter":{"title":"Linux防火墙","createTime":"2024/11/16 20:44:03","permalink":"/Security_Engineer/2mgrlb54/"},"headers":[],"readingTime":{"minutes":6.38,"words":1913},"git":{"updatedTime":1732288003000,"contributors":[{"name":"suxiuf","username":"suxiuf","email":"suxiufengcool@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/suxiuf?v=4","url":"https://github.com/suxiuf"},{"name":"suxiufeng","username":"suxiufeng","email":"suxiufengcool@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/suxiufeng?v=4","url":"https://github.com/suxiufeng"},{"name":"kali","username":"kali","email":"kali@kali","commits":1,"avatar":"https://avatars.githubusercontent.com/kali?v=4","url":"https://github.com/kali"}]},"filePathRelative":"notes/Security_Engineer/linux_system_hardening/2.Linux_Firewall.md"}');export{k as comp,d as data};
