import{_ as i,c as a,a as n,o as e}from"./app-rzor12pK.js";const l="/assets/file-20241116234630-BOoGEASe.png",p="/assets/file-20241116234659-DAs3Xev3.png",t="/assets/file-20241116234753-C1DxwX3P.png",d="/assets/file-20241116234812-Dwtdp_-O.png",c="/assets/file-20241116234849-BNo1C5UI.png",h={};function r(o,s){return e(),a("div",null,s[0]||(s[0]=[n('<p>当我们对一个系统进行渗透时，知道的信息越多，就会越容易，因此需要在进行任何漏洞利用尝试之前进行必要的枚举。Nmap正是一个非常强大的网络扫描工具。</p><p>在正式开始了解NMAP前，我们需要了解以下基础信息：</p><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口"><span>端口</span></a></h2><ul><li>ports： 作用与OSI 传输层，用于将流量导向正确的应用</li><li>在计算机中共有65535个端口</li><li>其中0-1024 端口是常用的标准端口</li></ul><h2 id="tcp-协议包头" tabindex="-1"><a class="header-anchor" href="#tcp-协议包头"><span>TCP 协议包头</span></a></h2><p><img src="'+l+`" alt=""></p><blockquote><p>[!IMPORTANT] 💡注意</p><ul><li>源端口号和目的端口号（寻址）与udp中类似，用于寻找发端和收端应用进程。这两个值加上IP首部中的源端IP地址和目的端IP地址唯一确定一个，在网络编程中，一般一个IP地址和一个端口号组合称为一个套接字（socket）。</li><li>序号（seq）：用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的第一个数据字节。在tcp中tcp用序号对每个字节进行计数（这个值与发送的帧数没有关系，而是与发送的数据字节数有关系，后面会有说明）。</li><li>确认序号（seq+1）：包含发送确认的一端所期望收到的下一个序号。因此，确认序号应当是上次已成功收到数据字节序号加 1（不是单纯的序号加1，还包括数据字节数）。</li><li>首部长度：用于记录tcp数据报首部的长度，一般为20字节，实际值为首部长度除以4。</li><li>下面的是标志位对应的功能： <ul><li>URG： 紧急指针（ urgent pointer）有效。</li><li>ACK： 响应确认。</li><li>PSH： 表示有DATA数据传输，接收方应该尽快将这个报文段交给应用层。</li><li>RST： 重建连接（一般在发送FIN之后）。</li><li>SYN： 建立连接请求。</li><li>FIN： 关闭连接。</li><li>窗口大小：用于流量控制。</li><li>检验和：检验和覆盖了整个的 TCP报文段： TCP首部和TCP数据，与udp相似需要计算伪首部。</li></ul></li></ul></blockquote><h2 id="nmap" tabindex="-1"><a class="header-anchor" href="#nmap"><span>NMAP</span></a></h2><h3 id="nmap-参数" tabindex="-1"><a class="header-anchor" href="#nmap-参数"><span>NMAP 参数</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-sP</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # ping 探测主机存活</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-sS</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # SYN Scan</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-sU</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # UDP Scan</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-O</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # OS detection（系统信息检测）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-A</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # “侵略性”毫不演示，噪声大；对服务、操作系统、跟踪路由和通用脚本进行扫描</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-T</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # Nmap 提供了五个级别的“定时”模板，可用于提高扫描速度，但是越快噪音越大，越容易被发现，更可能导致报错。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-sV</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 应用版本检测</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-D</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 诱饵扫描（发送掺杂假IP的数据包，使防火墙难以判断真正的扫描源）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-v</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 详细输出扫描结果</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-vv</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 详细级别二</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-f</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 随机偏移量碎片扫描（将数据包分割成更小的部分发送，使防火墙难以识别）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-mtu</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 指定MTU大小为8的碎片扫描</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-oA</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">filenam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 导出为三种常见格式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-oN</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">filenam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 导出txt 文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-oX</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">filenam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 导出xml文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-oG</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">filenam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 导出可抓取的格式</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-p</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 端口</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">--script</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 引用脚本格式： --script=vuln</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nmap-常见扫描类型" tabindex="-1"><a class="header-anchor" href="#nmap-常见扫描类型"><span>Nmap 常见扫描类型</span></a></h3><p>使用Nmap进行端口扫描时，有三种基本扫描类型：</p><ul><li>TCP连接扫描（<code>-sT</code>）</li><li>SYN“半开”扫描（<code>-sS</code>）</li><li>UDP扫描（<code>-sU</code>）</li></ul><h4 id="tcp-连接扫描-st" tabindex="-1"><a class="header-anchor" href="#tcp-连接扫描-st"><span>TCP 连接扫描 （<code>-sT</code>）</span></a></h4><p>原理： 看是TCP请求返回值，判断端口是否开启：</p><blockquote><p>[!NOTE] 三次握手</p><ul><li>第一次：请求 <code>SYN</code></li><li>第二次：返回 <code>SYN/ACK</code> or <code>RST</code>（Reset 重置）</li><li>第三次：确认 <code>ACK</code></li></ul><p><strong>当TCP端口关闭或隐藏在防火墙之后时，会返回<code>RST</code></strong></p></blockquote><h4 id="syn-半开-扫描-ss" tabindex="-1"><a class="header-anchor" href="#syn-半开-扫描-ss"><span>SYN“半开”扫描（<code>-sS</code>）</span></a></h4><p>与TCP扫描一样，SYN扫描（<code>-sS</code>）用于扫描目标的TCP端口范围;然而，这两种扫描类型的工作方式略有不同。SYN扫描有时被称为<em>半开(Half-open)</em> 扫描或<em>隐形(Stealth)</em> 扫描。</p><p>通常用于绕过旧的入侵检测系统，对现在的IDS解决方案不再适用</p><ul><li>原理： 在完成三次握手的过程中，从服务器接收到SYN/ACK后发送回一个重复的TCP数据包（告诉服务器请求关闭，不正式建立连接） 。</li><li>优点：因为省略了向服务器返回ACK 的过程，因此扫描速度比标准扫描（-sT）快。</li><li>缺点： 需要<code>sudo</code> 权限，不稳定的应用，有可能会因SYN扫描导致关闭。 <img src="`+p+'" alt=""></li></ul><details class="hint-container details"><summary>SYN扫描还有两个名称，它们是什么？</summary><p><strong>答案：</strong> <code>Half-Open,Stealth</code></p></details><details class="hint-container details"><summary>Nmap可以在没有Sudo权限的情况下使用SYN扫描吗（Y/N）?</summary><p><strong>答案：</strong> <code>N</code></p></details><h4 id="udp-扫描-su" tabindex="-1"><a class="header-anchor" href="#udp-扫描-su"><span>UDP 扫描（<code>-sU</code>）</span></a></h4><p>由于UDP是无状态协议，因此判断端口是否打开需要额外的步骤，判断机制如下：</p><ul><li><p>向端口发送数据包：</p></li><li><p>得到UDP响应（不寻常）：端口被标记打开</p></li><li><p>得不到响应：发送第二次请求作为双重检查，被标记为：<code>open|filtered</code></p></li><li><p>得到端口不可达响应（ping数据包）：标记端口关闭</p></li></ul><blockquote><p>[!nNOTE] 由于识别UDP端口是否实际打开的困难，与各种TCP扫描相比，UDP扫描往往非常慢（在20分钟内扫描前1000个端口，连接良好）。因此，在启用<code>--top-ports &lt;number&gt;</code>的情况下运行Nmap扫描通常是一个很好的做法。例如，使用<code>nmap -sU --top-ports 20 &lt;target&gt;</code>进行扫描。将扫描前20个最常用的UDP端口，从而使扫描时间更容易接受。</p></blockquote><details class="hint-container details"><summary>如果UDP端口不响应Nmap扫描，它将被标记为什么？</summary><p><strong>答案：</strong> <code>open|filtered</code></p></details><details class="hint-container details"><summary>当UDP端口关闭时，按照惯例，目标应该发送回<code>port unreachable</code>消息。它将使用哪种协议来这样做？</summary><p><strong>答案：</strong> <code>ICMP</code></p></details><h3 id="其他扫描类型" tabindex="-1"><a class="header-anchor" href="#其他扫描类型"><span>其他扫描类型</span></a></h3><p>此外，还有几种不太常见的端口扫描类型，我们也将介绍其中一些（尽管不太详细）。这些措施包括：</p><h4 id="tcp-null-scans-sn" tabindex="-1"><a class="header-anchor" href="#tcp-null-scans-sn"><span>TCP Null Scans (<code>-sN</code>)</span></a></h4><p>当发送TCP 请求时，不设置标志。按照RFC规则，这种情况下，如果端口关闭，目标主机应使用应答器进行响应。</p><h4 id="tcp-fin-scans-sf" tabindex="-1"><a class="header-anchor" href="#tcp-fin-scans-sf"><span>TCP FIN Scans (<code>-sF</code>)</span></a></h4><p>当发送TCP 请求时，发送带有FIN（关闭连接）标志的空包，因为本身未建立连接，所以如果端口是开放的，就会返回一个错误值。</p><h4 id="tcp-xmas-scans-sx" tabindex="-1"><a class="header-anchor" href="#tcp-xmas-scans-sx"><span>TCP Xmas Scans (<code>-sX</code>)</span></a></h4><p>Xmas tree包是指<code>flags</code>中<code>FIN</code> <code>URG</code> <code>PUSH</code>被置为<code>1</code>的TCP包，因在使用Wireshark 对其响应包进行分析时，显示一个闪烁的圣诞树而得名。</p><p><img src="'+t+'" alt=""></p><div class="hint-container note"><p class="hint-container-title">注</p><p>这三种扫描方式被称为秘密扫描（Stealthy Scan），因为相对比较隐蔽。扫描时向目标主机的端口发送的TCP FIN包或Xmas tree包/Null包，如果收到对方RST回复包，那么说明该端口是关闭的；没有收到RST包说明端口可能是开放的或被屏蔽的（open|filtered）。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>虽然 RFC 793 规定，对于封闭端口，网络主机应使用 RST TCP 数据包来响应畸形数据包，而?&gt;对于开放端口，则完全不响应。</p><p>但实际情况并非总是如此，特别是 Microsoft Windows（以及许多 Cisco 网络设备），它们&gt;会对任何畸形 TCP 数据包做出 RST 响应，而不管端口是否真正开放。这将导致所有端口显示为关闭</p><p>当然，这样做的目的是为了躲避防火墙。许多防火墙都被配置为丢弃发送到已设置 SYN 标志的受&gt;阻端口的传入 TCP 数据包（从而阻止新的连接启动请求）。通过发送不包含 SYN 标志的请求，&gt;我们可以有效绕过此类防火墙。虽然这在理论上是好的，但大多数现代 IDS 解决方案对这些扫描&gt;类型都很精通，因此在处理现代系统时，不要依赖它们的 100% 有效性。 <img src="'+d+'" alt=""></p></div><h2 id="icmp-网络扫描" tabindex="-1"><a class="header-anchor" href="#icmp-网络扫描"><span>ICMP 网络扫描</span></a></h2><p>在黑盒测试中第一次接触目标网络时，我们的第一目标是获取网络架构。换句话说，我们想知道哪些 IP地址的主机是存活的，哪些未存活。通常我们会用<code>ping</code>扫描</p><p><code>-sn</code>开关告诉Nmap不要扫描任何端口，让<code>nmap</code>主要依赖于HTTP回送数据包（或者本地网络上的<code>ARP</code>请求，如果使用<code>sudo</code>运行或者直接作为<code>root</code>用户运行）来识别目标。除了响应<code>echo</code>请求之外，<code>-sn</code>交换机还将使<code>nmap</code>向目标的端口443发送TCPSYN数据包，以及向目标的端口80发送TCP ACK（或TCPSYN，如果不作为根运行）数据包。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nmap</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -sn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 192.168.0.0/24</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+c+'" alt=""></p><h2 id="nmap脚本引擎-nse" tabindex="-1"><a class="header-anchor" href="#nmap脚本引擎-nse"><span>Nmap脚本引擎（NSE）</span></a></h2><p>nmap脚本语言有以下特征</p><ul><li>Lua 语言编写</li><li>可以用于漏洞扫描</li><li>能够实现自动化漏洞利用</li></ul><h3 id="脚本分类" tabindex="-1"><a class="header-anchor" href="#脚本分类"><span>脚本分类</span></a></h3><ul><li><code>safe</code>： 不会影响目标</li><li><code>intrusive</code>： 不安全：可能影响目标</li><li><code>vuln</code>： 扫描漏洞</li><li><code>exploit</code>： 尝试利用漏洞</li><li><code>auth</code>： 尝试绕过运行服务的身份验证（例如匿名登录FTP服务器）</li><li><code>brute</code>： 尝试暴力破解正在运行的服务的凭据</li><li><code>discovery</code>： 尝试查询正在运行的服务以获取有关网络的更多信息（例如，查询SNMP服务器）。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p></div>',50)]))}const m=i(h,[["render",r]]),u=JSON.parse('{"path":"/penetration/p0lw3pm4/","title":"网络基础-NMAP","lang":"zh-CN","frontmatter":{"title":"网络基础-NMAP","createTime":"2024/11/16 19:34:46","permalink":"/penetration/p0lw3pm4/"},"headers":[],"readingTime":{"minutes":13.78,"words":4135},"git":{"updatedTime":1732288003000,"contributors":[{"name":"suxiufeng","username":"suxiufeng","email":"suxiufengcool@163.com","commits":6,"avatar":"https://avatars.githubusercontent.com/suxiufeng?v=4","url":"https://github.com/suxiufeng"},{"name":"suxiuf","username":"suxiuf","email":"suxiufengcool@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/suxiuf?v=4","url":"https://github.com/suxiuf"},{"name":"kali","username":"kali","email":"kali@kali","commits":1,"avatar":"https://avatars.githubusercontent.com/kali?v=4","url":"https://github.com/kali"}]},"filePathRelative":"notes/penetration/1.tryhackme/6.Network_NMAP.md"}');export{m as comp,u as data};
